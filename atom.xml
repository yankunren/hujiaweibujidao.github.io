<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hujiawei Bujidao]]></title>
  <link href="http://hujiaweibujidao.github.io/atom.xml" rel="self"/>
  <link href="http://hujiaweibujidao.github.io/"/>
  <updated>2014-11-18T10:43:54+08:00</updated>
  <id>http://hujiaweibujidao.github.io/</id>
  <author>
    <name><![CDATA[hujiawei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CodeForces Round 277.5 Div2]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/11/18/codeforces-round-277-dot-5-div2/"/>
    <updated>2014-11-18T10:22:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/11/18/codeforces-round-277-dot-5-div2</id>
    <content type="html"><![CDATA[<p>昨晚熬夜刷了CodeForces Round 277.5 Div2，哎，果然很难适应这么晚做题，不在状态，一个小时后才进入状态了，结果比赛完了整个人就睡不着了。。。</p>

<p>这次写解题报告的人很靠谱啊，直接附上关键代码，哈哈哈</p>

<p><a href="http://codeforces.com/contest/489/problem/A">489A - SwapSort</a></p>

<p>这题很简单，大致就是让你通过不超过n次的数据交换排序一个长度为n的数组，其实用选择排序就行了嘛，我比赛的时候不知怎么搞的，首先想到快排，结果撸了两种快排，终于有一种快排过了pretests，但是后面的system tests就挂了。。。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">import</span> <span class="nn">java.lang.reflect.Array</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">//http://codeforces.com/contest/489/problem/A</span>
</span><span class="line">
</span><span class="line"><span class="c1">//选择排序，最多只需要n次交换</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SwapSort2775A</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">ASwap2</span><span class="o">&gt;</span> <span class="n">swaps</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">Scanner</span> <span class="n">cin</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">cin</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">        <span class="kt">int</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">cin</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="n">swaps</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">ASwap2</span><span class="o">&gt;();</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">t</span><span class="o">;</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">t</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">a</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">[</span><span class="n">t</span><span class="o">])</span> <span class="n">t</span> <span class="o">=</span> <span class="n">k</span><span class="o">;</span><span class="c1">//</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">t</span> <span class="o">!=</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">swaps</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ASwap2</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">i</span><span class="o">));</span>
</span><span class="line">                <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class="line">                <span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">t</span><span class="o">];</span>
</span><span class="line">                <span class="n">a</span><span class="o">[</span><span class="n">t</span><span class="o">]</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">swaps</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="n">ASwap2</span> <span class="n">swap</span> <span class="o">:</span> <span class="n">swaps</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">swap</span><span class="o">.</span><span class="na">x</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">swap</span><span class="o">.</span><span class="na">y</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ASwap2</span> <span class="o">{</span><span class="c1">//</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">ASwap2</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
</span><span class="line">            <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="http://codeforces.com/contest/489/problem/B">489B - BerSU Ball</a></p>

<p>这题一看感觉完了，要二分图匹配了，可是当我复习了下二分图匹配(大神请尽情鄙视新手吧…)发现，尼玛这题贪心就行了啊，结果一分钟一撸就过了！核心代码就像是在做合并排序的合并操作，用两个指针分别指向两个数组的当前元素下标，如果它们能满足配对就配对，然后两个指针都向后移动，不能的话数据较小的数组的指针向后移动就行了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">import</span> <span class="nn">java.lang.reflect.Array</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">//http://codeforces.com/contest/489/problem/B</span>
</span><span class="line">
</span><span class="line"><span class="c1">//贪心，n个男孩m个女孩的舞蹈技能不同，匹配时要满足他们的技能差值不超过1，求最大匹配</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BerSUBall2775B</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">Scanner</span> <span class="n">cin</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">cin</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">        <span class="kt">int</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">cin</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">cin</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">        <span class="kt">int</span><span class="o">[]</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">m</span><span class="o">];</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">b</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">cin</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class="line">        <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-</span> <span class="n">b</span><span class="o">[</span><span class="n">j</span><span class="o">])</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">i</span><span class="o">++;</span>
</span><span class="line">                <span class="n">j</span><span class="o">++;</span>
</span><span class="line">                <span class="n">count</span><span class="o">++;</span>
</span><span class="line">            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">b</span><span class="o">[</span><span class="n">j</span><span class="o">])</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">i</span><span class="o">++;</span>
</span><span class="line">                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">j</span><span class="o">++;</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">count</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="http://codeforces.com/contest/489/problem/C">489C - Given Length and Sum of Digits…</a></p>

<p>这题大意是求由<code>m</code>位数字组成的且各位数字之和为<code>s</code>的最大数和最小数，最大数我们可以通过贪心的方式来得到，也就是从高位往低位开始设置每位的值，当前位总是取它能取的最大的那个数字，如果最大数的最后一个数字不是<code>1</code>的话，那么翻转最大数就是最小数了，否则将最小数视为第一位数字是<code>1</code>，后面是满足由<code>m-1</code>位数字组成的且各位数字之和为<code>s-1</code>的最大数的翻转数，注意<code>m=1</code>的情况(被这个坑坑了好几次…)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">//http://codeforces.com/contest/489/problem/C</span>
</span><span class="line">
</span><span class="line"><span class="c1">//贪心</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GivenLengthandSumofDigits2775C</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">Scanner</span> <span class="n">cin</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">cin</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">cin</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="o">((</span><span class="mi">9</span> <span class="o">*</span> <span class="n">m</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">)</span> <span class="o">||</span> <span class="o">(</span><span class="n">s</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">m</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;-1 -1&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="k">return</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="n">String</span> <span class="n">max</span> <span class="o">=</span> <span class="n">findMax</span><span class="o">(</span><span class="n">m</span><span class="o">,</span> <span class="n">s</span><span class="o">);</span>
</span><span class="line">        <span class="n">String</span> <span class="n">min</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="c1">//求最小值</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">max</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">max</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">!=</span> <span class="sc">&#39;0&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">min</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">(</span><span class="n">max</span><span class="o">).</span><span class="na">reverse</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">min</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">max</span><span class="o">);</span>
</span><span class="line">            <span class="k">return</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="c1">//特殊情况</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">m</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">min</span> <span class="o">=</span> <span class="s">&quot;&quot;</span> <span class="o">+</span> <span class="n">s</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">            <span class="n">min</span> <span class="o">=</span> <span class="n">findMax</span><span class="o">(</span><span class="n">m</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">s</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class="line">            <span class="n">min</span> <span class="o">=</span> <span class="s">&quot;1&quot;</span> <span class="o">+</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">(</span><span class="n">min</span><span class="o">).</span><span class="na">reverse</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">min</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">max</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//求最大值</span>
</span><span class="line">    <span class="kd">static</span> <span class="n">String</span> <span class="nf">findMax</span><span class="o">(</span><span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span><span class="c1">//当前第几位</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span><span class="c1">//剩余的总和</span>
</span><span class="line">
</span><span class="line">        <span class="n">String</span> <span class="n">max</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">k</span> <span class="o">&lt;=</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">r</span> <span class="o">&gt;=</span> <span class="mi">9</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">max</span> <span class="o">=</span> <span class="n">max</span> <span class="o">+</span> <span class="s">&quot;9&quot;</span><span class="o">;</span>
</span><span class="line">                <span class="n">r</span> <span class="o">=</span> <span class="n">r</span> <span class="o">-</span> <span class="mi">9</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">                <span class="n">max</span> <span class="o">=</span> <span class="n">max</span> <span class="o">+</span> <span class="n">r</span><span class="o">;</span>
</span><span class="line">                <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="n">k</span><span class="o">++;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">max</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/11/18/codeforces-round-277-dot-5-div2/">http://hujiaweibujidao.github.io/blog/2014/11/18/codeforces-round-277-dot-5-div2/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[using Qiniu JS SDK to upload Videos in Django]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/11/14/using-qiniu-js-sdk-to-upload-videos-in-django/"/>
    <updated>2014-11-14T22:48:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/11/14/using-qiniu-js-sdk-to-upload-videos-in-django</id>
    <content type="html"><![CDATA[<p>最近做的项目中需要使用七牛云存储服务来存储网站(Django开发)中用户上传的视频，于是就有了下面一番折腾。</p>

<p>我想要的目标是可以上传视频，最好还能显示上传的进度</p>

<p>传送门: <a href="https://github.com/qiniupd/qiniu-js-sdk">七牛的Javascript SDK on Github</a></p>

<p>七牛提供了一个演示通过该SDK进行文件上传的网站：<a href="http://jssdk.demo.qiniu.io">http://jssdk.demo.qiniu.io</a></p>

<p><img src="http://hujiaweibujidao.github.io/images/qiniu1.png" alt="image" /></p>

<p>这个网站做得非常好，演示了文件上传并显示了上传的进度，正是我想要的效果，所以我后面把这个JS SDK嵌入到Django项目中，测试其功能</p>

<p>下面这段代码演示的是在纯Python项目中如何将文件上传到七牛服务器，若还没有安装七牛的话请先运行 <code>pip install qiniu</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># coding=utf-8</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">os</span>
</span><span class="line">
</span><span class="line"><span class="n">__author__</span> <span class="o">=</span> <span class="s">&#39;hujiawei&#39;</span>
</span><span class="line"><span class="n">__doc__</span> <span class="o">=</span> <span class="s">&#39;qiniu sdk video demo&#39;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">StringIO</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">qiniu.conf</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">qiniu.rs</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">qiniu.io</span>
</span><span class="line">
</span><span class="line"><span class="n">BUCKET_NAME</span> <span class="o">=</span> <span class="s">&quot;YOUR_BUCKET_NAME&quot;</span>
</span><span class="line"><span class="n">qiniu</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">ACCESS_KEY</span> <span class="o">=</span> <span class="s">&quot;YOUR_ACCESS_KEY&quot;</span>
</span><span class="line"><span class="n">qiniu</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">SECRET_KEY</span> <span class="o">=</span> <span class="s">&quot;YOUR_SECRET_KEY&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">policy</span> <span class="o">=</span> <span class="n">qiniu</span><span class="o">.</span><span class="n">rs</span><span class="o">.</span><span class="n">PutPolicy</span><span class="p">(</span><span class="n">BUCKET_NAME</span><span class="p">)</span>
</span><span class="line"><span class="n">uptoken</span> <span class="o">=</span> <span class="n">policy</span><span class="o">.</span><span class="n">token</span><span class="p">()</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">uptoken</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># ############ 示例：上传视频 ###############</span>
</span><span class="line"><span class="c"># extra = qiniu.io.PutExtra()</span>
</span><span class="line"><span class="c"># item = os.path.join(os.getcwd(), &#39;hellokitty.m4v&#39;)</span>
</span><span class="line"><span class="c"># ret, err = qiniu.io.put_file(uptoken, None, item, extra)</span>
</span><span class="line"><span class="c"># if err is not None:</span>
</span><span class="line"><span class="c">#     sys.stderr.write(&#39;error: %s &#39; % err)</span>
</span><span class="line">
</span><span class="line"><span class="c">#ok: hamster.swf</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c"># ############ 示例：上传图片 ###############</span>
</span><span class="line"><span class="n">extra</span> <span class="o">=</span> <span class="n">qiniu</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="n">PutExtra</span><span class="p">()</span>
</span><span class="line"><span class="n">extra</span><span class="o">.</span><span class="n">mime_type</span> <span class="o">=</span> <span class="s">&quot;image/jpeg&quot;</span>
</span><span class="line"><span class="c"># print os.getcwd() #/Users/hujiawei/PycharmProjects/qiniusimple</span>
</span><span class="line"><span class="n">item</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span> <span class="s">&#39;coder.jpg&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">ret</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">qiniu</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="n">put_file</span><span class="p">(</span><span class="n">uptoken</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="n">extra</span><span class="p">)</span>
</span><span class="line"><span class="k">if</span> <span class="n">err</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">    <span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;error: </span><span class="si">%s</span><span class="s"> &#39;</span> <span class="o">%</span> <span class="n">err</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># extra = qiniu.io.PutExtra()</span>
</span><span class="line"><span class="c"># # extra.mime_type = &quot;image/jpeg&quot; #image/png 七牛能够自动识别mime-type</span>
</span><span class="line"><span class="c"># # print os.getcwd() #/Users/hujiawei/PycharmProjects/qiniusimple</span>
</span><span class="line"><span class="c"># item = os.path.join(os.getcwd(), &#39;apple.png&#39;)</span>
</span><span class="line"><span class="c"># ret, err = qiniu.io.put_file(uptoken, None, item, extra)</span>
</span><span class="line">
</span><span class="line"><span class="c">############# 示例：上传字符串内容 ###############</span>
</span><span class="line"><span class="c"># extra = qiniu.io.PutExtra()</span>
</span><span class="line"><span class="c"># extra.mime_type = &quot;text/plain&quot;</span>
</span><span class="line"><span class="c"># key = &quot;hellotxt&quot;</span>
</span><span class="line"><span class="c"># data = StringIO.StringIO(&quot;hello!&quot;) # data 可以是str或readable对象</span>
</span><span class="line"><span class="c"># ret, err = qiniu.io.put(uptoken, key, data, extra)</span>
</span><span class="line"><span class="c"># if err is not None:</span>
</span><span class="line"><span class="c">#     sys.stderr.write(&#39;error: %s &#39; % err)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>本来我以为要在Django中使用这个SDK会很难，因为看到该项目的Github介绍还要安装<code>Node.js</code>等工具，可是实践了发现其实不难，如果只是想简单地使用它那么可以就把它们当做一个js库就行了。</p>

<p>需要的可以下载 <a href="http://hujiaweibujidao.github.io/files/qiniudemo.zip">A Django site using Qiniu JS SDK</a></p>

<p>如果要正常运行，请先仔细阅读下面的内容：</p>

<p>1.修改<code>video/views.py</code>中的如下内容，具体填什么你懂得</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">BUCKET_NAME</span> <span class="o">=</span> <span class="s">&quot;YOUR_BUCKET_NAME&quot;</span>
</span><span class="line"><span class="n">qiniu</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">ACCESS_KEY</span> <span class="o">=</span> <span class="s">&quot;YOUR_ACCESS_KEY&quot;</span>
</span><span class="line"><span class="n">qiniu</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">SECRET_KEY</span> <span class="o">=</span> <span class="s">&quot;YOUR_SECRET_KEY&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.修改<code>static/js/main.js</code>中的内容，我设置了获取uptoken的请求URL为<code>/video/uptoken</code>，这样每次要上传一个文件的时候，这个URL就会被调用，它会返回一个JSON字符串，包含了<code>uptoken</code>的值，具体可见<code>video/views.py</code>中的<code>uptoken</code>方法；其次还设置了域名，你需要将它设置为你的七牛域名，例如<code>http://whyeduvideo.qiniudn.com/</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">uptoken_url</span><span class="p">:</span> <span class="s">&#39;/video/uptoken&#39;</span><span class="p">,</span>
</span><span class="line"><span class="n">domain</span><span class="p">:</span> <span class="s">&#39;YOUR_DOMAIN_NAME&#39;</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>其他的内容就不用修改了，直接运行项目，进入到<code>http://127.0.0.1:8000/video/</code>下就能看到</p>

<p><img src="http://hujiaweibujidao.github.io/images/qiniu2.png" alt="image" /></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/11/14/using-qiniu-js-sdk-to-upload-videos-in-django/">http://hujiaweibujidao.github.io/blog/2014/11/14/using-qiniu-js-sdk-to-upload-videos-in-django/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ACdream Java Contest]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/11/14/acdream-java-contest/"/>
    <updated>2014-11-14T15:34:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/11/14/acdream-java-contest</id>
    <content type="html"><![CDATA[<p>前天参加了ACdream训练赛系列のJava专场，成绩很烂，感谢<a href="http://mathlover.info/archives/acdream_java#comment-4460">出题人的解题报告</a></p>

<p><a href="http://acdream.info/problem?pid=1669">A题:数一的偶像</a></p>

<p>这道题目出得很好，我也是输出前面100个数字的结果看到一点规律，可惜不是最终的规律。我发现的是首先出现3个1，然后5个0，然后7个1，然后9个0，一直往下延续，仔细想，个数刚好是相邻的完全平方数的差值，3=4-1，5=9-4，7=16-9等等，如果写下来更加容易看出规律：</p>

<p>3(1):  1  2  3  <br />
5(0):  4  5  6  7  8  <br />
7(1):  9 10 11 12 13 14 15  <br />
9(0): 16 17 18 19 20 21 22 23 24  <br />
…</p>

<p>仔细观察每行的第一个数字就知道它们正是完全平方数，但是为什么这么凑巧呢？其实，函数 <script type="math/tex">y=\frac{n}{x}</script> 是一个关于直线 <script type="math/tex">y=x</script> 对称的函数，那么除了在直线 <script type="math/tex">y=x</script> 上的点之外，其他的点数之和一定是偶数，所以只要看该函数与直线 <script type="math/tex">y=x</script> 的交点即可，实际上问题就变成n前面有几个完全平方数，即求n的平方根(然后对2取模即可)。</p>

<p>但是题目给出的n可能很大很大，对它求平方根又成为了一个问题，这里可以使用经典的二分法来逼近。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">import</span> <span class="nn">java.math.BigInteger</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">//http://acdream.info/problem?pid=1669</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test1669</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
</span><span class="line">        <span class="n">BigInteger</span> <span class="n">n</span><span class="o">;</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">scanner</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">            <span class="n">n</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextBigInteger</span><span class="o">();</span>
</span><span class="line">            <span class="n">solve</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">solve</span><span class="o">(</span><span class="n">BigInteger</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">BigInteger</span> <span class="n">l</span> <span class="o">=</span> <span class="n">BigInteger</span><span class="o">.</span><span class="na">ONE</span><span class="o">;</span>
</span><span class="line">        <span class="n">BigInteger</span> <span class="n">r</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
</span><span class="line">        <span class="n">BigInteger</span> <span class="n">mid</span><span class="o">;</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">l</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">r</span><span class="o">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">mid</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">r</span><span class="o">).</span><span class="na">shiftRight</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">mid</span><span class="o">.</span><span class="na">multiply</span><span class="o">(</span><span class="n">mid</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">mid</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">mid</span><span class="o">).</span><span class="na">compareTo</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">l</span> <span class="o">=</span> <span class="n">mid</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">BigInteger</span><span class="o">.</span><span class="na">ONE</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">                <span class="n">r</span> <span class="o">=</span> <span class="n">mid</span><span class="o">.</span><span class="na">subtract</span><span class="o">(</span><span class="n">BigInteger</span><span class="o">.</span><span class="na">ONE</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">l</span><span class="o">.</span><span class="na">remainder</span><span class="o">(</span><span class="n">BigInteger</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">2</span><span class="o">)));</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="http://acdream.info/problem?pid=1670">B题:数一的偶像2</a></p>

<p>这题纯数学题，表示不知道这个公式的跪了好久好久。。。</p>

<p>欧拉函数 <script type="math/tex">phi(x) = x \prod_{p}{(1-1/p)}</script> ，其中p是x的质因子</p>

<p>问题就变成了求 <script type="math/tex">\prod_{p}{(1-1/p)}</script> 的在不超过n的情况下最小值，而质因子都是大于等于2的，所以这个值随着质因子越来越多值反而越来越小，所以只要保证其值不超过n，尽可能地添加质因子就能得到最小值。以下代码包含一个素数筛选过程，和标程略有不同。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">import</span> <span class="nn">java.math.BigInteger</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">//http://acdream.info/problem?pid=1670</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test1670</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">arg</span><span class="o">[])</span> <span class="o">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">p</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">10000</span><span class="o">];</span><span class="c1">//存储素数 2 3 5 7 11 13 17 19 23 29 ...</span>
</span><span class="line">        <span class="kt">boolean</span> <span class="n">isnp</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="mi">10001</span><span class="o">];</span><span class="c1">//标记是否为素数</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">pn</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span><span class="c1">//标记是第pn个素数，结合p[]可以得到对应的素数，2是第0个</span>
</span><span class="line">        <span class="n">isnp</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">isnp</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span><span class="c1">//isnp[i]=true表示i不是素数</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">10000</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(!</span><span class="n">isnp</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span><span class="c1">//默认都是false的</span>
</span><span class="line">                <span class="n">p</span><span class="o">[</span><span class="n">pn</span><span class="o">++]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span><span class="c1">//添加一个素数</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="c1">//for (int j = 0; j &lt; pn &amp;&amp; i * p[j] &lt;= 10000; ++j) {</span>
</span><span class="line">            <span class="c1">//    isnp[i * p[j]] = true;</span>
</span><span class="line">            <span class="c1">//    if (i % p[j] == 0)</span>
</span><span class="line">            <span class="c1">//        break;</span>
</span><span class="line">            <span class="c1">//}</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">*</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="mi">10000</span><span class="o">;</span> <span class="o">++</span><span class="n">j</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">isnp</span><span class="o">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span><span class="c1">//给定范围的数字中素数的整数倍一定不是素数</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="n">Scanner</span> <span class="n">cin</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">cin</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">            <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">            <span class="n">BigInteger</span> <span class="n">n</span> <span class="o">=</span> <span class="n">cin</span><span class="o">.</span><span class="na">nextBigInteger</span><span class="o">(),</span> <span class="n">now</span> <span class="o">=</span> <span class="n">BigInteger</span><span class="o">.</span><span class="na">ONE</span><span class="o">;</span>
</span><span class="line">            <span class="k">while</span> <span class="o">(</span><span class="n">now</span><span class="o">.</span><span class="na">multiply</span><span class="o">(</span><span class="n">BigInteger</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">p</span><span class="o">[</span><span class="n">i</span><span class="o">])).</span><span class="na">compareTo</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">now</span> <span class="o">=</span> <span class="n">now</span><span class="o">.</span><span class="na">multiply</span><span class="o">(</span><span class="n">BigInteger</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">p</span><span class="o">[</span><span class="n">i</span><span class="o">]));</span>
</span><span class="line">                <span class="n">i</span><span class="o">++;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">now</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="http://acdream.info/problem?pid=1668">C题:数一与ACM的虐恋</a></p>

<p>我表示做这道题目很虐好么，要不要这么虐我们，就当是学习了下BigDecimal怎么用的吧，精度精度。。。</p>

<p>这题其实很简单，DP，但是状态转移是带着概率的，标程的坐标系是自底向上从左往右来的，初始时dp[n][1]=0，dp[n][i]=i-1，对于整个上三角的斜边上的位置只有两种走法，所以有</p>

<p>dp[i][1]=(a+c<em>0.5)</em>(dp[i+1][1]+1))+(b+c<em>0.5)</em>(dp[i+1][2]+1)</p>

<p>其他位置上有三种走法，有</p>

<p>dp[i][j]=a<em>(dp[i+1][j]+1)+b</em>(dp[i+1][j+1]+1)+c*(dp[i][j-1]+1)</p>

<p>以下是标程</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">import</span> <span class="nn">java.math.BigDecimal</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">//http://acdream.info/problem?pid=1668</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test1668</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">arg</span><span class="o">[])</span> <span class="o">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
</span><span class="line">        <span class="n">BigDecimal</span> <span class="n">p</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>
</span><span class="line">        <span class="n">Scanner</span> <span class="n">cin</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">cin</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">            <span class="n">n</span> <span class="o">=</span> <span class="n">cin</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">cin</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">                <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">cin</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">                <span class="n">p</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">BigDecimal</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">a</span><span class="o">).</span><span class="na">divide</span><span class="o">(</span><span class="n">BigDecimal</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">c</span><span class="o">),</span> <span class="mi">100</span><span class="o">,</span> <span class="n">BigDecimal</span><span class="o">.</span><span class="na">ROUND_HALF_EVEN</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="c1">//a=p[0], b=p[1], c=p[2], a+c/2=p[3], b+c/2=p[4]</span>
</span><span class="line">            <span class="n">p</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">=</span> <span class="n">p</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">p</span><span class="o">[</span><span class="mi">2</span><span class="o">].</span><span class="na">divide</span><span class="o">(</span><span class="n">BigDecimal</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">2</span><span class="o">),</span> <span class="mi">100</span><span class="o">,</span> <span class="n">BigDecimal</span><span class="o">.</span><span class="na">ROUND_HALF_EVEN</span><span class="o">));</span>
</span><span class="line">            <span class="n">p</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="o">=</span> <span class="n">p</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">p</span><span class="o">[</span><span class="mi">2</span><span class="o">].</span><span class="na">divide</span><span class="o">(</span><span class="n">BigDecimal</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">2</span><span class="o">),</span> <span class="mi">100</span><span class="o">,</span> <span class="n">BigDecimal</span><span class="o">.</span><span class="na">ROUND_HALF_EVEN</span><span class="o">));</span>
</span><span class="line">            <span class="c1">//</span>
</span><span class="line">            <span class="n">BigDecimal</span><span class="o">[][]</span> <span class="n">dp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">[</span><span class="n">n</span> <span class="o">+</span> <span class="mi">2</span><span class="o">][</span><span class="n">n</span> <span class="o">+</span> <span class="mi">2</span><span class="o">];</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span>
</span><span class="line">                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="o">++</span><span class="n">j</span><span class="o">)</span>
</span><span class="line">                    <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">BigDecimal</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mf">0.0</span><span class="o">).</span><span class="na">setScale</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span><span class="line">            <span class="c1">//dp[n][1] = BigDecimal.valueOf(0.0).setScale(100);//多余</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span>
</span><span class="line">                <span class="n">dp</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">dp</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">i</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">BigDecimal</span><span class="o">.</span><span class="na">ONE</span><span class="o">));</span><span class="c1">//no += here!</span>
</span><span class="line">            <span class="c1">//从上往下，从左往右依次递推</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="o">;</span> <span class="o">--</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">p</span><span class="o">[</span><span class="mi">3</span><span class="o">].</span><span class="na">multiply</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">BigDecimal</span><span class="o">.</span><span class="na">ONE</span><span class="o">))).</span><span class="na">add</span><span class="o">(</span><span class="n">p</span><span class="o">[</span><span class="mi">4</span><span class="o">].</span><span class="na">multiply</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="mi">2</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">BigDecimal</span><span class="o">.</span><span class="na">ONE</span><span class="o">)));</span>
</span><span class="line">                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="o">++</span><span class="n">j</span><span class="o">)</span>
</span><span class="line">                    <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">p</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">multiply</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">BigDecimal</span><span class="o">.</span><span class="na">ONE</span><span class="o">)).</span><span class="na">add</span><span class="o">(</span><span class="n">p</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">multiply</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">BigDecimal</span><span class="o">.</span><span class="na">ONE</span><span class="o">))).</span><span class="na">add</span><span class="o">(</span><span class="n">p</span><span class="o">[</span><span class="mi">2</span><span class="o">].</span><span class="na">multiply</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">BigDecimal</span><span class="o">.</span><span class="na">ONE</span><span class="o">))));</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">].</span><span class="na">setScale</span><span class="o">(</span><span class="mi">50</span><span class="o">,</span> <span class="n">BigDecimal</span><span class="o">.</span><span class="na">ROUND_HALF_EVEN</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="http://acdream.info/problem?pid=1667">D题:调皮的数一</a></p>

<p>这题其实很简单，DP，不过我找到的又不是最好的递推式，不过易于理解，好在卡得不紧张可以打表通过。[标程600ms多一点，我的1000ms多一点]</p>

<p>设f[k][t]表示第k步在t跑道，f[0][1]=1，f[1][1]=1，且有</p>

<p>f[k][t]=f[k-1][t-1]+f[k-1][t]+f[k-1][t+1]</p>

<p>根据递推式能够求得最终解f[n][1]。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">import</span> <span class="nn">java.math.BigInteger</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">//http://acdream.info/problem?pid=1667</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test1667</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">BigInteger</span><span class="o">[][]</span> <span class="n">f</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">cal</span><span class="o">();</span>
</span><span class="line">        <span class="n">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">scanner</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">            <span class="n">n</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">f</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="mi">1</span><span class="o">]);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">cal</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">1001</span><span class="o">;</span>
</span><span class="line">        <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BigInteger</span><span class="o">[</span><span class="n">len</span><span class="o">][</span><span class="n">len</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">f</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">BigInteger</span><span class="o">.</span><span class="na">ZERO</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="n">f</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">BigInteger</span><span class="o">.</span><span class="na">ONE</span><span class="o">;</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">f</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">f</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">f</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">]).</span><span class="na">add</span><span class="o">(</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="n">len</span> <span class="o">?</span> <span class="n">BigInteger</span><span class="o">.</span><span class="na">ZERO</span> <span class="o">:</span> <span class="n">f</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>但是此题还有更优的递推式，我打表算法是 <script type="math/tex">O(n^2)</script>的，但是其实可以根据上面的递推式得到一个新的 <script type="math/tex">O(n)</script> 的递推式，具体式子见<a href="http://mathlover.info/archives/acdream_java#comment-4460">出题者的解题报告</a>，我目前还未理解，等我理解了再更新。</p>

<p>标程如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">import</span> <span class="nn">java.math.BigInteger</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">arg</span><span class="o">[])</span> <span class="kd">throws</span> <span class="n">IOException</span>
</span><span class="line">    <span class="o">{</span>
</span><span class="line">        <span class="n">Scanner</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
</span><span class="line">        <span class="n">BigInteger</span> <span class="n">ans</span><span class="o">[]=</span><span class="k">new</span> <span class="n">BigInteger</span><span class="o">[</span><span class="mi">1005</span><span class="o">];</span>
</span><span class="line">        <span class="n">ans</span><span class="o">[</span><span class="mi">0</span><span class="o">]=</span><span class="n">BigInteger</span><span class="o">.</span><span class="na">ONE</span><span class="o">;</span>
</span><span class="line">        <span class="n">ans</span><span class="o">[</span><span class="mi">1</span><span class="o">]=</span><span class="n">BigInteger</span><span class="o">.</span><span class="na">ONE</span><span class="o">;</span>
</span><span class="line">        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="mi">1000</span><span class="o">;++</span><span class="n">i</span><span class="o">)</span>
</span><span class="line">            <span class="n">ans</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">ans</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="na">multiply</span><span class="o">(</span><span class="n">BigInteger</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">2</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">)).</span><span class="na">add</span><span class="o">(</span><span class="n">ans</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="o">].</span><span class="na">multiply</span><span class="o">(</span><span class="n">BigInteger</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">3</span><span class="o">*</span><span class="n">i</span><span class="o">-</span><span class="mi">3</span><span class="o">))).</span><span class="na">divide</span><span class="o">(</span><span class="n">BigInteger</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="o">));</span>
</span><span class="line">        <span class="k">while</span><span class="o">(</span><span class="n">in</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span>
</span><span class="line">        <span class="o">{</span>
</span><span class="line">            <span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">in</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">            <span class="kt">byte</span><span class="o">[]</span> <span class="n">buff</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">ans</span><span class="o">[</span><span class="n">n</span><span class="o">])+</span><span class="s">&quot;\n&quot;</span><span class="o">).</span><span class="na">getBytes</span><span class="o">();</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">buff</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>E题算了，我觉得此题很无聊，=o=</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/11/14/acdream-java-contest/">http://hujiaweibujidao.github.io/blog/2014/11/14/acdream-java-contest/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BestCoder Round 17]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/11/09/bestcoder-round-17/"/>
    <updated>2014-11-09T20:16:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/11/09/bestcoder-round-17</id>
    <content type="html"><![CDATA[<p>最近终于确定了接下来要做什么，为了明年能够顺利拿到offer，我要从平时开始多做题了，多思考，不再接什么项目了。搜索了一番发现了一些好的比赛，比如CodeForces和BestCoder，哈哈哈，说练就练！</p>

<p>下面是昨天注册参加的BestCoder Round 17，总共四道题，只搞定了两道，后面那道还被别人hack掉了，当时想过可能会超过int的表示范围，但是时间不多就没多想了，菜鸟阶段暂时只能如此了。</p>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5100">Chessboard</a></p>

<p>第一题是说用大小为 k<em>1 的方砖来填充 n</em>n 的棋盘，问棋盘中最多能够有多少个方格能够被覆盖。</p>

<p><a href="http://www.matrix67.com/blog/archives/5900">Matrix67</a> 在他的博客中具体地介绍过这个问题的解法，其实就是两种情况，一个是可以直观地尽可能多地覆盖，另一个是以风车形式覆盖，这题代码很好写，但是思路不好想。</p>

<p>BestCoder题解：</p>

<p>首先，若n&lt;k，则棋盘连一个1×k的矩形都放不下，输出0。      <br />
我们只需要考虑n≥k的情况。将棋盘类似于黑白染色，按(i+j)模k划分等价类，给每个格子标一个号。标号之后，会注意到每条从左下到右上的斜线数字都是相同的，那么对于s×s的格子，其内部数字有且恰好有2s−1种，所以当 <script type="math/tex">% &lt;![CDATA[
s<=\frac{k}{2} %]]&gt;</script> 的时候，内部数字有 <script type="math/tex">% &lt;![CDATA[
floor(\frac{k}{2})*2−1<k %]]&gt;</script> 种，所以不能有更佳的方案。从而证明最优的方案一定是仅剩下一个s×s的正方形区域没有被覆盖到，其中 <script type="math/tex">% &lt;![CDATA[
s<=\frac{k}{2} %]]&gt;</script>。     <br />
而令l=n mod k之后，根据l大小的不同，可以构造出中心为l×l或(k−l)×(k−l)的风车形图案，又通过上面证明这个l（或k−l）就是之前的s，所以是最优的。所以令l=n mod k，如果 <script type="math/tex">% &lt;![CDATA[
l<=\frac{k}{2} %]]&gt;</script>，最多可覆盖的格子数即为 <script type="math/tex">n^2−l^2</script>，否则为 <script type="math/tex">n^2−(k−l)^2</script>，显然这样的方案是可以构造出来的（风车形）。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">//http://acm.hdu.edu.cn/showproblem.php?pid=5100</span>
</span><span class="line">
</span><span class="line"><span class="c1">//思路，根据n%k和k/2的大小关系来判断如何覆盖</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Cheeseboard17A</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">t</span><span class="o">--</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">            <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">k</span> <span class="o">&gt;</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;0&quot;</span><span class="o">);</span>
</span><span class="line">                <span class="k">continue</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">n</span> <span class="o">%</span> <span class="n">k</span><span class="o">;</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">m</span> <span class="o">&gt;</span> <span class="n">k</span> <span class="o">/</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">n</span> <span class="o">*</span> <span class="n">n</span> <span class="o">-</span> <span class="o">(</span><span class="n">k</span> <span class="o">-</span> <span class="n">m</span><span class="o">)</span> <span class="o">*</span> <span class="o">(</span><span class="n">k</span> <span class="o">-</span> <span class="n">m</span><span class="o">));</span>
</span><span class="line">            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">n</span> <span class="o">*</span> <span class="n">n</span> <span class="o">-</span> <span class="n">m</span> <span class="o">*</span> <span class="n">m</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5101">Select</a></p>

<p>题目大意就是给定一些集合，选择两个来自不同集合的数，加和大于k，问有多少种选择方案。</p>

<p>思路：答案=从所有数中选择的两个加和大于k的数的方案数-在同一个集合中选择的两个加和大于k的数的方案数，而对于同一个集合中选择的两个加和大于k的方案数是可以直接排序然后利用单调性快速统计出来的。</p>

<p>实现：将满足条件的所有组合减去每个班级中满足条件的所有组合，求解时可以将所有学生视为一个新的班，先对所有班级的学生IQ值排序，某个班满足条件的组合数目类似二分策略的插入排序，就是要找到数组的某个子序列中大于等于某个数的所有数字的个数。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">//http://acm.hdu.edu.cn/showproblem.php?pid=5101</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Select17B2</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">t</span><span class="o">--</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">            <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">            <span class="kt">int</span><span class="o">[][]</span> <span class="n">vs</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">][];</span>
</span><span class="line">            <span class="kt">int</span> <span class="n">allm</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span><span class="c1">//获取数据</span>
</span><span class="line">                <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">                <span class="n">allm</span> <span class="o">+=</span> <span class="n">m</span><span class="o">;</span>
</span><span class="line">                <span class="n">vs</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">m</span><span class="o">];</span>
</span><span class="line">                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">vs</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="c1">//排序每个班级</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">vs</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="c1">//排序所有学生</span>
</span><span class="line">            <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">            <span class="kt">int</span><span class="o">[]</span> <span class="n">all</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">allm</span><span class="o">];</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">vs</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="mi">0</span><span class="o">,</span> <span class="n">all</span><span class="o">,</span> <span class="n">offset</span><span class="o">,</span> <span class="n">vs</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">);</span>
</span><span class="line">                <span class="n">offset</span> <span class="o">+=</span> <span class="n">vs</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">all</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">            <span class="kt">long</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">getCount</span><span class="o">(</span><span class="n">all</span><span class="o">,</span> <span class="n">s</span><span class="o">);</span>
</span><span class="line">            <span class="c1">//System.out.println(sum);</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">sum</span> <span class="o">-=</span> <span class="n">getCount</span><span class="o">(</span><span class="n">vs</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">s</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sum</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//得到一个数组中满足两个元素之和大于s的组合数</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">getCount</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">all</span><span class="o">,</span> <span class="kt">int</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="kt">long</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">l</span> <span class="o">=</span> <span class="n">all</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">l</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">all</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span><span class="c1">//这个数比s+1更大，那么后面的数都可以和它组合</span>
</span><span class="line">                <span class="n">res</span> <span class="o">+=</span> <span class="n">l</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span><span class="c1">//</span>
</span><span class="line">            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span><span class="c1">//否则的话找到从后面哪个数字开始可以和它进行组合</span>
</span><span class="line">                <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">s</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">all</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class="line">                <span class="n">res</span> <span class="o">+=</span> <span class="n">bs</span><span class="o">(</span><span class="n">all</span><span class="o">,</span> <span class="n">r</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">l</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//得到一个数组从from到end之间满足大于等于r的数字的个数 [二分查找]</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">bs</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">vs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">,</span> <span class="kt">int</span> <span class="n">from</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">end</span> <span class="o">-</span> <span class="n">from</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span><span class="c1">//</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">len</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">from</span><span class="o">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">end</span><span class="o">,</span> <span class="n">mid</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">r</span> <span class="o">&lt;=</span> <span class="n">vs</span><span class="o">[</span><span class="n">mid</span><span class="o">])</span> <span class="o">{</span>
</span><span class="line">                <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">r</span> <span class="o">&gt;</span> <span class="n">vs</span><span class="o">[</span><span class="n">mid</span><span class="o">])</span> <span class="o">{</span>
</span><span class="line">                <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">end</span> <span class="o">-</span> <span class="n">left</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>后面的等我写好了再附上，嘿嘿嘿。</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/11/09/bestcoder-round-17/">http://hujiaweibujidao.github.io/blog/2014/11/09/bestcoder-round-17/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google APAC 2015 University Graduates Test Round D]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/11/09/google-apac-2015-university-graduates-test-round-d/"/>
    <updated>2014-11-09T19:09:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/11/09/google-apac-2015-university-graduates-test-round-d</id>
    <content type="html"><![CDATA[<p>前段时间才知道的Google APAC比赛，于是乎注册了今天下午的比赛，Round D，总共四道题，只过了两道，完了之后现在过了三道。这三道都不难只是觉得很奇怪，不熟悉这种比赛模式，它是让你下载输入文件，然后你在给定时间内提交输出文件和源程序即可，对于每道题目都有一个小测试集和大测试集。我以为一般大测试集肯定不好过的，但是纳闷的是其实也很好过，所以本来第二题暴力很简单就能过，我以为要优化，写了半天还是错了，于是在比赛前暴力了一下，结果竟然过了，哎，请理解俺这个菜鸟。</p>

<p>废话不多说了，下面是前三题的解题报告 </p>

<p>[我的代码总是冗长冗长的，可读性高，但是花的时间总是比别人长，所以我真心不适合比赛，汗⊙﹏⊙]</p>

<h3 id="problem-a-cube-ivhttpscodegooglecomcodejamcontest6214486dashboardsp0"><a href="https://code.google.com/codejam/contest/6214486/dashboard#s=p0">Problem A. Cube IV</a></h3>

<p>问题A是说在S*S个方格中，每个方格代表一个房间，房间有一个房间编号，从1到S的平方，每个里面有一个人，这个人可以从一个房间A移动到另一个房间B，但是必须满足房间B的编号比房间A的编号大1才行，问哪个房间的人能够移动的距离最远，最远的距离又是多少？如果两个人能够移动的距离相同，输出房间号小的那个人。</p>

<p>思路：自始至终维护结果r和d，从房间号最大的那个房间开始DFS，遇到房间号小1的房间就进入，一直下去直到不能移动了，修改r和d的值，然后从比上次停下来的房间小1的房间开始继续DFS，如果他移动的距离更多的话，那么就修改d和r即可，一直下去就能得到最终解。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">import</span> <span class="nn">java.io.BufferedOutputStream</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.FileOutputStream</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.PrintStream</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">//https://code.google.com/codejam/contest/6214486/dashboard#s=p0</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProblemA</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">s</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">p</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">        <span class="n">PrintStream</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrintStream</span><span class="o">(</span><span class="k">new</span> <span class="n">BufferedOutputStream</span><span class="o">(</span><span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="s">&quot;data/out.txt&quot;</span><span class="o">)));</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">out</span><span class="o">);</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">setErr</span><span class="o">(</span><span class="n">out</span><span class="o">);</span>
</span><span class="line">        <span class="n">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&quot;data/in.txt&quot;</span><span class="o">));</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">t</span><span class="o">--</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">s</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">            <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">s</span><span class="o">][</span><span class="n">s</span><span class="o">];</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">p</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;Case #&quot;</span> <span class="o">+</span> <span class="n">c</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span><span class="o">);</span>
</span><span class="line">            <span class="n">solve</span><span class="o">();</span>
</span><span class="line">            <span class="n">c</span><span class="o">++;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="n">out</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class="line">        <span class="n">out</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">solve</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">1</span><span class="o">,</span> <span class="n">max</span> <span class="o">=</span> <span class="n">s</span> <span class="o">*</span> <span class="n">s</span><span class="o">;</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">max</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">max</span> <span class="o">&gt;=</span> <span class="n">d</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">Point</span> <span class="n">maxp</span> <span class="o">=</span> <span class="n">findPoint</span><span class="o">(</span><span class="n">max</span><span class="o">);</span>
</span><span class="line">            <span class="n">Result</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Result</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class="line">            <span class="n">dfs</span><span class="o">(</span><span class="n">maxp</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">d</span> <span class="o">&gt;=</span> <span class="n">d</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">r</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">r</span><span class="o">;</span>
</span><span class="line">                <span class="n">d</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">d</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="n">max</span> <span class="o">=</span> <span class="n">max</span> <span class="o">-</span> <span class="n">result</span><span class="o">.</span><span class="na">d</span><span class="o">;</span><span class="c1">//</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">r</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">d</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="n">Point</span> <span class="n">current</span><span class="o">,</span> <span class="n">Result</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="c1">//left</span>
</span><span class="line">        <span class="n">Point</span> <span class="n">left</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">left</span><span class="o">();</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">left</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">[</span><span class="n">left</span><span class="o">.</span><span class="na">x</span><span class="o">][</span><span class="n">left</span><span class="o">.</span><span class="na">y</span><span class="o">]</span> <span class="o">==</span> <span class="n">p</span><span class="o">[</span><span class="n">current</span><span class="o">.</span><span class="na">x</span><span class="o">][</span><span class="n">current</span><span class="o">.</span><span class="na">y</span><span class="o">]</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">result</span><span class="o">.</span><span class="na">r</span> <span class="o">=</span> <span class="n">p</span><span class="o">[</span><span class="n">left</span><span class="o">.</span><span class="na">x</span><span class="o">][</span><span class="n">left</span><span class="o">.</span><span class="na">y</span><span class="o">];</span>
</span><span class="line">            <span class="n">result</span><span class="o">.</span><span class="na">d</span><span class="o">++;</span>
</span><span class="line">            <span class="n">dfs</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class="line">            <span class="k">return</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="c1">//right</span>
</span><span class="line">        <span class="n">Point</span> <span class="n">right</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">right</span><span class="o">();</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">right</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">[</span><span class="n">right</span><span class="o">.</span><span class="na">x</span><span class="o">][</span><span class="n">right</span><span class="o">.</span><span class="na">y</span><span class="o">]</span> <span class="o">==</span> <span class="n">p</span><span class="o">[</span><span class="n">current</span><span class="o">.</span><span class="na">x</span><span class="o">][</span><span class="n">current</span><span class="o">.</span><span class="na">y</span><span class="o">]</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">result</span><span class="o">.</span><span class="na">r</span> <span class="o">=</span> <span class="n">p</span><span class="o">[</span><span class="n">right</span><span class="o">.</span><span class="na">x</span><span class="o">][</span><span class="n">right</span><span class="o">.</span><span class="na">y</span><span class="o">];</span>
</span><span class="line">            <span class="n">result</span><span class="o">.</span><span class="na">d</span><span class="o">++;</span>
</span><span class="line">            <span class="n">dfs</span><span class="o">(</span><span class="n">right</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class="line">            <span class="k">return</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="c1">//up</span>
</span><span class="line">        <span class="n">Point</span> <span class="n">up</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">up</span><span class="o">();</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">up</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">[</span><span class="n">up</span><span class="o">.</span><span class="na">x</span><span class="o">][</span><span class="n">up</span><span class="o">.</span><span class="na">y</span><span class="o">]</span> <span class="o">==</span> <span class="n">p</span><span class="o">[</span><span class="n">current</span><span class="o">.</span><span class="na">x</span><span class="o">][</span><span class="n">current</span><span class="o">.</span><span class="na">y</span><span class="o">]</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">result</span><span class="o">.</span><span class="na">r</span> <span class="o">=</span> <span class="n">p</span><span class="o">[</span><span class="n">up</span><span class="o">.</span><span class="na">x</span><span class="o">][</span><span class="n">up</span><span class="o">.</span><span class="na">y</span><span class="o">];</span>
</span><span class="line">            <span class="n">result</span><span class="o">.</span><span class="na">d</span><span class="o">++;</span>
</span><span class="line">            <span class="n">dfs</span><span class="o">(</span><span class="n">up</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class="line">            <span class="k">return</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="c1">//down</span>
</span><span class="line">        <span class="n">Point</span> <span class="n">down</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">down</span><span class="o">();</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">down</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">[</span><span class="n">down</span><span class="o">.</span><span class="na">x</span><span class="o">][</span><span class="n">down</span><span class="o">.</span><span class="na">y</span><span class="o">]</span> <span class="o">==</span> <span class="n">p</span><span class="o">[</span><span class="n">current</span><span class="o">.</span><span class="na">x</span><span class="o">][</span><span class="n">current</span><span class="o">.</span><span class="na">y</span><span class="o">]</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">result</span><span class="o">.</span><span class="na">r</span> <span class="o">=</span> <span class="n">p</span><span class="o">[</span><span class="n">down</span><span class="o">.</span><span class="na">x</span><span class="o">][</span><span class="n">down</span><span class="o">.</span><span class="na">y</span><span class="o">];</span>
</span><span class="line">            <span class="n">result</span><span class="o">.</span><span class="na">d</span><span class="o">++;</span>
</span><span class="line">            <span class="n">dfs</span><span class="o">(</span><span class="n">down</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class="line">            <span class="k">return</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Point</span> <span class="nf">findPoint</span><span class="o">(</span><span class="kt">int</span> <span class="n">max</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="n">max</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">return</span> <span class="k">new</span> <span class="nf">Point</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">class</span> <span class="nc">Point</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span> <span class="n">s</span><span class="o">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">y</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">Point</span><span class="o">(</span><span class="kt">int</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">s</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">Point</span> <span class="nf">up</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="k">new</span> <span class="n">Point</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">s</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">y</span><span class="o">);</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">Point</span> <span class="nf">down</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">)</span> <span class="k">return</span> <span class="k">new</span> <span class="n">Point</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">s</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">y</span><span class="o">);</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">Point</span> <span class="nf">left</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">y</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="k">new</span> <span class="n">Point</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">s</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">x</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">Point</span> <span class="nf">right</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">y</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">)</span> <span class="k">return</span> <span class="k">new</span> <span class="n">Point</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">s</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">x</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">class</span> <span class="nc">Result</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span> <span class="n">r</span><span class="o">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">d</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">Result</span><span class="o">(</span><span class="kt">int</span> <span class="n">r</span><span class="o">,</span> <span class="kt">int</span> <span class="n">d</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">r</span> <span class="o">=</span> <span class="n">r</span><span class="o">;</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">d</span> <span class="o">=</span> <span class="n">d</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="problem-b-gbus-counthttpscodegooglecomcodejamcontest6214486dashboardsp1"><a href="https://code.google.com/codejam/contest/6214486/dashboard#s=p1">Problem B. GBus count</a></h3>

<p>问题B是说在一些城市之间有一些公交车，给你这些车的起点和终点的数据，假设某辆公交车是从1到10，那么城市1、城市2、城市3等一直到城市10都被经过了，现在要求的是有多少辆车经过了某个城市？</p>

<p>思路：这简直不能叫做思路！纯暴力就行了！遍历所有公交车的线路，统计判断该城市是否在这个线路上即可。这样就已经可以过了！比赛时我想了写优化，大致思路是假设城市编号为c，公交车的线路为 <script type="math/tex">a_{i}</script> 和 <script type="math/tex">b_{i}</script>，首先对所有公交线路按照 <script type="math/tex">a_{i}</script> 排序，保留那些 <script type="math/tex">% &lt;![CDATA[
a_{i}<=c %]]&gt;</script> 的线路，然后对这些线路按照 <script type="math/tex">b_{i}</script> 排序，保留那些 <script type="math/tex">{b_{i}>=c}</script> 的线路，最后保留下来的线路的个数就是最终的解。[但是我的代码有问题，即下面的<code>solve</code>方法，提交了几次都报错]</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">import</span> <span class="nn">java.io.BufferedOutputStream</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.FileOutputStream</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.PrintStream</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">//https://code.google.com/codejam/contest/6214486/dashboard#s=p1</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProblemB</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="n">p</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Bus</span><span class="o">&gt;</span> <span class="n">buses</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">cities</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">        <span class="n">PrintStream</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrintStream</span><span class="o">(</span><span class="k">new</span> <span class="n">BufferedOutputStream</span><span class="o">(</span><span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="s">&quot;data/out.txt&quot;</span><span class="o">)));</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">out</span><span class="o">);</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">setErr</span><span class="o">(</span><span class="n">out</span><span class="o">);</span>
</span><span class="line">        <span class="n">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&quot;data/in.txt&quot;</span><span class="o">));</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">t</span><span class="o">--</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">buses</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Bus</span><span class="o">&gt;();</span>
</span><span class="line">            <span class="n">cities</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class="line">            <span class="n">n</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">buses</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Bus</span><span class="o">(</span><span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(),</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">()));</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="n">p</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">cities</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">());</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;Case #&quot;</span> <span class="o">+</span> <span class="n">c</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span><span class="o">);</span>
</span><span class="line">            <span class="n">solve2</span><span class="o">();</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class="line">            <span class="n">c</span><span class="o">++;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="n">out</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class="line">        <span class="n">out</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//暴力解决</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">solve2</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">key</span><span class="o">,</span> <span class="n">sum</span><span class="o">;</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">key</span> <span class="o">=</span> <span class="n">cities</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class="line">            <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="n">Bus</span> <span class="n">bus</span> <span class="o">:</span> <span class="n">buses</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">&gt;=</span> <span class="n">bus</span><span class="o">.</span><span class="na">x</span> <span class="o">&amp;&amp;</span> <span class="n">key</span> <span class="o">&lt;=</span> <span class="n">bus</span><span class="o">.</span><span class="na">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">sum</span><span class="o">++;</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">sum</span> <span class="o">+</span> <span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//非暴力解决，但是仍然存在问题</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">solve</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Bus</span><span class="o">&gt;</span> <span class="n">cf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Bus</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class="line">            <span class="nd">@Override</span>
</span><span class="line">            <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Bus</span> <span class="n">o1</span><span class="o">,</span> <span class="n">Bus</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">o1</span><span class="o">.</span><span class="na">x</span> <span class="o">&gt;</span> <span class="n">o2</span><span class="o">.</span><span class="na">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">                <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">o1</span><span class="o">.</span><span class="na">x</span> <span class="o">&lt;</span> <span class="n">o2</span><span class="o">.</span><span class="na">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">                <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">};</span>
</span><span class="line">        <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Bus</span><span class="o">&gt;</span> <span class="n">ct</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Bus</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class="line">            <span class="nd">@Override</span>
</span><span class="line">            <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Bus</span> <span class="n">o1</span><span class="o">,</span> <span class="n">Bus</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">o1</span><span class="o">.</span><span class="na">y</span> <span class="o">&gt;</span> <span class="n">o2</span><span class="o">.</span><span class="na">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">                <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">o1</span><span class="o">.</span><span class="na">y</span> <span class="o">&lt;</span> <span class="n">o2</span><span class="o">.</span><span class="na">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">                <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">};</span>
</span><span class="line">
</span><span class="line">        <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">buses</span><span class="o">,</span> <span class="n">cf</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">,</span> <span class="n">key</span><span class="o">;</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">key</span> <span class="o">=</span> <span class="n">cities</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class="line">            <span class="n">left</span> <span class="o">=</span> <span class="n">bs_f</span><span class="o">(</span><span class="n">buses</span><span class="o">,</span> <span class="n">key</span><span class="o">);</span><span class="c1">//从left开始都是大于key的数字</span>
</span><span class="line">            <span class="n">List</span><span class="o">&lt;</span><span class="n">Bus</span><span class="o">&gt;</span> <span class="n">flist</span> <span class="o">=</span> <span class="n">buses</span><span class="o">.</span><span class="na">subList</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">left</span><span class="o">);</span><span class="c1">//left=0, size=0</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">flist</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">flist</span><span class="o">,</span> <span class="n">ct</span><span class="o">);</span>
</span><span class="line">                <span class="n">right</span> <span class="o">=</span> <span class="n">bs_t</span><span class="o">(</span><span class="n">flist</span><span class="o">,</span> <span class="n">key</span><span class="o">);</span><span class="c1">//从right开始都是大于等于key的数字</span>
</span><span class="line">                <span class="n">List</span><span class="o">&lt;</span><span class="n">Bus</span><span class="o">&gt;</span> <span class="n">tlist</span> <span class="o">=</span> <span class="n">flist</span><span class="o">.</span><span class="na">subList</span><span class="o">(</span><span class="n">right</span><span class="o">,</span> <span class="n">flist</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class="line">                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">tlist</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;0 &quot;</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">bs_f</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Bus</span><span class="o">&gt;</span> <span class="n">lbus</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">lbus</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">mid</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">r</span> <span class="o">&lt;</span> <span class="n">lbus</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">mid</span><span class="o">).</span><span class="na">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">r</span> <span class="o">&gt;=</span> <span class="n">lbus</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">mid</span><span class="o">).</span><span class="na">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">left</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">bs_t</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Bus</span><span class="o">&gt;</span> <span class="n">lbus</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">lbus</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">mid</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">r</span> <span class="o">&lt;=</span> <span class="n">lbus</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">mid</span><span class="o">).</span><span class="na">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">r</span> <span class="o">&gt;</span> <span class="n">lbus</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">mid</span><span class="o">).</span><span class="na">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">left</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">class</span> <span class="nc">Bus</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">y</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">Bus</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="problem-c-sort-a-scrambled-itineraryhttpscodegooglecomcodejamcontest6214486dashboardsp2"><a href="https://code.google.com/codejam/contest/6214486/dashboard#s=p2">Problem C. Sort a scrambled itinerary</a></h3>

<p>问题C是说给你一些航班的信息，包括起点城市和终点城市，但是顺序乱了，让你来确定这些航班整合起来最后是从哪里到哪里之后又到了哪里。</p>

<p>思路：这题很简单，起点是入度为0的点，终点是出度为0的点，一个while循环就能搞定，就这样简单的思路这道题目就可以过。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">import</span> <span class="nn">java.io.BufferedOutputStream</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.FileOutputStream</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.PrintStream</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">//https://code.google.com/codejam/contest/6214486/dashboard#s=p2</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProblemC</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">flights</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">City</span><span class="o">&gt;</span> <span class="n">citymap</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">        <span class="n">PrintStream</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrintStream</span><span class="o">(</span><span class="k">new</span> <span class="n">BufferedOutputStream</span><span class="o">(</span><span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="s">&quot;data/out.txt&quot;</span><span class="o">)));</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">out</span><span class="o">);</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">setErr</span><span class="o">(</span><span class="n">out</span><span class="o">);</span>
</span><span class="line">        <span class="n">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&quot;data/in.txt&quot;</span><span class="o">));</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">t</span><span class="o">--</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;Case #&quot;</span> <span class="o">+</span> <span class="n">c</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span><span class="o">);</span>
</span><span class="line">            <span class="n">flights</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
</span><span class="line">            <span class="n">citymap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">City</span><span class="o">&gt;();</span>
</span><span class="line">            <span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">            <span class="n">String</span> <span class="n">from</span><span class="o">,</span> <span class="n">to</span><span class="o">;</span>
</span><span class="line">            <span class="n">City</span> <span class="n">cf</span><span class="o">,</span> <span class="n">ct</span><span class="o">;</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">from</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class="line">                <span class="n">to</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">citymap</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">from</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">cf</span> <span class="o">=</span> <span class="n">citymap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">from</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">cf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">City</span><span class="o">();</span>
</span><span class="line">                    <span class="n">citymap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">from</span><span class="o">,</span> <span class="n">cf</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">                <span class="n">cf</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">from</span><span class="o">;</span>
</span><span class="line">                <span class="n">cf</span><span class="o">.</span><span class="na">out</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">citymap</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">to</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">ct</span> <span class="o">=</span> <span class="n">citymap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">to</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">ct</span> <span class="o">=</span> <span class="k">new</span> <span class="n">City</span><span class="o">();</span>
</span><span class="line">                    <span class="n">citymap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">to</span><span class="o">,</span> <span class="n">ct</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">                <span class="n">ct</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">to</span><span class="o">;</span>
</span><span class="line">                <span class="n">ct</span><span class="o">.</span><span class="na">in</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">                <span class="n">flights</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">from</span><span class="o">,</span> <span class="n">to</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="n">solve</span><span class="o">();</span>
</span><span class="line">            <span class="n">c</span><span class="o">++;</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="n">out</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class="line">        <span class="n">out</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">solve</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">String</span> <span class="n">from</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">        <span class="n">Set</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">City</span><span class="o">&gt;&gt;</span> <span class="n">entries</span> <span class="o">=</span> <span class="n">citymap</span><span class="o">.</span><span class="na">entrySet</span><span class="o">();</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">City</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">entries</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="c1">//System.out.println(&quot;name=&quot; + entry.getValue().name + &quot; in=&quot; + entry.getValue().in + &quot; out=&quot; + entry.getValue().out);</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">in</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">from</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
</span><span class="line">                <span class="k">break</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="n">String</span> <span class="n">next</span><span class="o">;</span>
</span><span class="line">        <span class="n">String</span> <span class="n">current</span> <span class="o">=</span> <span class="n">from</span><span class="o">;</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">current</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">flights</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">current</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">            <span class="n">next</span> <span class="o">=</span> <span class="n">flights</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">current</span><span class="o">);</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">citymap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">current</span><span class="o">).</span><span class="na">name</span> <span class="o">+</span> <span class="s">&quot;-&quot;</span> <span class="o">+</span> <span class="n">citymap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">next</span><span class="o">).</span><span class="na">name</span> <span class="o">+</span> <span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class="line">            <span class="n">current</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">class</span> <span class="nc">City</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">in</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">out</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="https://code.google.com/codejam/contest/6214486/dashboard#s=p3">Problem D. Itz Chess</a></p>

<p>问题D是说在国际象棋的棋盘上放了一些棋子，在当前位置下有些棋子可以杀死其他的棋子，问共有多少个可以杀死的情况。</p>

<p>思路：我没啥特别的思路，就是根据每类棋子的不同攻击方式编写相应的检验函数看它是否能够将某个棋子杀死。</p>

<p>小数据集的测试样例貌似都是关于K和P的，我都通过了，但是大数据测试集没有通过，估计是哪类棋子的攻击检验函数有问题，暂时不知道问题在哪，若有发现的请告知，谢谢。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
<span class="line-number">155</span>
<span class="line-number">156</span>
<span class="line-number">157</span>
<span class="line-number">158</span>
<span class="line-number">159</span>
<span class="line-number">160</span>
<span class="line-number">161</span>
<span class="line-number">162</span>
<span class="line-number">163</span>
<span class="line-number">164</span>
<span class="line-number">165</span>
<span class="line-number">166</span>
<span class="line-number">167</span>
<span class="line-number">168</span>
<span class="line-number">169</span>
<span class="line-number">170</span>
<span class="line-number">171</span>
<span class="line-number">172</span>
<span class="line-number">173</span>
<span class="line-number">174</span>
<span class="line-number">175</span>
<span class="line-number">176</span>
<span class="line-number">177</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">import</span> <span class="nn">java.io.BufferedOutputStream</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.FileOutputStream</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.PrintStream</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">//https://code.google.com/codejam/contest/6214486/dashboard#s=p3</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProblemD</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">board</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Chess</span><span class="o">&gt;</span> <span class="n">chesses</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">        <span class="n">PrintStream</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrintStream</span><span class="o">(</span><span class="k">new</span> <span class="n">BufferedOutputStream</span><span class="o">(</span><span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="s">&quot;data/out.txt&quot;</span><span class="o">)));</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">out</span><span class="o">);</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">setErr</span><span class="o">(</span><span class="n">out</span><span class="o">);</span>
</span><span class="line">        <span class="n">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&quot;data/D-large-practice.in.txt&quot;</span><span class="o">));</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">w</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">w</span> <span class="o">&lt;=</span> <span class="n">t</span><span class="o">;</span> <span class="n">w</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;Case #&quot;</span> <span class="o">+</span> <span class="n">w</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span><span class="o">);</span>
</span><span class="line">            <span class="n">board</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">9</span><span class="o">][</span><span class="mi">9</span><span class="o">];</span>
</span><span class="line">            <span class="n">chesses</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Chess</span><span class="o">&gt;();</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span><span class="c1">//默认是空的字符</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class="line">            <span class="n">String</span> <span class="n">line</span><span class="o">;</span>
</span><span class="line">            <span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">;</span>
</span><span class="line">            <span class="kt">char</span> <span class="n">c</span><span class="o">;</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">line</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class="line">                <span class="n">x</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">-</span> <span class="sc">&#39;1&#39;</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span><span class="c1">//行</span>
</span><span class="line">                <span class="n">y</span> <span class="o">=</span> <span class="mi">8</span> <span class="o">-</span> <span class="o">(</span><span class="n">line</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">-</span> <span class="sc">&#39;A&#39;</span><span class="o">);</span><span class="c1">//列</span>
</span><span class="line">                <span class="n">c</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
</span><span class="line">                <span class="n">board</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">                <span class="n">chesses</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Chess</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="n">c</span><span class="o">));</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">
</span><span class="line">            <span class="c1">//for (int i = 0; i &lt; 9; i++) {</span>
</span><span class="line">            <span class="c1">//    for (int j = 0; j &lt; 9; j++) {</span>
</span><span class="line">            <span class="c1">//        System.out.print(board[i][j] + &quot; &quot;);</span>
</span><span class="line">            <span class="c1">//    }</span>
</span><span class="line">            <span class="c1">//    System.out.println();</span>
</span><span class="line">            <span class="c1">//}</span>
</span><span class="line">
</span><span class="line">            <span class="n">solve</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="n">out</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class="line">        <span class="n">out</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">solve</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">l</span> <span class="o">=</span> <span class="n">chesses</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">l</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">l</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">kill</span><span class="o">(</span><span class="n">chesses</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">chesses</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">)))</span> <span class="o">{</span>
</span><span class="line">                    <span class="n">sum</span><span class="o">++;</span>
</span><span class="line">                    <span class="c1">//System.out.println(&quot; ko&quot;);</span>
</span><span class="line">                <span class="o">}</span> <span class="c1">//else System.out.println();</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">sum</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//判断棋子c1是否能够杀死c2</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">kill</span><span class="o">(</span><span class="n">Chess</span> <span class="n">c1</span><span class="o">,</span> <span class="n">Chess</span> <span class="n">c2</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">c1</span><span class="o">.</span><span class="na">x</span> <span class="o">==</span> <span class="n">c2</span><span class="o">.</span><span class="na">x</span> <span class="o">&amp;&amp;</span> <span class="n">c1</span><span class="o">.</span><span class="na">y</span> <span class="o">==</span> <span class="n">c2</span><span class="o">.</span><span class="na">y</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">        <span class="c1">//System.out.print(c1.c + &quot; (&quot; + c1.x + &quot;,&quot; + c1.y + &quot;) &quot; + c2.c + &quot; (&quot; + c2.x + &quot;,&quot; + c2.y + &quot;)&quot;);</span>
</span><span class="line">        <span class="k">switch</span> <span class="o">(</span><span class="n">c1</span><span class="o">.</span><span class="na">c</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">case</span> <span class="sc">&#39;K&#39;</span><span class="o">:</span>
</span><span class="line">                <span class="k">return</span> <span class="nf">k_kill</span><span class="o">(</span><span class="n">c1</span><span class="o">,</span> <span class="n">c2</span><span class="o">);</span>
</span><span class="line">            <span class="k">case</span> <span class="sc">&#39;Q&#39;</span><span class="o">:</span>
</span><span class="line">                <span class="k">return</span> <span class="nf">q_kill</span><span class="o">(</span><span class="n">c1</span><span class="o">,</span> <span class="n">c2</span><span class="o">);</span>
</span><span class="line">            <span class="k">case</span> <span class="sc">&#39;R&#39;</span><span class="o">:</span>
</span><span class="line">                <span class="k">return</span> <span class="nf">r_kill</span><span class="o">(</span><span class="n">c1</span><span class="o">,</span> <span class="n">c2</span><span class="o">);</span>
</span><span class="line">            <span class="k">case</span> <span class="sc">&#39;B&#39;</span><span class="o">:</span>
</span><span class="line">                <span class="k">return</span> <span class="nf">b_kill</span><span class="o">(</span><span class="n">c1</span><span class="o">,</span> <span class="n">c2</span><span class="o">);</span>
</span><span class="line">            <span class="k">case</span> <span class="sc">&#39;N&#39;</span><span class="o">:</span>
</span><span class="line">                <span class="k">return</span> <span class="nf">n_kill</span><span class="o">(</span><span class="n">c1</span><span class="o">,</span> <span class="n">c2</span><span class="o">);</span>
</span><span class="line">            <span class="k">case</span> <span class="sc">&#39;P&#39;</span><span class="o">:</span>
</span><span class="line">                <span class="k">return</span> <span class="nf">p_kill</span><span class="o">(</span><span class="n">c1</span><span class="o">,</span> <span class="n">c2</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//王</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">k_kill</span><span class="o">(</span><span class="n">Chess</span> <span class="n">c1</span><span class="o">,</span> <span class="n">Chess</span> <span class="n">c2</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(((</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">c1</span><span class="o">.</span><span class="na">x</span> <span class="o">-</span> <span class="n">c2</span><span class="o">.</span><span class="na">x</span><span class="o">)</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">||</span> <span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">c1</span><span class="o">.</span><span class="na">x</span> <span class="o">-</span> <span class="n">c2</span><span class="o">.</span><span class="na">x</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">))</span>
</span><span class="line">                <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">c1</span><span class="o">.</span><span class="na">y</span> <span class="o">-</span> <span class="n">c2</span><span class="o">.</span><span class="na">y</span><span class="o">)</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">||</span> <span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">c1</span><span class="o">.</span><span class="na">y</span> <span class="o">-</span> <span class="n">c2</span><span class="o">.</span><span class="na">y</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)))</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//后</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">q_kill</span><span class="o">(</span><span class="n">Chess</span> <span class="n">c1</span><span class="o">,</span> <span class="n">Chess</span> <span class="n">c2</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">r_kill</span><span class="o">(</span><span class="n">c1</span><span class="o">,</span> <span class="n">c2</span><span class="o">)</span> <span class="o">||</span> <span class="n">b_kill</span><span class="o">(</span><span class="n">c1</span><span class="o">,</span> <span class="n">c2</span><span class="o">))</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//车</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">r_kill</span><span class="o">(</span><span class="n">Chess</span> <span class="n">c1</span><span class="o">,</span> <span class="n">Chess</span> <span class="n">c2</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">c2</span><span class="o">.</span><span class="na">x</span> <span class="o">!=</span> <span class="n">c1</span><span class="o">.</span><span class="na">x</span> <span class="o">&amp;&amp;</span> <span class="n">c2</span><span class="o">.</span><span class="na">y</span> <span class="o">!=</span> <span class="n">c1</span><span class="o">.</span><span class="na">y</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">c2</span><span class="o">.</span><span class="na">x</span> <span class="o">==</span> <span class="n">c1</span><span class="o">.</span><span class="na">x</span><span class="o">)</span> <span class="o">{</span><span class="c1">//同一行</span>
</span><span class="line">            <span class="kt">int</span> <span class="n">from</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">c2</span><span class="o">.</span><span class="na">y</span><span class="o">,</span> <span class="n">c1</span><span class="o">.</span><span class="na">y</span><span class="o">);</span>
</span><span class="line">            <span class="kt">int</span> <span class="n">to</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">c2</span><span class="o">.</span><span class="na">y</span><span class="o">,</span> <span class="n">c1</span><span class="o">.</span><span class="na">y</span><span class="o">);</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">from</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">to</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">c1</span><span class="o">.</span><span class="na">x</span><span class="o">][</span><span class="n">k</span><span class="o">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">c2</span><span class="o">.</span><span class="na">y</span> <span class="o">==</span> <span class="n">c1</span><span class="o">.</span><span class="na">y</span><span class="o">)</span> <span class="o">{</span><span class="c1">//同一列</span>
</span><span class="line">            <span class="kt">int</span> <span class="n">from</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">c2</span><span class="o">.</span><span class="na">x</span><span class="o">,</span> <span class="n">c1</span><span class="o">.</span><span class="na">x</span><span class="o">);</span>
</span><span class="line">            <span class="kt">int</span> <span class="n">to</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">c2</span><span class="o">.</span><span class="na">x</span><span class="o">,</span> <span class="n">c1</span><span class="o">.</span><span class="na">x</span><span class="o">);</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">from</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">to</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">k</span><span class="o">][</span><span class="n">c1</span><span class="o">.</span><span class="na">y</span><span class="o">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//象</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">b_kill</span><span class="o">(</span><span class="n">Chess</span> <span class="n">c1</span><span class="o">,</span> <span class="n">Chess</span> <span class="n">c2</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">c1</span><span class="o">.</span><span class="na">x</span> <span class="o">-</span> <span class="n">c2</span><span class="o">.</span><span class="na">x</span><span class="o">)</span> <span class="o">!=</span> <span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">c1</span><span class="o">.</span><span class="na">y</span> <span class="o">-</span> <span class="n">c2</span><span class="o">.</span><span class="na">y</span><span class="o">))</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">xdir</span> <span class="o">=</span> <span class="n">c1</span><span class="o">.</span><span class="na">x</span> <span class="o">&gt;</span> <span class="n">c2</span><span class="o">.</span><span class="na">x</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">1</span><span class="o">;</span><span class="c1">//direction!!!</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">ydir</span> <span class="o">=</span> <span class="n">c1</span><span class="o">.</span><span class="na">y</span> <span class="o">&gt;</span> <span class="n">c2</span><span class="o">.</span><span class="na">y</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">c1</span><span class="o">.</span><span class="na">x</span> <span class="o">+</span> <span class="n">xdir</span><span class="o">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">c1</span><span class="o">.</span><span class="na">y</span> <span class="o">+</span> <span class="n">ydir</span><span class="o">;</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">c2</span><span class="o">.</span><span class="na">x</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">!=</span> <span class="n">c2</span><span class="o">.</span><span class="na">y</span><span class="o">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">xdir</span><span class="o">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="n">ydir</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//马</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">n_kill</span><span class="o">(</span><span class="n">Chess</span> <span class="n">c1</span><span class="o">,</span> <span class="n">Chess</span> <span class="n">c2</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">c1</span><span class="o">.</span><span class="na">x</span> <span class="o">-</span> <span class="n">c2</span><span class="o">.</span><span class="na">x</span><span class="o">)</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">c1</span><span class="o">.</span><span class="na">y</span> <span class="o">-</span> <span class="n">c2</span><span class="o">.</span><span class="na">y</span><span class="o">)</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">c1</span><span class="o">.</span><span class="na">y</span> <span class="o">-</span> <span class="n">c2</span><span class="o">.</span><span class="na">y</span><span class="o">)</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">c1</span><span class="o">.</span><span class="na">x</span> <span class="o">-</span> <span class="n">c2</span><span class="o">.</span><span class="na">x</span><span class="o">)</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">//兵</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">p_kill</span><span class="o">(</span><span class="n">Chess</span> <span class="n">c1</span><span class="o">,</span> <span class="n">Chess</span> <span class="n">c2</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">c1</span><span class="o">.</span><span class="na">x</span> <span class="o">-</span> <span class="n">c2</span><span class="o">.</span><span class="na">x</span><span class="o">)</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">c1</span><span class="o">.</span><span class="na">y</span> <span class="o">-</span> <span class="n">c2</span><span class="o">.</span><span class="na">y</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">class</span> <span class="nc">Chess</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">y</span><span class="o">;</span>
</span><span class="line">    <span class="kt">char</span> <span class="n">c</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">Chess</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="kt">char</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">c</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/11/09/google-apac-2015-university-graduates-test-round-d/">http://hujiaweibujidao.github.io/blog/2014/11/09/google-apac-2015-university-graduates-test-round-d/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Talk big of West Travelling]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/10/24/love-forever-dahuaxiyou/"/>
    <updated>2014-10-24T18:02:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/10/24/love-forever-dahuaxiyou</id>
    <content type="html"><![CDATA[<p>最近网上关于星爷的话题层出不穷，星爷当年的经典之作《大话西游》也即将重新放映，欠星爷的这两张电影票大家都打算开始还了，不管这次重映谁是最大的受益者，也不管是否和星爷有关，作为星爷的影迷我只希望票房能够大卖！至少可以为当前国产电影做出一个好榜样，不要只追求无谓的哗众取宠，多思考如何通过一部电影让人深思。</p>

<p>今天下午实在是憋不住了，于是下载了这两部电影重新看了一遍，这一次竟然感动到眼角湿润了，也许是有过爱情的经历就不一样了吧。记得上次重看还是在两年前，和女友一起看的，我带着她一起看，但是她貌似没什么兴趣，不知道她有没有明白什么。</p>

<p>这部片子看似就是一堆堆的无厘头的搞笑，但却完美地阐释了人世间的爱与恨：至尊宝对晶晶姑娘的一见钟情，紫霞仙子对意中人的忠贞不渝，晶晶姑娘和师姐春三十娘的恨，紫霞仙子和姐姐青霞的恨等等，当至尊宝带上金箍咒的时候说，当他死去的时候才终于把一切看得清楚看得明白，人世间为什么会有那么多的恨？此时他也坚定了自己护送唐僧西天取经的信念，决定用经书来感化世人，放下所有的恩怨，放下所有的仇恨，让爱充满人间。当然，要放下人世间的所有情欲是多么的困难，结尾处紫霞仙子为了救至尊宝挨了牛魔王一叉，彼时的至尊宝可谓是痛苦到了极致，他一面不忍放开自己深爱着的紫霞仙子的手，一面要强忍着金箍咒带来的痛苦，爱之深，痛之深！</p>

<p>而后来的《西游降魔》虽然不能和经典媲美，但也还是可以的，结尾处陈玄奘手捧着为自己而牺牲的她痛哭流泪，领悟到人世间的爱没有大和小之分，众生之爱皆是爱！</p>

<p>永远支持星爷的电影，感谢一生有你！</p>

<p>大爱《一生所爱》这首歌，百听不厌，献上新旧两个不同的版本，都不错！</p>

<p>卢冠廷版本的《一生所爱》</p>

<audio width="300" height="32" style="margin: auto; top: 0; right: 0; bottom: 0; left: 0;" controls="controls" autoplay="autoplay" name="media" src="http://hujiaweibujidao.github.io/music/loveforever-old.mp3">
</audio>

<p>舒淇版本的《一生所爱》</p>

<audio width="300" height="32" style="margin: auto; top: 0; right: 0; bottom: 0; left: 0;" controls="controls" autoplay="autoplay" name="media" src="http://hujiaweibujidao.github.io/music/loveforever-old.mp3">
</audio>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/10/24/love-forever-dahuaxiyou/">http://hujiaweibujidao.github.io/blog/2014/10/24/love-forever-dahuaxiyou/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Differences between OpenCV JavaCV and OpenCV4Android]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/10/23/differences-between-opencv-javacv-and-opencv4android/"/>
    <updated>2014-10-23T20:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/10/23/differences-between-opencv-javacv-and-opencv4android</id>
    <content type="html"><![CDATA[<p>最近我在考虑是否要改变XFace项目的技术方案，经过一番调研后我得到下面的结果。</p>

<p>本文将介绍OpenCV，JavaCV以及OpenCV for Android(以下简称OpenCV4Android)之间的区别，并以一个人脸识别的Android应用为例，详细介绍可以采用的实践方案。</p>

<p>OpenCV: <a href="http://docs.opencv.org/index.html">http://docs.opencv.org/index.html</a></p>

<p>OpenCV4Android: <a href="http://docs.opencv.org/doc/tutorials/introduction/android_binary_package/O4A_SDK.html">OpenCV4Android_SDK.html</a></p>

<p>JavaCV: <a href="https://github.com/bytedeco/javacv">https://github.com/bytedeco/javacv</a></p>

<h3 id="opencvjavacvopencv4android">OpenCV，JavaCV，OpenCV4Android</h3>

<h4 id="javacvopencv4android">(1) <strong>JavaCV和OpenCV4Android没有关系</strong></h4>

<p>OpenCV是C++版本的开源计算机视觉库；JavaCV是对OpenCV的Java封装，开发团队和OpenCV开发团队没有关系；OpenCV4Android也是对OpenCV的封装以使其能够应用于Android平台，开发团队是OpenCV开发团队的一部分，也就是OpenCV4Android和JavaCV没有任何关系！</p>

<p>参考网址：<a href="https://groups.google.com/forum/#!topic/javacv/qJmBLvpV7cM">https://groups.google.com/forum/#!topic/javacv/qJmBLvpV7cM</a></p>

<blockquote>
  <p>android-opencv has no relation to JavaCV, so you should ask somewhere else for questions about it.. The philosophy of android-opencv (and of the OpenCV team as general) is to make OpenCV run on Android, which forces them to use Java, but otherwise they prefer to use C++ or Python. With JavaCV, my hope is to have it run on as many platforms as possible, including Android, since it supports (some sort of) Java, so we can use sane(r) and more efficient languages such as the Java and Scala languages. Take your pick!</p>
</blockquote>

<h4 id="javacvopencv">(2) <strong>JavaCV和OpenCV的性能比较</strong></h4>

<p>大多数时候两者性能相差不大，某些OpenCV函数能够并行化处理而JavaCV不行，但是JavaCV还绑定了很多其他的图像处理库，功能也足够强大。</p>

<p>参考网址：<a href="http://stackoverflow.com/questions/21207755/opencv-javacv-vs-opencv-c-c-interfaces">http://stackoverflow.com/questions/21207755/opencv-javacv-vs-opencv-c-c-interfaces</a></p>

<blockquote>
  <p>I’d like to add a couple of things to @ejbs’s answer.     <br />
First of all, you concerned 2 separate issues:     <br />
Java vs. C++ performance     <br />
OpenCV vs JavaCV     <br />
Java vs. C++ performance is a long, long story. On one hand, C++ programs are compiled to a highly optimized native code. They start quickly and run fast all the time without pausing for garbage collection or other VM duties (as Java do). On other hand, once compiled, program in C++ can’t change, no matter on what machine they are run, while Java bytecode is compiled “just-in-time” and is always optimized for processor architecture they run on. In modern world, with so many different devices (and processor architectures) this may be really significant. Moreover, some JVMs (e.g. Oracle Hotspot) can optimize even the code that is already compiled to native code! VM collect data about program execution and from time to time tries to rewrite code in such a way that it is optimized for this specific execution. So in such complicated circumstances the only real way to compare performance of implementations in different programming languages is to just run them and see the result.      <br />
OpenCV vs. JavaCV is another story. First you need to understand stack of technologies behind these libraries.       <br />
OpenCV was originally created in 1999 in Intel research labs and was written in C. Since that time, it changed the maintainer several times, became open source and reached 3rd version (upcoming release). At the moment, core of the library is written in C++ with popular interface in Python and a number of wrappers in other programming languages.
JavaCV is one of such wrappers. So in most cases when you run program with JavaCV you actually use OpenCV too, just call it via another interface. But JavaCV provides more than just one-to-one wrapper around OpenCV. In fact, it bundles the whole number of image processing libraries, including FFmpeg, OpenKinect and others. (Note, that in C++ you can bind these libraries too).       <br />
So, in general it doesn’t matter what you are using - OpenCV or JavaCV, you will get just about same performance. It more depends on your main task - is it Java or C++ which is better suited for your needs.      <br />
There’s one more important point about performance. Using OpenCV (directly or via wrapper) you will sometimes find that OpenCV functions overcome other implementations by several orders. This is because of heavy use of low-level optimizations in its core. For example, OpenCV’s filter2D function is SIMD-accelerated and thus can process several sets of data in parallel. And when it comes to computer vision, such optimizations of common functions may easily lead to significant speedup.       </p>
</blockquote>

<h4 id="android">(3) <strong>人脸识别的Android应用</strong></h4>

<h4 id="section"><strong>对人脸识别算法的支持</strong></h4>

<p>目前OpenCV的最新版本是2.4.10，OpenCV4Android是2.4.9，JavaCV的版本是0.9</p>

<p>OpenCV自然支持人脸识别算法，详细的使用教程看<a href="http://docs.opencv.org/modules/contrib/doc/facerec/index.html">这里</a></p>

<p>OpenCV4Android暂时不支持，但是可以通过建立一层简单的封装来实现，封装的方法看<a href="http://stackoverflow.com/questions/25830660/face-recognize-using-opencv4android-sdk-tutorial">这里</a></p>

<p>JavaCV现在已经支持人脸识别算法了，在Samples中可以找到一份样例代码<a href="https://github.com/bytedeco/javacv/blob/master/samples/OpenCVFaceRecognizer.java">OpenCVFaceRecognizer.java</a></p>

<h4 id="section-1"><strong>不可忽视的摄像头！</strong></h4>

<p>因为是移动应用，所以要能够从移动设备中获取摄像头返回的数据是关键！而这个恰恰是这类应用要考虑的一个重要因素，因为它直接决定了你的应用需要使用的技术方案！</p>

<p>关于摄像头的使用其实我已经在前面的博文<a href="http://hujiaweibujidao.github.io/blog/2013/11/18/android-ndk-and-opencv-development-3/">Android Ndk and Opencv Development 3</a>中详细介绍过了，这里我引用部分内容，如果想了解更多的话，不妨先看下前面的内容。 [下面提到的<code>OpenCV library</code> 是 <code>OpenCV4Android SDK</code> 的一部分]</p>

<p>[其实还有一种获取摄像头数据的方式，那就是直接在Native层操作摄像头，OpenCV4Android SDK的Samples中提供了一个样例<code>native-activity</code>，这种方式其实是极其不推荐使用的，一方面代码不好写，不便操作；另一方面据说这部分的API经常变化，不便维护]</p>

<p>(1) 关于如何进行和OpenCV有关的摄像头开发</p>

<p>在没有OpenCV library的情况下，也就是我们直接使用Android中的Camera API的话，获取得到的图像帧是<code>YUV</code>格式的，我们在处理之前往往要先转换成<code>RGB(A)</code>格式的才行。</p>

<p>如果有了OpenCV library的话摄像头的开发就简单多了，可以参见OpenCV for Android中的三个Tutorial(<code>CameraPreview</code>, <code>MixingProcessing</code>和<code>CameraControl</code>)，源码都在OpenCV-Android sdk的samples目录下，这里简单介绍下：OpenCV Library中提供了两种摄像头，一种是Java摄像头-<code>org.OpenCV.Android.JavaCameraView</code>，另一种是Native摄像头-<code>org.OpenCV.Android.NativeCameraView</code> (可以运行CameraPreview这个项目来体验下两者的不同，其实差不多)。两者都继承自<code>CameraBridgeViewBase</code>这个抽象类，但是JavaCamera使用的就是Android SDK中的<code>Camera</code>，而NativeCamera使用的是OpenCV中的<code>VideoCapture</code>。</p>

<p>(2) 关于如何传递摄像头预览的图像数据给Native层</p>

<p>这个很重要！我曾经试过很多的方式，大致思路有：</p>

<p>①传递图片路径：这是最差的方式，我使用过，速度很慢，实时性很差，主要用于前期开发的时候进行测试，测试Java层和Native层的互调是否正常。   </p>

<p>②传递预览图像的字节数组到Native层，然后将字节数组处理成<code>RGB</code>或者<code>RGBA</code>的格式[具体哪种格式要看你的图像处理函数能否处理<code>RGBA</code>格式的，如果可以的话推荐转换成<code>RGBA</code>格式，因为返回的也是<code>RGBA</code>格式的]。网上有很多的文章讨论如何转换：一种方式是使用一个自定义的函数进行编码转换(可以搜索到这个函数，例如这篇文章<a href="http://nhenze.net/?p=253">Camera image-&gt;NDK-&gt;OpenGL texture</a>)，另一个种方式是使用OpenCV中的<code>Mat</code>和<code>cvtColor</code>函数进行转换，接着调用图像处理函数，处理完成之后，将处理的结果保存在一个整形数组中(实际上就是<code>RGB</code>或者<code>RGBA</code>格式的图像数据)，最后调用Bitmap的方法将其转换成bitmap返回。这种方法速度也比较慢，但是比第一种方案要快了不少，具体实现过程可以看推荐书籍<a href="https://github.com/MasteringOpenCV">《Mastering OpenCV with Practical Computer Vision Projects》</a>，第一章<code>Cartoonifer and Skin Changer for Android</code>就是一个Android的应用实例。   </p>

<p>③使用OpenCV的摄像头：JavaCamera或者NativeCamera都行，好处是它进行了很多的封装，可以直接将预览图像的<code>Mat</code>结构传递给Native层，这种传递是使用<code>Mat</code>的内存地址(<code>long</code>型)，Native层只要根据这个地址将其封装成<code>Mat</code>就可以进行处理了，另外，它的回调函数的返回值也是<code>Mat</code>，非常方便！这种方式速度较快。具体过程可以参考OpenCV-Android sdk的samples项目中的<code>Tutorial2-MixedProcessing</code>。 </p>

<h4 id="section-2"><strong>可选方案有哪些？</strong></h4>

<p>综上所述，我们来总结下如果想要开发一个人脸识别的Android应用程序，大致会有哪些技术方案呢？</p>

<p>(1) 摄像头使用纯Android Camera API，将<code>YUV</code>格式的数据传入到Native层，转换成<code>RGB(A)</code> 格式，然后调用OpenCV人脸识别算法进行处理，最后将处理结果<code>RGB(A)</code> 格式数据返回给Java层。优点是对其他内容的依赖较少，灵活性好，开发者甚至可以对内部算法进行修改，缺点自然是需要开发者具有很强的技术水平，要同时熟练OpenCV和Android NDK开发，在三星Galaxy I9000上测试比较慢，有明显卡顿延迟。</p>

<p>这种方式可以参考书籍<a href="https://github.com/MasteringOpenCV">《Mastering OpenCV with Practical Computer Vision Projects》</a> 的第一章<code>Cartoonifer and Skin Changer for Android</code> 的实现方式。 &gt; <a href="http://hujiaweibujidao.github.io/files/Cartoonifier_Android.zip">我测试通过的源码下载</a></p>

<p>最近发现一个项目也是采用这种方式，而且代码质量较高，可惜的是并没有公开Native层代码，而只是提供了Java层的SDK，<a href="https://github.com/Vinisoft/Face-Recognition-SDK-for-Android">详情可见这里</a></p>

<p>(2) 摄像头使用纯Android Camera API，将<code>YUV</code>格式的数据直接在Java层转换成<code>RGB(A)</code> 格式，直接传给JavaCV人脸识别算法进行处理，然后返回识别结果即可。优点是只依赖了JavaCV，缺点是从OpenCV算法转成JavaCV实现需要些工作量。</p>

<p>这种方式我没有试验过，转换的方式可以参考<a href="http://stackoverflow.com/questions/16471884/opencv-for-android-convert-camera-preview-from-yuv-to-rgb-with-imgproc-cvtcolor">这里</a> <strong>[我会尽快试验一下，如果可行我会将代码公开]</strong></p>

<p>(3) 摄像头使用OpenCV4Android Library，将得到的数据<code>Mat</code> 的内存地址传给Native层，Native层通过地址还原成<code>Mat</code>，然后调用OpenCV人脸识别算法进行处理，最后将处理结果<code>RGB(A)</code> 格式数据返回给Java层。优点是灵活性好，缺点是依赖了OpenCV4Android Library和OpenCV，所以需要掌握OpenCV和Android NDK开发，在三星Galaxy I9000上测试还行，如果算法处理比较慢的话会慢1-3s左右才返回结果。</p>

<p>这种方式可以参考OpenCV-Android sdk的samples项目中的<code>Tutorial2-MixedProcessing</code> [我的开源项目<code>XFace</code>采用的正是这种方案]</p>

<p>(4) 摄像头使用OpenCV4Android Library，Native层对OpenCV人脸识别算法类进行简单封装，然后将摄像头得到的数据<code>Mat</code> 直接传给OpenCV4Android Library的人脸识别算法，然后返回识别结果即可。优点是依赖还不算多而且可能要写的Native层代码也不多。</p>

<p>这种方式我试验过，利用前面提到过封装的方法，可以参考<a href="http://stackoverflow.com/questions/25830660/face-recognize-using-opencv4android-sdk-tutorial">这里</a>，注意按照答案的例子在加载<code>facerec</code> 库之前要记得加载<code>opencv_java</code> 库才行！ &gt;<a href="http://hujiaweibujidao.github.io/files/NDKDemo.zip">我测试通过的源码下载</a></p>

<p>(5) 摄像头使用OpenCV4Android Library，然后将摄像头得到的数据<code>Mat</code> 直接传给JavaCV的人脸识别算法，然后返回识别结果即可。优点是看起来方案很不错，只需要写Java代码就行了，Native层可能只需要导入一些<code>*so</code> 文件到<code>jniLibs</code> 目录中就行了，缺点是依赖太多了！</p>

<p>这种方式可以参考<a href="https://github.com/ayuso2013/face-recognition">Github上的这个项目</a>     &gt; <a href="http://hujiaweibujidao.github.io/files/face-recognition-ayuso.zip">我测试通过的源码下载</a></p>

<p>各种方案各有利弊，一方面要考虑技术方案是否可行，另一方面还要考虑该技术方案是否便于开发！哎，码农真是伤不起啊！</p>

<p><strong>补充部分</strong></p>

<p>这里假设你是按照我上一篇文章<a href="http://hujiaweibujidao.github.io/blog/2014/10/22/android-ndk-and-opencv-development-with-android-studio/">Android NDK and OpenCV Development With Android Studio</a> 的方式来创建的项目。</p>

<p>(1) 方案1中的部分代码</p>

<p>实现将<code>YUV</code> 格式数据转换成 <code>RGBA</code> 格式数据的Native层代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="c1">// Just show the plain camera image without modifying it.</span>
</span><span class="line"><span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span> <span class="nf">Java_com_Cartoonifier_CartoonifierView_ShowPreview</span><span class="o">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="o">,</span> <span class="n">jobject</span><span class="o">,</span>
</span><span class="line">        <span class="n">jint</span> <span class="n">width</span><span class="o">,</span> <span class="n">jint</span> <span class="n">height</span><span class="o">,</span> <span class="n">jbyteArray</span> <span class="n">yuv</span><span class="o">,</span> <span class="n">jintArray</span> <span class="n">bgra</span><span class="o">)</span>
</span><span class="line"><span class="o">{</span>
</span><span class="line">    <span class="c1">// Get native access to the given Java arrays.</span>
</span><span class="line">    <span class="n">jbyte</span><span class="o">*</span> <span class="n">_yuv</span>  <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetByteArrayElements</span><span class="o">(</span><span class="n">yuv</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class="line">    <span class="n">jint</span><span class="o">*</span>  <span class="n">_bgra</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetIntArrayElements</span><span class="o">(</span><span class="n">bgra</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Prepare a cv::Mat that points to the YUV420sp data.</span>
</span><span class="line">    <span class="n">Mat</span> <span class="nf">myuv</span><span class="o">(</span><span class="n">height</span> <span class="o">+</span> <span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">CV_8UC1</span><span class="o">,</span> <span class="o">(</span><span class="n">uchar</span> <span class="o">*)</span><span class="n">_yuv</span><span class="o">);</span>
</span><span class="line">    <span class="c1">// Prepare a cv::Mat that points to the BGRA output data.</span>
</span><span class="line">    <span class="n">Mat</span> <span class="nf">mbgra</span><span class="o">(</span><span class="n">height</span><span class="o">,</span> <span class="n">width</span><span class="o">,</span> <span class="n">CV_8UC4</span><span class="o">,</span> <span class="o">(</span><span class="n">uchar</span> <span class="o">*)</span><span class="n">_bgra</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Convert the color format from the camera&#39;s</span>
</span><span class="line">    <span class="c1">// NV21 &quot;YUV420sp&quot; format to an Android BGRA color image.</span>
</span><span class="line">    <span class="n">cvtColor</span><span class="o">(</span><span class="n">myuv</span><span class="o">,</span> <span class="n">mbgra</span><span class="o">,</span> <span class="n">CV_YUV420sp2BGRA</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// OpenCV can now access/modify the BGRA image if we want ...</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Release the native lock we placed on the Java arrays.</span>
</span><span class="line">    <span class="n">env</span><span class="o">-&gt;</span><span class="n">ReleaseIntArrayElements</span><span class="o">(</span><span class="n">bgra</span><span class="o">,</span> <span class="n">_bgra</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class="line">    <span class="n">env</span><span class="o">-&gt;</span><span class="n">ReleaseByteArrayElements</span><span class="o">(</span><span class="n">yuv</span><span class="o">,</span> <span class="n">_yuv</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(2) 方案4中的部分代码 </p>

<p><code>Android.mk</code> 文件</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">LOCAL_PATH</span> <span class="o">:=</span> <span class="n">$</span><span class="o">(</span><span class="n">call</span> <span class="n">my</span><span class="o">-</span><span class="n">dir</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="n">include</span> <span class="n">$</span><span class="o">(</span><span class="n">CLEAR_VARS</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="err">#</span><span class="n">opencv</span>
</span><span class="line"><span class="nl">OPENCVROOT:</span><span class="o">=</span> <span class="o">/</span><span class="n">Volumes</span><span class="o">/</span><span class="n">hujiawei</span><span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">hujiawei</span><span class="o">/</span><span class="n">Android</span><span class="o">/</span><span class="n">opencv_sdk</span>
</span><span class="line"><span class="nl">OPENCV_CAMERA_MODULES:</span><span class="o">=</span><span class="n">on</span>
</span><span class="line"><span class="nl">OPENCV_INSTALL_MODULES:</span><span class="o">=</span><span class="n">on</span>
</span><span class="line"><span class="nl">OPENCV_LIB_TYPE:</span><span class="o">=</span><span class="n">SHARED</span>
</span><span class="line"><span class="n">include</span> <span class="n">$</span><span class="o">{</span><span class="n">OPENCVROOT</span><span class="o">}/</span><span class="n">sdk</span><span class="o">/</span><span class="kd">native</span><span class="o">/</span><span class="n">jni</span><span class="o">/</span><span class="n">OpenCV</span><span class="o">.</span><span class="na">mk</span>
</span><span class="line">
</span><span class="line"><span class="n">LOCAL_SRC_FILES</span> <span class="o">:=</span> <span class="n">facerec</span><span class="o">.</span><span class="na">cpp</span>
</span><span class="line">
</span><span class="line"><span class="n">LOCAL_LDLIBS</span> <span class="o">+=</span> <span class="o">-</span><span class="n">llog</span>
</span><span class="line"><span class="n">LOCAL_MODULE</span> <span class="o">:=</span> <span class="n">facerec</span>
</span><span class="line">
</span><span class="line"><span class="n">include</span> <span class="n">$</span><span class="o">(</span><span class="n">BUILD_SHARED_LIBRARY</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>Application.mk</code> 文件</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">APP_STL</span> <span class="o">:=</span> <span class="n">gnustl_static</span>
</span><span class="line"><span class="n">APP_CPPFLAGS</span> <span class="o">:=</span> <span class="o">-</span><span class="n">frtti</span> <span class="o">-</span><span class="n">fexceptions</span>
</span><span class="line"><span class="n">APP_ABI</span> <span class="o">:=</span> <span class="n">armeabi</span>
</span><span class="line"><span class="n">APP_PLATFORM</span> <span class="o">:=</span> <span class="n">android</span><span class="o">-</span><span class="mi">16</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>FisherFaceRecognizer</code> 文件</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">hacks</span><span class="o">.</span><span class="na">ndkdemo</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">org.opencv.contrib.FaceRecognizer</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FisherFaceRecognizer</span> <span class="kd">extends</span> <span class="n">FaceRecognizer</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">static</span> <span class="o">{</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">loadLibrary</span><span class="o">(</span><span class="s">&quot;opencv_java&quot;</span><span class="o">);</span><span class="c1">//</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">loadLibrary</span><span class="o">(</span><span class="s">&quot;facerec&quot;</span><span class="o">);</span><span class="c1">//</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">native</span> <span class="kt">long</span> <span class="nf">createFisherFaceRecognizer0</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">native</span> <span class="kt">long</span> <span class="nf">createFisherFaceRecognizer1</span><span class="o">(</span><span class="kt">int</span> <span class="n">num_components</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">native</span> <span class="kt">long</span> <span class="nf">createFisherFaceRecognizer2</span><span class="o">(</span><span class="kt">int</span> <span class="n">num_components</span><span class="o">,</span> <span class="kt">double</span> <span class="n">threshold</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">FisherFaceRecognizer</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="kd">super</span><span class="o">(</span><span class="n">createFisherFaceRecognizer0</span><span class="o">());</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">FisherFaceRecognizer</span><span class="o">(</span><span class="kt">int</span> <span class="n">num_components</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="kd">super</span><span class="o">(</span><span class="n">createFisherFaceRecognizer1</span><span class="o">(</span><span class="n">num_components</span><span class="o">));</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">FisherFaceRecognizer</span><span class="o">(</span><span class="kt">int</span> <span class="n">num_components</span><span class="o">,</span> <span class="kt">double</span> <span class="n">threshold</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="kd">super</span><span class="o">(</span><span class="n">createFisherFaceRecognizer2</span><span class="o">(</span><span class="n">num_components</span><span class="o">,</span> <span class="n">threshold</span><span class="o">));</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>之后你可以测试，当然你还可以做一个完整的例子来测试这个算法是否正确</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">facerec</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FisherFaceRecognizer</span><span class="o">();</span>
</span><span class="line"><span class="n">textView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">facerec</span><span class="o">.</span><span class="na">getDouble</span><span class="o">(</span><span class="s">&quot;threshold&quot;</span><span class="o">)));</span><span class="c1">//1.7976xxxx</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/10/23/differences-between-opencv-javacv-and-opencv4android/">http://hujiaweibujidao.github.io/blog/2014/10/23/differences-between-opencv-javacv-and-opencv4android/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android NDK and OpenCV development with Android Studio]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/10/22/android-ndk-and-opencv-development-with-android-studio/"/>
    <updated>2014-10-22T09:51:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/10/22/android-ndk-and-opencv-development-with-android-studio</id>
    <content type="html"><![CDATA[<p>—————- If you do <strong>NOT</strong> know Chinese, you can just skip this part —————-</p>

<p>一直打算将原来的XFace进行改进，最近终于有了些时间可以动手了，改进计划如下：开发上使用Android Studio作为新的开发环境，配上新的构建系统Gradle；应用上将修改原来的UI设计，内部代码也将有很大的变化，可能会用上ContentProvider和Service等略高级内容；算法上打算让应用扩展性增强以适应不同的算法，并结合强大的Android Studio和Gradle让这个项目变得更加丰富。说了一堆废话，言归正传，本文的重点是介绍如何在Android Studio中进行NDK开发(目前它还不完全支持NDK开发)，难点是NDK中还包含OpenCV的动态库。最后的最后，本文剩下部分将使用英文，因为它要成为我在StackOverflow上的处女答，么么哒 ~O(∩_∩)O~</p>

<p>—————————- Here is the right stuff you may need ——————————–</p>

<h4 id="this-post-shows-how-to-develop-an-android-ndk-application-with-opencv-included-using-android-studio-and-gradle-if-youre-working-on-migrating-your-original-eclipse-project-to-android-studio-you-may-find-this-post-is-what-exactly-you-want">This post shows how to develop an Android NDK application with OpenCV included using Android Studio and Gradle. If you’re working on migrating your original Eclipse Project to Android Studio, you may find this post is what exactly you want!</h4>

<p>OK，Let’s start! </p>

<h3 id="section-1--three-things-you-must-know">Section 1:  Three things you must know</h3>

<h4 id="firstly-if-you-are-not-familiar-with-android-studio-and-gradle-you-may-find-these-links-useful-if-you-already-know-these-well-skip-this-part">1.Firstly, if you are not familiar with Android Studio and Gradle, you may find these links useful. (if you already know these well, skip this part)</h4>

<p>①<a href="http://developer.android.com/sdk/installing/create-project.html">Creating a new Project with Android Studio</a></p>

<p>②<a href="http://developer.android.com/sdk/installing/studio-build.html">Building Your Project with Gradle</a></p>

<p>③<a href="http://tools.android.com/tech-docs/new-build-system/user-guide">Gradle Plugin User Guide</a>  or you may want to read a Chinese commented version in my blog <a href="http://hujiaweibujidao.github.io/blog/2014/10/13/gradle-plugin-user-guide-1/">here</a>.</p>

<h4 id="secondly-if-your-android-ndk-project-is-not-that-complicatedfor-example-having-no-opencv-included-you-may-wanna-see-ph0b-s-introduction-here-its-quite-a-nice-job-with-a-video-recorded-you-can-also-follow-section-2-in-this-post-to-get-a-simple-android-ndk-demo-application">2.Secondly, if your android ndk project is not that complicated(for example, having no opencv included), you may wanna see <code>ph0b</code> ‘s introduction here, it’s quite a nice job with a video recorded! (you can also follow Section 2 in this post to get a simple Android NDK demo application)</h4>

<p><a href="http://ph0b.com/android-studio-gradle-and-ndk-integration/"><code>ph0b</code>’s post: ANDROID STUDIO, GRADLE AND NDK INTEGRATION</a></p>

<h4 id="thirdly-if-those-above-two-do-not-meet-your-needs-then-i-think-you-may-want-to-customize-the-androidmk-with-gradle-in-android-studio-thanks-to-gaku-ueda--he-had-made-a-great-job-explaining-how-to-achieve-that-goal-actually-i-have-found-another-nicer-solution-without-adding-that-many-codes-and-also-achieve-that-goal---find-it-out-in-the-next-sections">3.Thirdly, if those above two do not meet your needs, then I think you may want to customize the Android.mk with Gradle in Android Studio. Thanks to <code>Gaku Ueda</code> , he had made a great job explaining how to achieve that goal. Actually I have found another nicer solution without adding that many codes and also achieve that goal. :-) Find it out in the next sections.</h4>

<p><a href="http://blog.gaku.net/ndk/"><code>Gaku Ueda</code>’s post: Using custom Android.mk with Gradle/Android Studio</a></p>

<p>OK, I will cover all above and give another nice solution in the end, have fun!</p>

<h3 id="section-2-a-simple-android-ndk-demo-application">Section 2: A simple Android NDK demo application</h3>

<p>This section shows creating a simple Android NDK demo application, if you already know, you can directly go the section 3.</p>

<p>1.Create a new Android project named <code>NDKDemo</code> with a blank Activity in AS(=Android Studio).</p>

<p>2.Give an <code>id</code> to the <code>TextView</code> in <code>activity_my.xml</code> such as <code>android:id="@+id/textview"</code>, then add these codes in <code>MyActivity.java</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class="line">    <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_my</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">TextView</span> <span class="n">textView</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textview</span><span class="o">);</span>
</span><span class="line">    <span class="n">textView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">hello</span><span class="o">());</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">static</span> <span class="o">{</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">loadLibrary</span><span class="o">(</span><span class="s">&quot;hello&quot;</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">native</span> <span class="n">String</span> <span class="nf">hello</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.Create a new directory <code>jni</code> in folder <code>app/src/main</code>, then you have <code>java</code>, <code>jni</code> and <code>res</code> in this folder.</p>

<p>4.This step is very important! <strong>You can add a external tool to run the <code>javah</code> command without typing that much code!</strong> </p>

<p>Open AS’s <code>Preferences</code>, then find <code>External Tools</code> in <code>IDE Settings</code>, click <code>+</code> to add one tool with the following configurations. (Make sure you have add <code>JDK tools</code>  in your <code>system path</code>, if you don’t know how, click <a href="http://hujiaweibujidao.github.io/blog/2014/02/21/android-ndk-and-opencv-development-4/">here</a>)</p>

<p><img src="http://hujiaweibujidao.github.io/images/javah_as.png" alt="image" /></p>

<p>With the help of this tool, each time we right click on a <code>class file</code>, then choose <code>Android Tools -&gt; javah</code> to run this tool, it will automatically generate a <code>C head file</code> for us in the target folder <code>$ModuleFileDir$/src/main/jni</code> , in this case, it is <code>app/src/main/jni</code>. Try this on <code>MyActivity.java</code> file now! The console will print out a log like:</p>

<p><code>/usr/bin/javah -v -jni -d /Users/hujiawei/AndroidStudioProjects/NDKDemo/app/src/main/jni com.android.hacks.ndkdemo.MyActivity
[Creating file RegularFileObject[/Users/hujiawei/AndroidStudioProjects/NDKDemo/app/src/main/jni/
com_android_hacks_ndkdemo_MyActivity.h]]</code></p>

<p>Then you get a <code>com_android_hacks_ndkdemo_MyActivity.h</code> file in <code>jni</code>  folder with the following content.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/* DO NOT EDIT THIS FILE - it is machine generated */</span>
</span><span class="line"><span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">jni</span><span class="o">.</span><span class="na">h</span><span class="o">&gt;</span>
</span><span class="line"><span class="cm">/* Header for class com_android_hacks_ndkdemo_MyActivity */</span>
</span><span class="line">
</span><span class="line"><span class="err">#</span><span class="n">ifndef</span> <span class="n">_Included_com_android_hacks_ndkdemo_MyActivity</span>
</span><span class="line"><span class="err">#</span><span class="n">define</span> <span class="n">_Included_com_android_hacks_ndkdemo_MyActivity</span>
</span><span class="line"><span class="err">#</span><span class="n">ifdef</span> <span class="n">__cplusplus</span>
</span><span class="line"><span class="n">extern</span> <span class="s">&quot;C&quot;</span> <span class="o">{</span>
</span><span class="line"><span class="err">#</span><span class="n">endif</span>
</span><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm"> * Class:     com_android_hacks_ndkdemo_MyActivity</span>
</span><span class="line"><span class="cm"> * Method:    hello</span>
</span><span class="line"><span class="cm"> * Signature: ()Ljava/lang/String;</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="n">JNIEXPORT</span> <span class="n">jstring</span> <span class="n">JNICALL</span> <span class="nf">Java_com_android_hacks_ndkdemo_MyActivity_hello</span>
</span><span class="line">  <span class="o">(</span><span class="n">JNIEnv</span> <span class="o">*,</span> <span class="n">jobject</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"><span class="err">#</span><span class="n">ifdef</span> <span class="n">__cplusplus</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="err">#</span><span class="n">endif</span>
</span><span class="line"><span class="err">#</span><span class="n">endif</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>5.Write a simple <code>C</code> implementation file named <code>main.c</code> in <code>jni</code> folder</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">jni</span><span class="o">.</span><span class="na">h</span><span class="o">&gt;</span>
</span><span class="line"><span class="err">#</span><span class="n">include</span> <span class="s">&quot;com_android_hacks_ndkdemo_MyActivity.h&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">JNIEXPORT</span> <span class="n">jstring</span> <span class="n">JNICALL</span> <span class="nf">Java_com_android_hacks_ndkdemo_MyActivity_hello</span>
</span><span class="line">  <span class="o">(</span><span class="n">JNIEnv</span> <span class="o">*</span> <span class="n">env</span><span class="o">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="o">){</span>
</span><span class="line">    <span class="k">return</span> <span class="o">(*</span><span class="n">env</span><span class="o">)-&gt;</span><span class="n">NewStringUTF</span><span class="o">(</span><span class="n">env</span><span class="o">,</span> <span class="s">&quot;Hello from JNI&quot;</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>6.In the <code>build.gradle</code> file under <code>app</code> module, add the following codes to configure <code>ndk</code> in <code>defaultConfig</code> element, here we just give the uni module a name <code>hello</code>, you can find other configurations in <a href="http://tools.android.com/tech-docs/new-build-system/user-guide">Gradle Plugin User Guide</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">defaultConfig</span> <span class="o">{</span>
</span><span class="line">    <span class="n">applicationId</span> <span class="s">&quot;com.android.hacks.ndkdemo&quot;</span>
</span><span class="line">    <span class="n">minSdkVersion</span> <span class="mi">16</span>
</span><span class="line">    <span class="n">targetSdkVersion</span> <span class="mi">20</span>
</span><span class="line">    <span class="n">versionCode</span> <span class="mi">1</span>
</span><span class="line">    <span class="n">versionName</span> <span class="s">&quot;1.0&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="n">ndk</span><span class="o">{</span>
</span><span class="line">        <span class="n">moduleName</span> <span class="s">&quot;hello&quot;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>7.In order to let Gradle run <code>ndk-build</code> command (in some task, maybe <code>NdkCompile</code> task), we should configure the <code>ndk.dir</code> in <code>local.properties</code> file in Project root.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">sdk</span><span class="o">.</span><span class="na">dir</span><span class="o">=/</span><span class="n">Volumes</span><span class="o">/</span><span class="n">hujiawei</span><span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">hujiawei</span><span class="o">/</span><span class="n">Android</span><span class="o">/</span><span class="n">android_sdk</span>
</span><span class="line"><span class="n">ndk</span><span class="o">.</span><span class="na">dir</span><span class="o">=/</span><span class="n">Volumes</span><span class="o">/</span><span class="n">hujiawei</span><span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">hujiawei</span><span class="o">/</span><span class="n">Android</span><span class="o">/</span><span class="n">android_ndk</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>8.OK, everything is ready, click <code>Run</code> to give it a try, you will see the result like</p>

<p><img src="http://hujiaweibujidao.github.io/images/ndkdemo_ss.png" alt="image" /></p>

<p>All right, so what’s happening inside?</p>

<p><strong>Since you have a <code>jni</code> folder, Gradle will consider it as a default native code folder. When Gradle builds the <code>app</code>, it will run <code>ndk-build</code> command(since you have configured <code>ndk.dir</code>,  Gradle knows where to find it) with a generated <code>Android.mk</code> file(locates in <code>app/build/intermediates/ndk/debug/Android.mk</code>), after compiling the native codes, it will generate the <code>libs</code> and <code>obj</code> folder into folder  <code>app/build/intermediates/ndk/debug/</code>. Gradle will then package the <code>libs</code> into final <code>apk</code> file in folder <code>app/build/outputs/apk/app-debug.apk</code>(you can unarchive this file to check whether <code>libs</code> is contained)</strong></p>

<p><code>app/build/intermediates/ndk/debug</code> (<code>lib</code> and <code>obj</code> folders)</p>

<p><img src="http://hujiaweibujidao.github.io/images/ndkdemo_ndk.png" alt="image" /></p>

<p><code>app/build/outputs/apk/app-debug.apk</code> (and files within it)</p>

<p><img src="http://hujiaweibujidao.github.io/images/ndkdemo_apk.png" alt="image" /></p>

<h3 id="secontion-3-using-opencv">Secontion 3: Using OpenCV</h3>

<p>If your project do not use OpenCV, then the section 2 is just enough. But what if you wanna use OpenCV to do other stuff? Of course, we want to use <code>OpenCV for Android</code> instead of  <code>JavaCV</code> here, and Of course, we need to package OpenCV library for Android into our application’s APK file (then users who use this app does not have to install <code>OpenCV Manager</code>). So, how can we achieve these goals?</p>

<p>The simplest way has been posted by <code>TGMCians</code> on Stack Overflow <a href="http://stackoverflow.com/questions/17767557/how-to-use-opencv-in-android-studio-using-gradle-build-tool?answertab=active#tab-top">here</a>, that is, let the main app include the OpenCV library as a dependency, and copy all <code>&lt;abi&gt;/*.so</code> files in OpenCV for Android SDK to <code>jniLibs</code> folder under <code>app/src/main/</code>, Gradle will automatically package these <code>&lt;abi&gt;/*.so</code> files into <code>libs</code> folder within the final APK file. Of course, this method will work, but it has a few backwards: (1) Unless you only copy the needed <code>*.so</code> files, you will always have a large APK due to this reason; (2) How about the building of the <code>jni</code> files? How to run <code>ndk-build</code> if these files contain <code>opencv</code> related codes? </p>

<p>So, here comes to our <code>Using custom Android.mk with Gradle and Android Studio</code> part. For testing, we first creat an <code>Android.mk</code> and an <code>Application.mk</code> file under <code>jni</code> folder. </p>

<p><code>Android.mk</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">LOCAL_PATH</span> <span class="o">:=</span> <span class="n">$</span><span class="o">(</span><span class="n">call</span> <span class="n">my</span><span class="o">-</span><span class="n">dir</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="n">include</span> <span class="n">$</span><span class="o">(</span><span class="n">CLEAR_VARS</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="n">LOCAL_SRC_FILES</span> <span class="o">:=</span> <span class="n">main</span><span class="o">.</span><span class="na">c</span>
</span><span class="line"><span class="n">LOCAL_LDLIBS</span> <span class="o">+=</span> <span class="o">-</span><span class="n">llog</span>
</span><span class="line"><span class="n">LOCAL_MODULE</span> <span class="o">:=</span> <span class="n">hello</span>
</span><span class="line">
</span><span class="line"><span class="n">include</span> <span class="n">$</span><span class="o">(</span><span class="n">BUILD_SHARED_LIBRARY</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>Application.mk</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">APP_ABI</span> <span class="o">:=</span> <span class="n">armeabi</span>
</span><span class="line"><span class="n">APP_PLATFORM</span> <span class="o">:=</span> <span class="n">android</span><span class="o">-</span><span class="mi">16</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Thanks to <code>Gaku Ueda</code>, he had made a great job explaining how to achieve that goal with <a href="http://blog.gaku.net/ndk/">this post</a>. The core idea of his method is to run <code>ndk-build</code> command in some task, then zip the <code>&lt;abi&gt;/*.so</code> files under the output <code>app/build/libs/</code> folder into a <code>jar</code> file which is finally put in <code>app/build/libs/</code> folder, then add a compile dependency to this jar file. The key code for his method listed below</p>

<p><strong>Notice 1: When using custom Android.mk, we should first disable Gradle to build the <code>jni</code> folder as before, and <code>sourceSets.main.jni.srcDirs = []</code> just does this job!</strong></p>

<p><strong>Notice 2: The code is not exactly the same with Gaku Ueda’s code: <code>tasks.withType(Compile)</code> to <code>tasks.withType(JavaCompile)</code>, because <code>Compile</code> is deprecated.</strong></p>

<p><strong>Notice 3: You can get  <code>$ndkDir</code> variable with <code>project.plugins.findPlugin('com.android.application').getNdkFolder()</code> or you can define it in <code>grade.properties</code> file under Project root, so you need to add <code>ndkDir=path/to/your/ndk</code> in that file, if the file is not created, simply create a new one.</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">android</span><span class="o">{</span>
</span><span class="line">	<span class="o">...</span>
</span><span class="line">    <span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">jni</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">
</span><span class="line">    <span class="n">task</span> <span class="nf">ndkBuild</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Exec</span><span class="o">,</span> <span class="nl">description:</span> <span class="err">&#39;</span><span class="n">Compile</span> <span class="n">JNI</span> <span class="n">source</span> <span class="n">via</span> <span class="n">NDK</span><span class="err">&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">	    <span class="n">ndkDir</span> <span class="o">=</span> <span class="n">project</span><span class="o">.</span><span class="na">plugins</span><span class="o">.</span><span class="na">findPlugin</span><span class="o">(</span><span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">application</span><span class="err">&#39;</span><span class="o">).</span><span class="na">getNdkFolder</span><span class="o">()</span>
</span><span class="line">        <span class="n">commandLine</span> <span class="s">&quot;$ndkDir/ndk-build&quot;</span><span class="o">,</span>
</span><span class="line">                <span class="err">&#39;</span><span class="n">NDK_PROJECT_PATH</span><span class="o">=</span><span class="n">build</span><span class="err">&#39;</span><span class="o">,</span>
</span><span class="line">                <span class="err">&#39;</span><span class="n">APP_BUILD_SCRIPT</span><span class="o">=</span><span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="o">/</span><span class="n">jni</span><span class="o">/</span><span class="n">Android</span><span class="o">.</span><span class="na">mk</span><span class="err">&#39;</span><span class="o">,</span>
</span><span class="line">                <span class="err">&#39;</span><span class="n">NDK_APPLICATION_MK</span><span class="o">=</span><span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="o">/</span><span class="n">jni</span><span class="o">/</span><span class="n">Application</span><span class="o">.</span><span class="na">mk</span><span class="err">&#39;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">task</span> <span class="nf">ndkLibsToJar</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Zip</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="err">&#39;</span><span class="n">ndkBuild</span><span class="err">&#39;</span><span class="o">,</span> <span class="nl">description:</span> <span class="err">&#39;</span><span class="n">Create</span> <span class="n">a</span> <span class="n">JAR</span> <span class="n">of</span> <span class="n">the</span> <span class="kd">native</span> <span class="n">libs</span><span class="err">&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">destinationDir</span> <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">buildDir</span><span class="o">,</span> <span class="err">&#39;</span><span class="n">libs</span><span class="err">&#39;</span><span class="o">)</span>
</span><span class="line">        <span class="n">baseName</span> <span class="err">&#39;</span><span class="n">ndk</span><span class="o">-</span><span class="n">libs</span><span class="err">&#39;</span>
</span><span class="line">        <span class="n">extension</span> <span class="err">&#39;</span><span class="n">jar</span><span class="err">&#39;</span>
</span><span class="line">        <span class="n">from</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">buildDir</span><span class="o">,</span> <span class="err">&#39;</span><span class="n">libs</span><span class="err">&#39;</span><span class="o">))</span> <span class="o">{</span> <span class="n">include</span> <span class="err">&#39;</span><span class="o">**/*.</span><span class="na">so</span><span class="err">&#39;</span> <span class="o">}</span>
</span><span class="line">        <span class="n">into</span> <span class="err">&#39;</span><span class="n">lib</span><span class="o">/</span><span class="err">&#39;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">tasks</span><span class="o">.</span><span class="na">withType</span><span class="o">(</span><span class="n">JavaCompile</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">compileTask</span> <span class="o">-&gt;</span> <span class="n">compileTask</span><span class="o">.</span><span class="na">dependsOn</span> <span class="n">ndkLibsToJar</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="n">dependencies</span> <span class="o">{</span>
</span><span class="line">    <span class="n">compile</span> <span class="nf">fileTree</span><span class="o">(</span><span class="nl">dir:</span> <span class="err">&#39;</span><span class="n">libs</span><span class="err">&#39;</span><span class="o">,</span> <span class="nl">include:</span> <span class="o">[</span><span class="err">&#39;</span><span class="o">*.</span><span class="na">jar</span><span class="err">&#39;</span><span class="o">])</span>
</span><span class="line">    <span class="c1">// add begin</span>
</span><span class="line">    <span class="n">compile</span> <span class="nf">fileTree</span><span class="o">(</span><span class="nl">dir:</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">buildDir</span><span class="o">,</span> <span class="err">&#39;</span><span class="n">libs</span><span class="err">&#39;</span><span class="o">),</span> <span class="nl">include:</span> <span class="err">&#39;</span><span class="o">*.</span><span class="na">jar</span><span class="err">&#39;</span><span class="o">)</span>
</span><span class="line">    <span class="c1">// add end</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>But we can still do a little improvements here. We have already know that Gradle will take <code>jniLibs</code> folder as its default native libraries folder, so we can simply output the <code>libs/&lt;abi&gt;/*.so</code> files generated by <code>ndk-build</code> command into <code>jniLibs</code> folder, so there’s no need to zip these <code>*.so</code> files into a <code>jar</code> file. </p>

<p>The final <code>build.gradle</code> file under <code>app</code> module</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">application</span><span class="err">&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="n">compileSdkVersion</span> <span class="mi">20</span>
</span><span class="line">    <span class="n">buildToolsVersion</span> <span class="s">&quot;20.0.0&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="n">defaultConfig</span> <span class="o">{</span>
</span><span class="line">        <span class="n">applicationId</span> <span class="s">&quot;com.android.hacks.ndkdemo&quot;</span>
</span><span class="line">        <span class="n">minSdkVersion</span> <span class="mi">16</span>
</span><span class="line">        <span class="n">targetSdkVersion</span> <span class="mi">20</span>
</span><span class="line">        <span class="n">versionCode</span> <span class="mi">1</span>
</span><span class="line">        <span class="n">versionName</span> <span class="s">&quot;1.0&quot;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// add begin</span>
</span><span class="line">    <span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">jni</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">
</span><span class="line">    <span class="n">task</span> <span class="nf">ndkBuild</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Exec</span><span class="o">,</span> <span class="nl">description:</span> <span class="err">&#39;</span><span class="n">Compile</span> <span class="n">JNI</span> <span class="n">source</span> <span class="n">via</span> <span class="n">NDK</span><span class="err">&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">ndkDir</span> <span class="o">=</span> <span class="n">project</span><span class="o">.</span><span class="na">plugins</span><span class="o">.</span><span class="na">findPlugin</span><span class="o">(</span><span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">application</span><span class="err">&#39;</span><span class="o">).</span><span class="na">getNdkFolder</span><span class="o">()</span>
</span><span class="line">        <span class="n">commandLine</span> <span class="s">&quot;$ndkDir/ndk-build&quot;</span><span class="o">,</span>
</span><span class="line">                <span class="err">&#39;</span><span class="n">NDK_PROJECT_PATH</span><span class="o">=</span><span class="n">build</span><span class="o">/</span><span class="n">intermediates</span><span class="o">/</span><span class="n">ndk</span><span class="err">&#39;</span><span class="o">,</span>
</span><span class="line">                <span class="err">&#39;</span><span class="n">NDK_LIBS_OUT</span><span class="o">=</span><span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="o">/</span><span class="n">jniLibs</span><span class="err">&#39;</span><span class="o">,</span>
</span><span class="line">                <span class="err">&#39;</span><span class="n">APP_BUILD_SCRIPT</span><span class="o">=</span><span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="o">/</span><span class="n">jni</span><span class="o">/</span><span class="n">Android</span><span class="o">.</span><span class="na">mk</span><span class="err">&#39;</span><span class="o">,</span>
</span><span class="line">                <span class="err">&#39;</span><span class="n">NDK_APPLICATION_MK</span><span class="o">=</span><span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="o">/</span><span class="n">jni</span><span class="o">/</span><span class="n">Application</span><span class="o">.</span><span class="na">mk</span><span class="err">&#39;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">tasks</span><span class="o">.</span><span class="na">withType</span><span class="o">(</span><span class="n">JavaCompile</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">compileTask</span> <span class="o">-&gt;</span> <span class="n">compileTask</span><span class="o">.</span><span class="na">dependsOn</span> <span class="n">ndkBuild</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="c1">// add end</span>
</span><span class="line">
</span><span class="line">    <span class="n">buildTypes</span> <span class="o">{</span>
</span><span class="line">        <span class="n">release</span> <span class="o">{</span>
</span><span class="line">            <span class="n">runProguard</span> <span class="kc">false</span>
</span><span class="line">            <span class="n">proguardFiles</span> <span class="nf">getDefaultProguardFile</span><span class="o">(</span><span class="err">&#39;</span><span class="n">proguard</span><span class="o">-</span><span class="n">android</span><span class="o">.</span><span class="na">txt</span><span class="err">&#39;</span><span class="o">),</span> <span class="err">&#39;</span><span class="n">proguard</span><span class="o">-</span><span class="n">rules</span><span class="o">.</span><span class="na">pro</span><span class="err">&#39;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="n">dependencies</span> <span class="o">{</span>
</span><span class="line">    <span class="n">compile</span> <span class="nf">fileTree</span><span class="o">(</span><span class="nl">dir:</span> <span class="err">&#39;</span><span class="n">libs</span><span class="err">&#39;</span><span class="o">,</span> <span class="nl">include:</span> <span class="o">[</span><span class="err">&#39;</span><span class="o">*.</span><span class="na">jar</span><span class="err">&#39;</span><span class="o">])</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So simple, right? <code>'NDK_LIBS_OUT=src/main/jniLibs'</code> helps us do the right job!</p>

<p>For testing, you can also add some lines relating with OpenCV in your <code>Android.mk</code> file and some line in your <code>main.c</code> to check whether everything is readlly working. For example, add <code>#include &lt;opencv2/core/core.hpp&gt;</code> in <code>main.c</code> file, and change  <code>Android.mk</code> to </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">LOCAL_PATH</span> <span class="o">:=</span> <span class="n">$</span><span class="o">(</span><span class="n">call</span> <span class="n">my</span><span class="o">-</span><span class="n">dir</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="n">include</span> <span class="n">$</span><span class="o">(</span><span class="n">CLEAR_VARS</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="err">#</span><span class="n">opencv</span>
</span><span class="line"><span class="nl">OPENCVROOT:</span><span class="o">=</span> <span class="o">/</span><span class="n">Volumes</span><span class="o">/</span><span class="n">hujiawei</span><span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">hujiawei</span><span class="o">/</span><span class="n">Android</span><span class="o">/</span><span class="n">opencv_sdk</span>
</span><span class="line"><span class="nl">OPENCV_CAMERA_MODULES:</span><span class="o">=</span><span class="n">on</span>
</span><span class="line"><span class="nl">OPENCV_INSTALL_MODULES:</span><span class="o">=</span><span class="n">on</span>
</span><span class="line"><span class="nl">OPENCV_LIB_TYPE:</span><span class="o">=</span><span class="n">SHARED</span>
</span><span class="line"><span class="n">include</span> <span class="n">$</span><span class="o">{</span><span class="n">OPENCVROOT</span><span class="o">}/</span><span class="n">sdk</span><span class="o">/</span><span class="kd">native</span><span class="o">/</span><span class="n">jni</span><span class="o">/</span><span class="n">OpenCV</span><span class="o">.</span><span class="na">mk</span>
</span><span class="line">
</span><span class="line"><span class="n">LOCAL_SRC_FILES</span> <span class="o">:=</span> <span class="n">main</span><span class="o">.</span><span class="na">c</span>
</span><span class="line"><span class="n">LOCAL_LDLIBS</span> <span class="o">+=</span> <span class="o">-</span><span class="n">llog</span>
</span><span class="line"><span class="n">LOCAL_MODULE</span> <span class="o">:=</span> <span class="n">hello</span>
</span><span class="line">
</span><span class="line"><span class="n">include</span> <span class="n">$</span><span class="o">(</span><span class="n">BUILD_SHARED_LIBRARY</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In Gradle Console window, you can see these similar lines</p>

<p><img src="http://hujiaweibujidao.github.io/images/ndkdemo_gradle.png" alt="image" /></p>

<p><code>*.so</code> files relating with OpenCV has been packaged into the final APK</p>

<p><img src="http://hujiaweibujidao.github.io/images/ndkdemo_opencvlibs.png" alt="image" /></p>

<h4 id="one-more-thing"><strong>One More Thing</strong></h4>

<p>Of course, maybe you don’t want to change your <code>build.grale</code> file with that much code, and Of course, you also don’t want to run <code>ndk-build</code> outside the IDE, then copy the <code>&lt;abi&gt;/*.so</code> files into <code>jniLibs</code> folder each time you want to rebuild the native codes!</p>

<p>At last, I came out another nicer solution, if you like, that is to create a <code>ndk-build</code> external tool in Android Studio, and every time you want to rebuild the native codes, simply run the external tool, then it automatically generates the <code>libs/&lt;abi&gt;/*.so</code> files into <code>jniLibs</code> folder, so everything is ready to run this app, :-)</p>

<p>The configuration is simple</p>

<p>Parameters:  <code>NDK_PROJECT_PATH=$ModuleFileDir$/build/intermediates/ndk NDK_LIBS_OUT=$ModuleFileDir$/src/main/jniLibs NDK_APPLICATION_MK=$ModuleFileDir$/src/main/jni/Application.mk APP_BUILD_SCRIPT=$ModuleFileDir$/src/main/jni/Android.mk V=1</code></p>

<p><img src="http://hujiaweibujidao.github.io/images/ndk_build_as.png" alt="image" /></p>

<p>OK, I hope it is helpful. Let me know if it is really helpful, or tell me what’s your problem. :-)</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/10/22/android-ndk-and-opencv-development-with-android-studio/">http://hujiaweibujidao.github.io/blog/2014/10/22/android-ndk-and-opencv-development-with-android-studio/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle Plugin for Android Development User Guide (2)]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/10/15/gradle-plugin-user-guide-2/"/>
    <updated>2014-10-15T12:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/10/15/gradle-plugin-user-guide-2</id>
    <content type="html"><![CDATA[<p>Gradle Plugin for Android Development User Guide (2)</p>

<p>阅读本文前请先阅读第一部分：<a href="http://hujiaweibujidao.github.io/blog/2014/10/15/gradle-plugin-user-guide-1/">http://hujiaweibujidao.github.io/blog/2014/10/15/gradle-plugin-user-guide-1</a></p>

<p>原文地址：<a href="http://tools.android.com/tech-docs/new-build-system/user-guide">http://tools.android.com/tech-docs/new-build-system/user-guide</a></p>

<h3 id="testing">Testing</h3>

<p>[现在我们可以直接将test application集成到我们的application project中，没有必要再创建一个独立的test project了]</p>

<p>Building a test application is integrated into the application project. There is no need for a separate test project anymore.</p>

<h4 id="basics-and-configuration">Basics and Configuration</h4>

<p>[测试代码默认存放在<code>src/androidTest/</code> 目录下，使用Android Testing Framework 我们可以创建unit tests，instrumentation tests, 和 uiautomator tests.]</p>

<p>As mentioned previously, next to the <code>main</code> sourceSet is the <code>androidTest</code> sourceSet, located by default in <code>src/androidTest/</code></p>

<p>From this sourceSet is built a test apk that can be deployed to a device to test the application using the <code>Android testing framework</code>. This can contain unit tests, instrumentation tests, and later uiautomator tests.</p>

<p>[test app的<code>AndroidManifest.xml</code> 文件是自动生成的，所以它不需要指定位置，此外，我们没必要设置test application的instrumentation节点的<code>targetPackage</code> 属性，因为它会被test app的package name填充进去，这也就是为什么test app的Manifest文件是自动生成的]</p>

<p>The sourceSet should not contain an <code>AndroidManifest.xml</code> as it is automatically generated.</p>

<p>There are a few values that can be configured for the test app: [test app可以指定的属性]</p>

<p><code>testPackageName</code>     <br />
<code>testInstrumentationRunner</code>      <br />
<code>testHandleProfiling</code>      <br />
<code>testFunctionalTest</code>         </p>

<p>As seen previously, those are configured in the defaultConfig object:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="n">defaultConfig</span> <span class="o">{</span>
</span><span class="line">        <span class="n">testPackageName</span> <span class="s">&quot;com.test.foo&quot;</span>
</span><span class="line">        <span class="n">testInstrumentationRunner</span> <span class="s">&quot;android.test.InstrumentationTestRunner&quot;</span>
</span><span class="line">        <span class="n">testHandleProfiling</span> <span class="kc">true</span>
</span><span class="line">        <span class="n">testFunctionalTest</span> <span class="kc">true</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>The value of the <code>targetPackage</code> attribute of the instrumentation node in the test application manifest is automatically filled with the package name of the tested app, even if it is customized through the <code>defaultConfig</code> and/or the Build Type objects. This is one of the reason the manifest is generated automatically.</strong></p>

<p>Additionally, the sourceSet can be configured to have its own dependencies.
By default, the application and its own dependencies are added to the test app classpath, but this can be extended with </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">dependencies</span> <span class="o">{</span>
</span><span class="line">    <span class="n">androidTestCompile</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">guava</span><span class="o">:</span><span class="nl">guava:</span><span class="mf">11.0</span><span class="o">.</span><span class="mi">2</span><span class="err">&#39;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>[test app是通过任务<code>assembleTest</code> 来构建的，它不是main assemble任务的依赖项，所以它是在test运行时自动调用的。目前只有debug这个build type会被测试，当然也可以自定义]</p>

<p><strong>The test app is built by the task <code>assembleTest</code>. It is not a dependency of the main assemble task, and is instead called automatically when the tests are set to run.</strong></p>

<p><strong>Currently only one Build Type is tested. By default it is the <code>debug</code> Build Type, but this can be reconfigured with:</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="n">testBuildType</span> <span class="s">&quot;staging&quot;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="running-tests">Running tests</h4>

<p>[前面提到过，在所有已连接的设备上进行check的任务是<code>connectedCheck</code>，它依赖任务<code>androidTest</code>，该任务的工作是并行地在所有已连接的设备上运行测试，任何一个设备测试失败的话，build就会失败。测试的结果会保存在XML文件中，存放在<code>build/androidTest-results</code> 目录下，当然也可以修改目标目录]</p>

<p>As mentioned previously, checks requiring a connected device are launched with the anchor task called <code>connectedCheck</code>.</p>

<p>This depends on the task <code>androidTest</code> and therefore will run it. This task does the following:  [<code>androidTest</code> 任务的工作流程]</p>

<p>1 Ensure the app and the test app are built (depending on <code>assembleDebug</code> and <code>assembleTest</code>)  <br />
2 Install both apps    <br />
3 Run the tests     <br />
4 Uninstall both apps.      </p>

<p>If more than one device is connected, all tests are run in parallel on all connected devices. If one of the test fails, on any device, the build will fail.</p>

<p>All test results are stored as XML files under</p>

<p><code>build/androidTest-results</code></p>

<p>(This is similar to regular jUnit results that are stored under <code>build/test-results</code>)</p>

<p>This can be configured with</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">
</span><span class="line">    <span class="n">testOptions</span> <span class="o">{</span>
</span><span class="line">        <span class="n">resultsDir</span> <span class="o">=</span> <span class="s">&quot;$project.buildDir/foo/results&quot;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>The value of <code>android.testOptions.resultsDir</code> is evaluated with <code>Project.file(String)</code></strong></p>

<h4 id="testing-android-libraries">Testing Android Libraries</h4>

<p>[测试android library project和测试一般的application差不多，区别在于整个library和它的依赖项都会被自动添加到test app，Manifest文件也被整合到test app的Manifest中。此外，<code>androidTest</code> 任务只能安装和卸载test APK]</p>

<p>Testing Android Library project is done exactly the same way as application projects.</p>

<p>The only difference is that the whole library (and its dependencies) is automatically added as a Library dependency to the test app. The result is that the test APK includes not only its own code, but also the library itself and all its dependencies.</p>

<p>The manifest of the Library is merged into the manifest of the test app (as is the case for any project referencing this Library).</p>

<p>The <code>androidTest</code> task is changed to only install (and uninstall) the test APK (since there are no other APK to install.)</p>

<p>Everything else is identical.</p>

<h4 id="test-reports">Test reports</h4>

<p>[在进行单元测试时，Gradle会输出一份HTML文档形式的报告。Android插件在此之上进行扩展，输出一份整合了所有已连接设备的测试结果的测试报告]</p>

<p>When running unit tests, Gradle outputs an HTML report to easily look at the results.</p>

<p>The Android plugins build on this and extends the HTML report to aggregate the results from all connected devices.</p>

<h4 id="single-projects">Single projects</h4>

<p>The project is automatically generated upon running the tests. Its default location is <code>build/reports/androidTests</code></p>

<p>This is similar to the jUnit report location, which is <code>build/reports/tests</code>, or other reports usually located in <code>build/reports/&lt;plugin&gt;/</code></p>

<p>The location can be customized with</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">
</span><span class="line">    <span class="n">testOptions</span> <span class="o">{</span>
</span><span class="line">        <span class="n">reportDir</span> <span class="o">=</span> <span class="s">&quot;$project.buildDir/foo/report&quot;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The report will aggregate tests that ran on different devices.</p>

<h4 id="multi-projects-reports">Multi-projects reports</h4>

<p>[对于多项目的测试，可以使用插件<code>android-reporting</code> 来将所有的测试结果输出到一个单一的报告中，而且这个设置必须是要设置在根项目的<code>build.gradle</code> 文件中]</p>

<p>In a multi project setup with application(s) and library(ies) projects, when running all tests at the same time, it might be useful to generate a single reports for all tests.</p>

<p>To do this, a different plugin is available in the same artifact. It can be applied with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">buildscript</span> <span class="o">{</span>
</span><span class="line">    <span class="n">repositories</span> <span class="o">{</span>
</span><span class="line">        <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class="line">        <span class="n">classpath</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">tools</span><span class="o">.</span><span class="na">build</span><span class="o">:</span><span class="nl">gradle:</span><span class="mf">0.5</span><span class="o">.</span><span class="mi">6</span><span class="err">&#39;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="err">&#39;</span><span class="n">android</span><span class="o">-</span><span class="n">reporting</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This should be applied to the root project, ie in <code>build.gradle</code> next to <code>settings.gradle</code></p>

<p>[在项目根目录下使用下面的命令可以保证运行所有的测试并聚合所有的测试结果，其中的<code>--continue</code> 选项能够保证即使某个设备在测试过程中出现了问题也不会打断其他的设备继续测试]</p>

<p>Then from the root folder, the following command line will run all the tests and aggregate the reports:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">gradle</span> <span class="n">deviceCheck</span> <span class="n">mergeAndroidReports</span> <span class="o">--</span><span class="k">continue</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note: the <code>--continue</code> option ensure that all tests, from all sub-projects will be run even if one of them fails. Without it the first failing test will interrupt the run and not all projects may have their tests run.</p>

<h4 id="lint-support">Lint support</h4>

<p>[lint可以指出程序中可能出现的issue，android插件同样支持]</p>

<p>As of version 0.7.0, you can run lint for a specific variant, or for all variants, in which case it produces a report which describes which specific variants a given issue applies to.</p>

<p>You can configure lint by adding a <code>lintOptions</code> section like following. You typically only specify a few of these; this section shows all the available options.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="n">lintOptions</span> <span class="o">{</span>
</span><span class="line">        <span class="c1">// set to true to turn off analysis progress reporting by lint</span>
</span><span class="line">        <span class="n">quiet</span> <span class="kc">true</span>
</span><span class="line">        <span class="c1">// if true, stop the gradle build if errors are found</span>
</span><span class="line">        <span class="n">abortOnError</span> <span class="kc">false</span>
</span><span class="line">        <span class="c1">// if true, only report errors</span>
</span><span class="line">        <span class="n">ignoreWarnings</span> <span class="kc">true</span>
</span><span class="line">        <span class="c1">// if true, emit full/absolute paths to files with errors (true by default)</span>
</span><span class="line">        <span class="c1">//absolutePaths true</span>
</span><span class="line">        <span class="c1">// if true, check all issues, including those that are off by default</span>
</span><span class="line">        <span class="n">checkAllWarnings</span> <span class="kc">true</span>
</span><span class="line">        <span class="c1">// if true, treat all warnings as errors</span>
</span><span class="line">        <span class="n">warningsAsErrors</span> <span class="kc">true</span>
</span><span class="line">        <span class="c1">// turn off checking the given issue id&#39;s</span>
</span><span class="line">        <span class="n">disable</span> <span class="err">&#39;</span><span class="n">TypographyFractions</span><span class="sc">&#39;,&#39;</span><span class="n">TypographyQuotes</span><span class="err">&#39;</span>
</span><span class="line">        <span class="c1">// turn on the given issue id&#39;s</span>
</span><span class="line">        <span class="n">enable</span> <span class="err">&#39;</span><span class="n">RtlHardcoded</span><span class="sc">&#39;,&#39;</span><span class="n">RtlCompat</span><span class="err">&#39;</span><span class="o">,</span> <span class="err">&#39;</span><span class="n">RtlEnabled</span><span class="err">&#39;</span>
</span><span class="line">        <span class="c1">// check *only* the given issue id&#39;s</span>
</span><span class="line">        <span class="n">check</span> <span class="err">&#39;</span><span class="n">NewApi</span><span class="err">&#39;</span><span class="o">,</span> <span class="err">&#39;</span><span class="n">InlinedApi</span><span class="err">&#39;</span>
</span><span class="line">        <span class="c1">// if true, don&#39;t include source code lines in the error output</span>
</span><span class="line">        <span class="n">noLines</span> <span class="kc">true</span>
</span><span class="line">        <span class="c1">// if true, show all locations for an error, do not truncate lists, etc.</span>
</span><span class="line">        <span class="n">showAll</span> <span class="kc">true</span>
</span><span class="line">        <span class="c1">// Fallback lint configuration (default severities, etc.)</span>
</span><span class="line">        <span class="n">lintConfig</span> <span class="nf">file</span><span class="o">(</span><span class="s">&quot;default-lint.xml&quot;</span><span class="o">)</span>
</span><span class="line">        <span class="c1">// if true, generate a text report of issues (false by default)</span>
</span><span class="line">        <span class="n">textReport</span> <span class="kc">true</span>
</span><span class="line">        <span class="c1">// location to write the output; can be a file or &#39;stdout&#39;</span>
</span><span class="line">        <span class="n">textOutput</span> <span class="err">&#39;</span><span class="n">stdout</span><span class="err">&#39;</span>
</span><span class="line">        <span class="c1">// if true, generate an XML report for use by for example Jenkins</span>
</span><span class="line">        <span class="n">xmlReport</span> <span class="kc">false</span>
</span><span class="line">        <span class="c1">// file to write report to (if not specified, defaults to lint-results.xml)</span>
</span><span class="line">        <span class="n">xmlOutput</span> <span class="nf">file</span><span class="o">(</span><span class="s">&quot;lint-report.xml&quot;</span><span class="o">)</span>
</span><span class="line">        <span class="c1">// if true, generate an HTML report (with issue explanations, sourcecode, etc)</span>
</span><span class="line">        <span class="n">htmlReport</span> <span class="kc">true</span>
</span><span class="line">        <span class="c1">// optional path to report (default will be lint-results.html in the builddir)</span>
</span><span class="line">        <span class="n">htmlOutput</span> <span class="nf">file</span><span class="o">(</span><span class="s">&quot;lint-report.html&quot;</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">   <span class="c1">// set to true to have all release builds run lint on issues with severity=fatal</span>
</span><span class="line">   <span class="c1">// and abort the build (controlled by abortOnError above) if fatal issues are found</span>
</span><span class="line">   <span class="n">checkReleaseBuilds</span> <span class="kc">true</span>
</span><span class="line">        <span class="c1">// Set the severity of the given issues to fatal (which means they will be</span>
</span><span class="line">        <span class="c1">// checked during release builds (even if the lint target is not included)</span>
</span><span class="line">        <span class="n">fatal</span> <span class="err">&#39;</span><span class="n">NewApi</span><span class="err">&#39;</span><span class="o">,</span> <span class="err">&#39;</span><span class="n">InlineApi</span><span class="err">&#39;</span>
</span><span class="line">        <span class="c1">// Set the severity of the given issues to error</span>
</span><span class="line">        <span class="n">error</span> <span class="err">&#39;</span><span class="n">Wakelock</span><span class="err">&#39;</span><span class="o">,</span> <span class="err">&#39;</span><span class="n">TextViewEdits</span><span class="err">&#39;</span>
</span><span class="line">        <span class="c1">// Set the severity of the given issues to warning</span>
</span><span class="line">        <span class="n">warning</span> <span class="err">&#39;</span><span class="n">ResourceAsColor</span><span class="err">&#39;</span>
</span><span class="line">        <span class="c1">// Set the severity of the given issues to ignore (same as disabling the check)</span>
</span><span class="line">        <span class="n">ignore</span> <span class="err">&#39;</span><span class="n">TypographyQuotes</span><span class="err">&#39;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="build-variants">Build Variants</h3>

<p>One goal of the new build system is to enable creating different versions of the same application.</p>

<p>There are two main use cases: [同一套程序代码生成多种不同的结果的应用场景]</p>

<p>(1) Different versions of the same application</p>

<p>For instance, a free/demo version vs the “pro” paid application. [一个是展示应用，另一个是真正的付费应用]</p>

<p>Same application packaged differently for multi-apk in Google Play Store.
See <a href="http://developer.android.com/google/play/publishing/multiple-apks.html">http://developer.android.com/google/play/publishing/multiple-apks.html </a> for more information.</p>

<p>(2) A combination of 1. and 2. </p>

<p>The goal was to be able to generate these different APKs from the same project, as opposed to using a single Library Projects and 2+ Application Projects.</p>

<h4 id="product-flavors">Product flavors</h4>

<p>[product flavor是一个项目的特别定制版的应用程序输出，单个项目可以有很多不同的product flavors，它们的名称不要和build type和sourceSet的名称相同]</p>

<p>A product flavor defines a customized version of the application build by the project. A single project can have different flavors which change the generated application.</p>

<p><strong>This new concept is designed to help when the differences are very minimum. If the answer to “Is this the same application?” is yes, then this is probably the way to go over Library Projects.</strong></p>

<p>Product flavors are declared using a productFlavors DSL container:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="o">....</span>
</span><span class="line">
</span><span class="line">    <span class="n">productFlavors</span> <span class="o">{</span>
</span><span class="line">        <span class="n">flavor1</span> <span class="o">{</span>
</span><span class="line">            <span class="o">...</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="n">flavor2</span> <span class="o">{</span>
</span><span class="line">            <span class="o">...</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This creates two flavors, called flavor1 and flavor2.</p>

<p>Note: The name of the flavors cannot collide with existing Build Type names, or with the <code>androidTest</code> sourceSet.</p>

<p>[重要的式子：每个build type和product flavor的组合就是一个build variant]</p>

<p><strong>Build Type + Product Flavor = Build Variant</strong>  </p>

<p>As we have seen before, each Build Type generates a new APK.</p>

<p>Product Flavors do the same: the output of the project becomes all possible combinations of Build Types and, if applicable, Product Flavors.</p>

<p><strong>Each (Build Type, Product Flavor) combination is called a Build Variant.</strong></p>

<p>For instance, with the default <code>debug</code> and <code>release</code> Build Types, the above example generates four Build Variants:</p>

<p><code>Flavor1 - debug</code>    <br />
<code>Flavor1 - release</code>    <br />
<code>Flavor2 - debug</code>    <br />
<code>Flavor2 - release</code>      </p>

<p>[没有配置flavor的项目会有一个默认的flavor配置]</p>

<p>Projects with no flavors still have Build Variants, but the single default <code>flavor/config</code> is used, nameless, making the list of variants similar to the list of Build Types.</p>

<h4 id="product-flavor-configuration">Product Flavor Configuration</h4>

<p>Each flavors is configured with a closure:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">
</span><span class="line">    <span class="n">defaultConfig</span> <span class="o">{</span>
</span><span class="line">        <span class="n">minSdkVersion</span> <span class="mi">8</span>
</span><span class="line">        <span class="n">versionCode</span> <span class="mi">10</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">productFlavors</span> <span class="o">{</span>
</span><span class="line">        <span class="n">flavor1</span> <span class="o">{</span>
</span><span class="line">            <span class="n">packageName</span> <span class="s">&quot;com.example.flavor1&quot;</span>
</span><span class="line">            <span class="n">versionCode</span> <span class="mi">20</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="n">flavor2</span> <span class="o">{</span>
</span><span class="line">            <span class="n">packageName</span> <span class="s">&quot;com.example.flavor2&quot;</span>
</span><span class="line">            <span class="n">minSdkVersion</span> <span class="mi">14</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>[ProductFlavor对象和<code>android.defaultConfig</code> 对象有相同的属性，即可以使用类似的配置方式]</p>

<p><strong>Note that the <code>android.productFlavors.*</code> objects are of type <code>ProductFlavor</code> which is the same type as the <code>android.defaultConfig</code> object. This means they share the same properties.</strong></p>

<p><code>defaultConfig</code> provides the base configuration for all flavors and each flavor can override any value. In the example above, the configurations end up being:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">flavor1</span>
</span><span class="line"><span class="nl">packageName:</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">flavor1</span>
</span><span class="line"><span class="nl">minSdkVersion:</span> <span class="mi">8</span>
</span><span class="line"><span class="nl">versionCode:</span> <span class="mi">20</span>
</span><span class="line">
</span><span class="line"><span class="n">flavor2</span>
</span><span class="line"><span class="nl">packageName:</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">flavor2</span>
</span><span class="line"><span class="nl">minSdkVersion:</span> <span class="mi">14</span>
</span><span class="line"><span class="nl">versionCode:</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Usually, the Build Type configuration is an overlay over the other configuration. For instance, the Build Type’s packageNameSuffix is appended to the Product Flavor’s packageName.</p>

<p>[有些情况下，我们希望一个设置同时作用在build type和product flavor上，例如<code>signingConfig</code> 就是其中的一种配置，我们既可以设置所有的build type使用相同的SigningConfig，又可以设置某些flavor使用某个特定的SigningConfig]</p>

<p>There are cases where a setting is settable on both the Build Type and the Product Flavor. In this case, it’s is on a case by case basis.</p>

<p>For instance, <code>signingConfig</code> is one of these properties.</p>

<p>This enables either having all release packages share the same <code>SigningConfig</code>, by setting <code>android.buildTypes.release.signingConfig</code>, or have each release package use their own SigningConfig by setting each <code>android.productFlavors.*.signingConfig</code> objects separately.</p>

<h4 id="sourcesets-and-dependencies">Sourcesets and Dependencies</h4>

<p>[和build type类似，product flavor也会产生自己的sourceSets，这些sourceSets和build type的sourceSets以及<code>android.sourceSets.main</code> 组合起来构建最终的APK]</p>

<p>Similar to Build Types, Product Flavors also contribute code and resources through their own sourceSets.</p>

<p>The above example creates four sourceSets:</p>

<p><code>android.sourceSets.flavor1</code>   Location <code>src/flavor1/</code>      <br />
<code>android.sourceSets.flavor2</code>   Location <code>src/flavor2/</code>     <br />
<code>android.sourceSets.androidTestFlavor1</code>   Location <code>src/androidTestFlavor1/</code>    <br />
<code>android.sourceSets.androidTestFlavor2</code>   Location <code>src/androidTestFlavor2/</code>     </p>

<p>Those sourceSets are used to build the APK, alongside <code>android.sourceSets.main</code> and the Build Type sourceSet.</p>

<p>The following rules are used when dealing with all the sourcesets used to build a single APK:  <strong>[重点：在构建APK过程中处理所有源码和资源的规则]</strong></p>

<p>1 All source code (<code>src/*/java</code>) are used together as multiple folders generating a single output.  [所有的源代码都会整合到一起作为输出]</p>

<p>2 Manifests are all merged together into a single manifest. This allows Product Flavors to have different components and/or permissions, similarly to Build Types.  [所有的Manifest文件也都会整合成为一个Manifest文件，其中product flavor和build type类似，都可以有不同的components或者permissions]</p>

<p>3 <strong>All resources (Android <code>res</code> and <code>assets</code>) are used using overlay priority where the Build Type overrides the Product Flavor, which overrides the main sourceSet.</strong> [所有的资源文件按照优先级的不同采用覆盖的方式整合，product flavor覆盖main，build type覆盖product flavor] <strong>[?这里的优先级总觉得有点问题?]</strong></p>

<p>4 Each Build Variant generates its own <code>R</code> class (or other generated source code) from the resources. Nothing is shared between variants. [每个Build Variant都会根据它的资源文件产生一个R清单类，并且在variants之间不进行共享]</p>

<p>5 Finally, like Build Types, Product Flavors can have their own dependencies. For instance, if the flavors are used to generate a ads-based app and a paid app, one of the flavors could have a dependency on an Ads SDK, while the other does not. [最后，build type和product flavor一样都可以有自己的依赖项]</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">dependencies</span> <span class="o">{</span>
</span><span class="line">    <span class="n">flavor1Compile</span> <span class="s">&quot;...&quot;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In this particular case, the file <code>src/flavor1/AndroidManifest.xml</code> would probably need to include the internet permission.</p>

<p>Additional sourcesets are also created for each variants:</p>

<p><code>android.sourceSets.flavor1Debug</code>   Location <code>src/flavor1Debug/</code>   <br />
<code>android.sourceSets.flavor1Release</code>   Location <code>src/flavor1Release/</code>    <br />
<code>android.sourceSets.flavor2Debug</code>    Location <code>src/flavor2Debug/</code>  <br />
<code>android.sourceSets.flavor2Release</code>    Location <code>src/flavor2Release/</code>     </p>

<p>These have higher priority than the build type sourcesets, and allow customization at the variant level.</p>

<p>[这些sourceSets的优先级比build type的sourceSets高，而且可以在variant层进行自定义]</p>

<h4 id="building-and-tasks">Building and Tasks</h4>

<p>We previously saw that each Build Type creates its own <code>assemble&lt;name&gt;</code> task, but that Build Variants are a combination of Build Type and Product Flavor.</p>

<p>[当一个product flavor被使用时，更多的assemble类型的任务会被创建，它们分别针对了特定的variant或者build type或者flavor]</p>

<p>When Product Flavors are used, more assemble-type tasks are created. These are:  </p>

<p><code>assemble&lt;Variant Name&gt;</code>    <br />
<code>assemble&lt;Build Type Name&gt;</code>        <br />
<code>assemble&lt;Product Flavor Name&gt;</code>        </p>

<p>1 allows directly building a <code>single variant</code>. For instance <code>assembleFlavor1Debug</code>.</p>

<p>2 allows building all APKs for a given <code>Build Type</code>. For instance <code>assembleDebug </code>will build both <code>Flavor1Debug</code> and <code>Flavor2Debug</code> variants.</p>

<p>3 allows building all APKs for a given <code>flavor</code>. For instance <code>assembleFlavor1</code> will build both <code>Flavor1Debug</code> and <code>Flavor1Release</code> variants.</p>

<p>The task <code>assemble</code> will build all possible variants.</p>

<h4 id="testing-1">Testing</h4>

<p>[测试包含多个<code>flavor</code> 的项目]</p>

<p>Testing multi-flavors project is very similar to simpler projects.</p>

<p>The <code>androidTest</code> sourceset is used for common tests across all flavors, while each flavor can also have its own tests.</p>

<p>As mentioned above, sourceSets to test each flavor are created:</p>

<p><code>android.sourceSets.androidTestFlavor1</code>    Location <code>src/androidTestFlavor1/</code>       <br />
<code>android.sourceSets.androidTestFlavor2</code>    Location <code>src/androidTestFlavor2/</code>      </p>

<p>Similarly, those can have their own dependencies:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">dependencies</span> <span class="o">{</span>
</span><span class="line">    <span class="n">androidTestFlavor1Compile</span> <span class="s">&quot;...&quot;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Running the tests can be done through the main <code>deviceCheck</code> anchor task, or the main <code>androidTest</code> tasks which acts as an anchor task when flavors are used.</p>

<p>Each flavor has its own task to run <code>tests: androidTest&lt;VariantName&gt;</code>. For instance:</p>

<p><code>androidTestFlavor1Debug</code>           <br />
<code>androidTestFlavor2Debug</code>           </p>

<p>Similarly, test APK building tasks and install/uninstall tasks are per variant:</p>

<p><code>assembleFlavor1Test</code>      <br />
<code>installFlavor1Debug</code>      <br />
<code>installFlavor1Test</code>      <br />
<code>uninstallFlavor1Debug</code>      <br />
<code>...</code></p>

<p>Finally the HTML report generation supports aggregation by flavor.
The location of the test results and reports is as follows, first for the per flavor version, and then for the aggregated one:</p>

<p><code>build/androidTest-results/flavors/&lt;FlavorName&gt;</code>      <br />
<code>build/androidTest-results/all/</code>      <br />
<code>build/reports/androidTests/flavors&lt;FlavorName&gt;</code>      <br />
<code>build/reports/androidTests/all/</code>        </p>

<p>Customizing either path, will only change the root folder and still create sub folders per-flavor and aggregated <code>results/reports</code>.</p>

<h4 id="multi-flavor-variants">Multi-flavor variants</h4>

<p>[使用<code>flavorGroups</code>，此处有些复杂，如果有这种需求请细读原文]</p>

<p>In some case, one may want to create several versions of the same apps based on more than one criteria.</p>

<p>For instance, multi-apk support in Google Play supports 4 different filters. </p>

<p>Creating different APKs split on each filter requires being able to use more than one dimension of Product Flavors.</p>

<p>Consider the example of a game that has a demo and a paid version and wants to use the ABI filter in the multi-apk support. With 3 ABIs and two versions of the application, 6 APKs needs to be generated (not counting the variants introduced by the different Build Types).</p>

<p>However, the code of the paid version is the same for all three ABIs, so creating simply 6 flavors is not the way to go.Instead, there are two dimensions of flavors, and variants should automatically build all possible combinations.</p>

<p>This feature is implemented using Flavor Groups. Each group represents a dimension, and flavors are assigned to a specific group.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">
</span><span class="line">    <span class="n">flavorGroups</span> <span class="s">&quot;abi&quot;</span><span class="o">,</span> <span class="s">&quot;version&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="n">productFlavors</span> <span class="o">{</span>
</span><span class="line">        <span class="n">freeapp</span> <span class="o">{</span>
</span><span class="line">            <span class="n">flavorGroup</span> <span class="s">&quot;version&quot;</span>
</span><span class="line">            <span class="o">...</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="n">x86</span> <span class="o">{</span>
</span><span class="line">            <span class="n">flavorGroup</span> <span class="s">&quot;abi&quot;</span>
</span><span class="line">            <span class="o">...</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>android.flavorGroups</code> array defines the possible groups, as well as the order. Each defined Product Flavor is assigned to a group.</p>

<p>From the following grouped Product Flavors <code>[freeapp, paidapp]</code> and <code>[x86, arm, mips]</code> and the <code>[debug, release]</code> Build Types, the following build variants will be created:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">x86</span><span class="o">-</span><span class="n">freeapp</span><span class="o">-</span><span class="n">debug</span>
</span><span class="line"><span class="n">x86</span><span class="o">-</span><span class="n">freeapp</span><span class="o">-</span><span class="n">release</span>
</span><span class="line"><span class="n">arm</span><span class="o">-</span><span class="n">freeapp</span><span class="o">-</span><span class="n">debug</span>
</span><span class="line"><span class="n">arm</span><span class="o">-</span><span class="n">freeapp</span><span class="o">-</span><span class="n">release</span>
</span><span class="line"><span class="n">mips</span><span class="o">-</span><span class="n">freeapp</span><span class="o">-</span><span class="n">debug</span>
</span><span class="line"><span class="n">mips</span><span class="o">-</span><span class="n">freeapp</span><span class="o">-</span><span class="n">release</span>
</span><span class="line"><span class="n">x86</span><span class="o">-</span><span class="n">paidapp</span><span class="o">-</span><span class="n">debug</span>
</span><span class="line"><span class="n">x86</span><span class="o">-</span><span class="n">paidapp</span><span class="o">-</span><span class="n">release</span>
</span><span class="line"><span class="n">arm</span><span class="o">-</span><span class="n">paidapp</span><span class="o">-</span><span class="n">debug</span>
</span><span class="line"><span class="n">arm</span><span class="o">-</span><span class="n">paidapp</span><span class="o">-</span><span class="n">release</span>
</span><span class="line"><span class="n">mips</span><span class="o">-</span><span class="n">paidapp</span><span class="o">-</span><span class="n">debug</span>
</span><span class="line"><span class="n">mips</span><span class="o">-</span><span class="n">paidapp</span><span class="o">-</span><span class="n">release</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The order of the group as defined by <code>android.flavorGroups</code> is very important.</p>

<p>Each variant is configured by several Product Flavor objects:
<code>android.defaultConfig</code>
One from the <code>abi</code> group
One from the <code>version</code> group</p>

<p>The order of the group drives which flavor override the other, which is important for resources when a value in a flavor replaces a value defined in a lower priority flavor.</p>

<p>The flavor groups is defined with higher priority first. So in this case:
<code>abi &gt; version &gt; defaultConfig</code></p>

<p>Multi-flavors projects also have additional sourcesets, similar to the variant sourcesets but without the build type:</p>

<p><code>android.sourceSets.x86Freeapp</code>   Location <code>src/x86Freeapp/</code>       <br />
<code>android.sourceSets.armPaidapp</code>   Location <code>src/armPaidapp/</code>      <br />
<code>etc...</code></p>

<p><strong>These allow customization at the flavor-combination level. They have higher priority than the basic flavor sourcesets, but lower priority than the build type sourcesets.</strong></p>

<h3 id="advanced-build-customization">Advanced Build Customization</h3>

<h4 id="build-options">Build options</h4>

<h5 id="java-compilation-options">Java Compilation options</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="n">compileOptions</span> <span class="o">{</span>
</span><span class="line">        <span class="n">sourceCompatibility</span> <span class="o">=</span> <span class="s">&quot;1.6&quot;</span>
</span><span class="line">        <span class="n">targetCompatibility</span> <span class="o">=</span> <span class="s">&quot;1.6&quot;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Default value is “1.6”. This affect all tasks compiling Java source code.</p>

<h5 id="aapt-options">aapt options</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="n">aaptOptions</span> <span class="o">{</span>
</span><span class="line">        <span class="n">noCompress</span> <span class="err">&#39;</span><span class="n">foo</span><span class="err">&#39;</span><span class="o">,</span> <span class="err">&#39;</span><span class="n">bar</span><span class="err">&#39;</span>
</span><span class="line">        <span class="n">ignoreAssetsPattern</span> <span class="s">&quot;!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir&gt;_*:!CVS:!thumbs.db:!picasa.ini:!*~&quot;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This affects all tasks using aapt.</p>

<h5 id="dex-options">dex options</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="n">dexOptions</span> <span class="o">{</span>
</span><span class="line">        <span class="n">incremental</span> <span class="kc">false</span>
</span><span class="line">        <span class="n">preDexLibraries</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class="line">        <span class="n">jumboMode</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This affects all tasks using dex.</p>

<h5 id="manipulating-tasks">Manipulating tasks</h5>

<p>[简单的Java项目一般都是有限的任务一起工作然后得到一个输出，例如<code>classes</code> 任务是用来编译Java源代码的任务，在<code>build.gradle</code> 文件中可以使用<code>classes</code> 来引用]</p>

<p>Basic Java projects have a finite set of tasks that all work together to create an output.</p>

<p>The <code>classes</code> task is the one that compile the Java source code.
It’s easy to access from <code>build.gradle</code> by simply using <code>classes</code> in a script. This is a shortcut for <code>project.tasks.classes</code>.</p>

<p>[但是Android项目优点复杂，因为它可能有很多相同的任务，这些任务的名称是基于build type和product flavor来生成的]</p>

<p>In Android projects, this is a bit more complicated because there could be a large number of the same task and their name is generated based on the Build Types and Product Flavors.</p>

<p>In order to fix this, the android object has two properties:</p>

<p><code>applicationVariants</code> (only for the app plugin)      <br />
<code>libraryVariants</code> (only for the library plugin)     <br />
<code>testVariants</code> (for both plugins)        </p>

<p>All three return a <code>DomainObjectCollection</code> of <code>ApplicationVariant</code>, <code>LibraryVariant</code>, and <code>TestVariant</code> objects respectively.</p>

<p>Note that accessing any of these collections will trigger the creations of all the tasks. This means no (re)configuration should take place after accessing the collections.</p>

<p>The <code>DomainObjectCollection</code> gives access to all the objects directly, or through filters which can be convenient.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">android</span><span class="o">.</span><span class="na">applicationVariants</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">variant</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="o">....</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>All three variant classes share the following properties:</p>

<p><img src="http://hujiaweibujidao.github.io/images/gradle4.png" alt="image" /></p>

<p>The ApplicationVariant class adds the following:</p>

<p><img src="http://hujiaweibujidao.github.io/images/gradle5.png" alt="image" /></p>

<p>The LibraryVariant class adds the following:</p>

<p><img src="http://hujiaweibujidao.github.io/images/gradle6.png" alt="image" /></p>

<p>The TestVariant class adds the following:</p>

<p><img src="http://hujiaweibujidao.github.io/images/gradle7.png" alt="image" /></p>

<p>API for Android specific task types.</p>

<p><img src="http://hujiaweibujidao.github.io/images/gradle8.png" alt="image" /></p>

<p><strong>The API for each task type is limited due to both <code>how Gradle works</code> and <code>how the Android plugin sets them up</code>.</strong></p>

<p>1 First, Gradle is meant to have the tasks be only configured for <code>input/output</code> location and possible optional flags. So here, the tasks only define (some of) the inputs/outputs.</p>

<p>2 Second, the input for most of those tasks is non-trivial, often coming from mixing values from the sourceSets, the Build Types, and the Product Flavors. To keep build files simple to read and understand, the goal is to let developers modify the build by tweak these objects through the DSL, rather than diving deep in the inputs and options of the tasks and changing them.</p>

<p><strong>Also note, that except for the <code>ZipAlign</code> task type, all other types require setting up <code>private data</code> to make them work. This means it’s not possible to manually create new tasks of these types.</strong></p>

<p>[除了ZipAlign任务之外，其他类型的任务都需要private data才能工作，所以没有办法manual创建这些类型的新任务]</p>

<p><strong>This API is subject to change.</strong> In general the current API is around giving access to the outputs and inputs (when possible) of the tasks to add extra processing when required). Feedback is appreciated, especially around needs that may not have been foreseen.</p>

<p>For Gradle tasks (<code>DefaultTask</code>, <code>JavaCompile</code>, <code>Copy</code>, <code>Zip</code>), refer to the Gradle documentation.</p>

<h4 id="buildtype-and-product-flavor-property-reference">BuildType and Product Flavor property reference</h4>

<p>coming soon.</p>

<p>For Gradle tasks (<code>DefaultTask</code>, <code>JavaCompile</code>, <code>Copy</code>, <code>Zip</code>), refer to the Gradle documentation.</p>

<h4 id="using-sourcecompatibility-17">Using sourceCompatibility 1.7</h4>

<p>[兼容JDK 1.7的方式，使用某些特性时还需要注意项目<code>minSdkVersion</code> 的配置]</p>

<p>With <code>Android KitKat (buildToolsVersion 19)</code> you can use the <code>diamond operator</code>, <code>multi-catch</code>, <code>strings in switches</code>, <code>try with resources</code>, etc. To do this, add the following to your build file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="n">compileSdkVersion</span> <span class="mi">19</span>
</span><span class="line">    <span class="n">buildToolsVersion</span> <span class="s">&quot;19.0.0&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="n">defaultConfig</span> <span class="o">{</span>
</span><span class="line">        <span class="n">minSdkVersion</span> <span class="mi">7</span>
</span><span class="line">        <span class="n">targetSdkVersion</span> <span class="mi">19</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">compileOptions</span> <span class="o">{</span>
</span><span class="line">        <span class="n">sourceCompatibility</span> <span class="n">JavaVersion</span><span class="o">.</span><span class="na">VERSION_1_7</span>
</span><span class="line">        <span class="n">targetCompatibility</span> <span class="n">JavaVersion</span><span class="o">.</span><span class="na">VERSION_1_7</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note that you can use <code>minSdkVersion</code> with a value earlier than 19, for all language features except <code>try with resources</code>. If you want to use <code>try with resources</code>, you will need to also use a <code>minSdkVersion</code> of 19.</p>

<p>You also need to make sure that Gradle is using version 1.7 or later of the JDK. (And version 0.6.1 or later of the Android Gradle plugin.)</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/10/15/gradle-plugin-user-guide-2/">http://hujiaweibujidao.github.io/blog/2014/10/15/gradle-plugin-user-guide-2/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle Plugin for Android Development User Guide (1)]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/10/13/gradle-plugin-user-guide-1/"/>
    <updated>2014-10-13T21:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/10/13/gradle-plugin-user-guide-1</id>
    <content type="html"><![CDATA[<p>Gradle Plugin for Android Development User Guide (1)</p>

<p>终于有点时间可以学学一直打算了解的Gradle，毕竟打算以后在移动开发这条路上走到黑的话就要与时俱进，首先自然得用Google推荐的Android Studio，就目前来看，它除了还未完全支持NDK之外，很多方面都是完爆Eclipse+ADT Plugin的，而新的构建系统Gradle更是不能不了解的内容，于是找了些有用的资料开始上手看。如果你一般都是进行常规的Android SDK的开发而且对Gradle没啥兴趣的话那么直接看这篇官网教程就行了<a href="http://developer.android.com/sdk/installing/studio-build.html">http://developer.android.com/sdk/installing/studio-build.html</a>。</p>

<p>而本篇文章来自<a href="http://tools.android.com/">http://tools.android.com/</a>的<code>Gradle Plugin User Guide</code>我想应该是最好的读物了，于是细细地通读了一下，边读边注解，注意不是翻译，因为宝贵的时间有限而且原文并不难懂，所以只能是挑重要的内容注解一下，以便以后用到的时候能够更快的检索到重要信息。</p>

<p>文中标有<code>[?]</code>的地方表示我没有理解，如有理解了的或者文中有任何错误烦请留言告知，不胜感激！</p>

<p>原文地址：<a href="http://tools.android.com/tech-docs/new-build-system/user-guide">http://tools.android.com/tech-docs/new-build-system/user-guide</a></p>

<p>因为注解完之后文章变得特别长，所以分成2部分，第二部分地址：<a href="http://hujiaweibujidao.github.io/blog/2014/10/15/gradle-plugin-user-guide-2/">http://hujiaweibujidao.github.io/blog/2014/10/15/gradle-plugin-user-guide-2</a></p>

<h3 id="introduction">Introduction</h3>

<p>This documentation is for the Gradle plugin version 0.9. Earlier versions may differ due to non-compatible we are introducing before 1.0.</p>

<h3 id="goals-of-the-new-build-system">Goals of the new Build System</h3>

<p>The goals of the new build system are: </p>

<p>Make it easy to reuse code and resources     <br />
Make it easy to create several variants of an application, either for multi-apk distribution or for different flavors of an application    <br />
Make it easy to configure, extend and customize the build process   <br />
Good IDE integration    </p>

<h3 id="why-gradle">Why Gradle?</h3>

<p>Gradle is an advanced build system as well as an advanced build toolkit allowing to create custom build logic through plugins.</p>

<p>Here are some of its features that made us choose Gradle:      </p>

<p>Domain Specific Language (DSL) to describe and manipulate the build logic    <br />
Build files are Groovy based and allow mixing of declarative elements through the DSL and using code to manipulate the DSL elements to provide custom logic.    <br />
Built-in dependency management through Maven and/or Ivy.     <br />
Very flexible. Allows using best practices but doesn’t force its own way of doing things.     <br />
Plugins can expose their own DSL and their own API for build files to use.
Good Tooling API allowing IDE integration      </p>

<p>[总结起来就是：DSL(Domain Specific Language ) + Groovy based Build files + Maven/Ivy based Dependency Management + Plugin Supported]</p>

<h3 id="requirements">Requirements</h3>

<p>Gradle 1.10 or 1.11 or 1.12 with the plugin 0.11.1    <br />
SDK with Build Tools 19.0.0. Some features may require a more recent version.</p>

<h3 id="basic-project">Basic Project</h3>

<p>A Gradle project describes its build in a file called <code>build.gradle</code> located in the root folder of the project.</p>

<h4 id="simple-build-files">Simple build files</h4>

<p>The most simple Java-only project has the following <code>build.gradle</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="err">&#39;</span><span class="n">java</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This applies the Java plugin, which is packaged with Gradle. The plugin provides everything to build and test Java applications.</p>

<p>The most simple Android project has the following <code>build.gradle</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">buildscript</span> <span class="o">{</span>
</span><span class="line">    <span class="n">repositories</span> <span class="o">{</span>
</span><span class="line">        <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class="line">        <span class="n">classpath</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">tools</span><span class="o">.</span><span class="na">build</span><span class="o">:</span><span class="nl">gradle:</span><span class="mf">0.11</span><span class="o">.</span><span class="mi">1</span><span class="err">&#39;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="err">&#39;</span><span class="n">android</span><span class="err">&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="n">compileSdkVersion</span> <span class="mi">19</span>
</span><span class="line">    <span class="n">buildToolsVersion</span> <span class="s">&quot;19.0.0&quot;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There are 3 main areas to this Android build file:</p>

<p>(1) <code>buildscript { ... }</code> configures the code driving the build.
In this case, this declares that it uses the Maven Central repository, and that there is a classpath dependency on a Maven artifact. This artifact is the library that contains the Android plugin for Gradle in version 0.11.1</p>

<p><strong>Note: This only affects the code running the build, not the project. The project itself needs to declare its own repositories and dependencies. This will be covered later.</strong></p>

<p>[注意：这里定义的repository和dependency只是build需要的，项目还需要定义自己的repository和dependency]</p>

<p>(2) Then, the android plugin is applied like the Java plugin earlier.</p>

<p>(3) Finally, <code>android { ... } </code>configures all the parameters for the android build. This is the entry point for the Android DSL.</p>

<p><strong>By default, only the compilation target, and the version of the build-tools are needed. This is done with the compileSdkVersion and buildtoolsVersion properties.</strong></p>

<p>[默认情况下，只有编译目标和编译工具的版本号是必须要给定的。以前的build系统需要在项目的根目录下的<code>project.properties</code> 文件中指定<code>target</code> (例如<code>target=android-18</code>)，它对应的就是这里的 <code>compilation target</code>，不过此处的值只是一个int值，代表Android API version]</p>

<p>The compilation target is the same as the target property in the <code>project.properties</code> file of the old build system. This new property can either be assigned a int (the api level) or a string with the same value as the previous target property.</p>

<p><strong>Important: You should only apply the android plugin. Applying the java plugin as well will result in a build error.</strong></p>

<p>[注意：这里只能使用android插件，写成java插件会出现build错误]</p>

<p>Note: You will also need a <code>local.properties</code> file to set the location of the SDK in the same way that the existing SDK requires, using the <code>sdk.dir</code> property.</p>

<p>Alternatively, you can set an environment variable called <code>ANDROID_HOME</code>. There is no differences between the two methods, you can use the one you prefer.</p>

<p>关于设置Android SDK的位置有两种方式：</p>

<p>（1）在项目根目录的<code>local.properties</code> 文件中指定<code>sdk.dir</code> 的值，如果包含ndk的话同时还要指定<code>ndk.dir</code> 的值</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">sdk</span><span class="o">.</span><span class="na">dir</span><span class="o">=/</span><span class="n">Volumes</span><span class="o">/</span><span class="n">hujiawei</span><span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">hujiawei</span><span class="o">/</span><span class="n">Android</span><span class="o">/</span><span class="n">android_sdk</span>
</span><span class="line"><span class="n">ndk</span><span class="o">.</span><span class="na">dir</span><span class="o">=/</span><span class="n">Volumes</span><span class="o">/</span><span class="n">hujiawei</span><span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">hujiawei</span><span class="o">/</span><span class="n">Android</span><span class="o">/</span><span class="n">android_ndk</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>（2）在系统中设置环境变量<code>ANDROID_HOME</code></p>

<h4 id="project-structure">Project Structure</h4>

<p>The basic build files above expect a default folder structure. Gradle follows the concept of convention over configuration, providing sensible default option values when possible.    </p>

<p>[Gradle遵循大家约定俗成的Android项目目录结构和项目配置，一个基本的项目开始时包含了两个源码集合，即main source code和test source code，它们各自的源码目录下有分别包含了Java source code和Java resource] </p>

<p>The basic project starts with two components called <code>“source sets”</code>. The main source code and the test code. These live respectively in:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="o">/</span>
</span><span class="line"><span class="n">src</span><span class="o">/</span><span class="n">androidTest</span><span class="o">/</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Inside each of these folders exists folder for each source components.
For both the Java and Android plugin, the location of the Java source code and the Java resources:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">java</span><span class="o">/</span>
</span><span class="line"><span class="n">resources</span><span class="o">/</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For the Android plugin, extra files and folders specific to Android:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">AndroidManifest</span><span class="o">.</span><span class="na">xml</span>
</span><span class="line"><span class="n">res</span><span class="o">/</span>
</span><span class="line"><span class="n">assets</span><span class="o">/</span>
</span><span class="line"><span class="n">aidl</span><span class="o">/</span>
</span><span class="line"><span class="n">rs</span><span class="o">/</span>
</span><span class="line"><span class="n">jni</span><span class="o">/</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note: <code>src/androidTest/AndroidManifest.xml</code> is not needed as it is created automatically.</p>

<p>[Android插件对于Android项目还指定了一些其他的目录，注意test目录下的<code>AndroidManifest.xml</code> 文件不需要提供，因为它会自动创建，后面会提到为什么]</p>

<h4 id="configuring-the-structure">Configuring the Structure</h4>

<p>[当我们的项目原本的目录结构和上面默认的目录结构不同时，我们可以进行配置，使用<code>sourceSets</code> 节点来修改目录结构]</p>

<p>When the default project structure isn’t adequate, it is possible to configure it. According to the Gradle documentation, reconfiguring the <code>sourceSets</code> for a Java project can be done with the following:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">sourceSets</span> <span class="o">{</span>
</span><span class="line">    <span class="n">main</span> <span class="o">{</span>
</span><span class="line">        <span class="n">java</span> <span class="o">{</span>
</span><span class="line">            <span class="n">srcDir</span> <span class="err">&#39;</span><span class="n">src</span><span class="o">/</span><span class="n">java</span><span class="err">&#39;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="n">resources</span> <span class="o">{</span>
</span><span class="line">            <span class="n">srcDir</span> <span class="err">&#39;</span><span class="n">src</span><span class="o">/</span><span class="n">resources</span><span class="err">&#39;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Note: srcDir will actually add the given folder to the existing list of source folders (this is not mentioned in the Gradle documentation but this is actually the behavior).</strong></p>

<p>[<code>srcDir</code> 会自动将给定的目录加入到默认的已有的源码目录列表中，然而<code>srcDirs</code> 会覆盖默认的源码目录设置]</p>

<p>To replace the default source folders, you will want to use <code>srcDirs</code> instead, which takes an array of path. This also shows a different way of using the objects involved:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">sourceSets</span> <span class="o">{</span>
</span><span class="line">    <span class="n">main</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="err">&#39;</span><span class="n">src</span><span class="o">/</span><span class="n">java</span><span class="err">&#39;</span><span class="o">]</span>
</span><span class="line">    <span class="n">main</span><span class="o">.</span><span class="na">resources</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="err">&#39;</span><span class="n">src</span><span class="o">/</span><span class="n">resources</span><span class="err">&#39;</span><span class="o">]</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For more information, see the Gradle documentation on the <a href="http://www.gradle.org/docs/current/userguide/java_plugin.html">Java plugin here</a>.</p>

<p>[Android插件使用和上面相似的语法来完成配置，只不过它的<code>sourceSets</code> 节点是定义在 <code>android</code> 中的]</p>

<p>The Android plugin uses a similar syntaxes, but because it uses its own <code>sourceSets</code>, this is done within the <code>android</code> object.</p>

<p>Here’s an example, using the old project structure for the main code and remapping the <code>androidTest</code> sourceSet to the <code>tests</code> folder:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="n">sourceSets</span> <span class="o">{</span>
</span><span class="line">        <span class="n">main</span> <span class="o">{</span>
</span><span class="line">            <span class="n">manifest</span><span class="o">.</span><span class="na">srcFile</span> <span class="err">&#39;</span><span class="n">AndroidManifest</span><span class="o">.</span><span class="na">xml</span><span class="err">&#39;</span>
</span><span class="line">            <span class="n">java</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="err">&#39;</span><span class="n">src</span><span class="err">&#39;</span><span class="o">]</span>
</span><span class="line">            <span class="n">resources</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="err">&#39;</span><span class="n">src</span><span class="err">&#39;</span><span class="o">]</span>
</span><span class="line">            <span class="n">aidl</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="err">&#39;</span><span class="n">src</span><span class="err">&#39;</span><span class="o">]</span>
</span><span class="line">            <span class="n">renderscript</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="err">&#39;</span><span class="n">src</span><span class="err">&#39;</span><span class="o">]</span>
</span><span class="line">            <span class="n">res</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="err">&#39;</span><span class="n">res</span><span class="err">&#39;</span><span class="o">]</span>
</span><span class="line">            <span class="n">assets</span><span class="o">.</span><span class="na">srcDirs</span> <span class="o">=</span> <span class="o">[</span><span class="err">&#39;</span><span class="n">assets</span><span class="err">&#39;</span><span class="o">]</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="n">androidTest</span><span class="o">.</span><span class="na">setRoot</span><span class="o">(</span><span class="err">&#39;</span><span class="n">tests</span><span class="err">&#39;</span><span class="o">)</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note: because the old structure put all source files (java, aidl, renderscript, and java resources) in the same folder, we need to remap all those new components of the sourceSet to the same src folder.</p>

<p>[<code>setRoot()</code> 会将整个sourceSet包括其中的子目录一起移动到新的目录中，这是Android插件特定的，Java插件没有此功能]</p>

<p>Note: <code>setRoot()</code> moves the whole sourceSet (and its sub folders) to a new folder. This moves <code>src/androidTest/*</code> to <code>tests/*</code></p>

<p>This is Android specific and will not work on Java sourceSets.</p>

<p>The ‘migrated’ sample shows this. [?]</p>

<h3 id="build-tasks">Build Tasks</h3>

<h4 id="general-tasks">General Tasks</h4>

<p>[使用plugin的好处是它会自动地帮我们创建一些默认的build task]</p>

<p>Applying a plugin to the build file automatically creates a set of build tasks to run. Both the Java plugin and the Android plugin do this.</p>

<p>The convention for tasks is the following: [下面是默认的build tasks]</p>

<p><code>assemble</code>   The task to assemble the output(s) of the project     <br />
<code>check</code>   The task to run all the checks.     <br />
<code>build</code>   This task does both assemble and check    <br />
<code>clean</code>    This task cleans the output of the project        </p>

<p><strong>[任务assemble，check，build实际上什么都没有做，它们只是anchor task，需要添加实际的task它们才知道如何工作，这样的话就可以不管你是什么类型的项目都可以调用相同名称的build task。例如如果使用了<code>findbugs</code> 插件的话，它会自动创建一个新的task，而且check task会依赖它，也就有是说，每当check task执行的时候，这个新的task都会被调用而执行]</strong></p>

<p><strong>The tasks assemble, check and build don’t actually do anything. They are anchor tasks for the plugins to add actual tasks that do the work.</strong></p>

<p>This allows you to always call the same task(s) no matter what the type of project is, or what plugins are applied.</p>

<p>For instance, applying the <code>findbugs</code> plugin will create a new task and make <code>check</code> depend on it, making it be called whenever the <code>check</code> task is called.</p>

<p>From the command line you can get the high level task running the following command:   <code>gradle tasks</code>    <br />
For a full list and seeing dependencies between the tasks run:  <code>gradle tasks --all</code></p>

<p>[在Android Studio的Terminal中运行结果如下]</p>

<p><img src="http://hujiaweibujidao.github.io/images/gradle1.png" alt="image" /></p>

<p>Note: Gradle automatically monitor the declared inputs and outputs of a task. Running the build twice without change will make Gradle report all tasks as UP-TO-DATE, meaning no work was required. This allows tasks to properly depend on each other without requiring unneeded build operations. </p>

<p><strong>[Gradle会监视一个任务的输入和输出，重复运行build结果都没有变化的话Gradle会提示所有的任务都是UP-TO-DATE，这样可以避免不必要的build操作]</strong></p>

<h4 id="java-project-tasks">Java project tasks</h4>

<p>[Java插件主要创建了两个新的task，其中<code>jar</code> task是<code>assemble</code> task的依赖项，<code>test</code> task是<code>check</code> task的依赖项]</p>

<p>The Java plugin creates mainly two tasks, that are dependencies of the main anchor tasks:</p>

<p><code>assemble</code>  -&gt;   <code>jar</code>   This task creates the output.     <br />
<code>check</code>  -&gt;    <code>test</code>  This task runs the tests.       </p>

<p><strong>[任务jar直接或者间接地依赖其他的任务，例如用来编译Java代码的任务<code>classes</code>； 测试代码是由<code>testClasses</code> 任务来编译的，但是你不需要去调用这个task，因为<code>test</code> 任务依赖于<code>testClasses</code> 和 <code>classes</code> 任务]</strong></p>

<p>The <code>jar</code> task itself will depend directly and indirectly on other tasks: <code>classes</code> for instance will compile the Java code. </p>

<p>** The tests are compiled with <code>testClasses</code>, but it is rarely useful to call this as <code>test</code> depends on it (as well as <code>classes</code>). **</p>

<p>In general, you will probably only ever call <code>assemble</code> or <code>check</code>, and ignore the other tasks.</p>

<p>You can see the full set of tasks and their descriptions for the <a href="http://gradle.org/docs/current/userguide/java_plugin.html">Java plugin here</a>.</p>

<h4 id="android-tasks">Android tasks</h4>

<p>The Android plugin use the same convention to stay compatible with other plugins, and adds an additional anchor task:</p>

<p><code>assemble</code>    The task to assemble the output(s) of the project      <br />
<code>check</code>   The task to run all the checks.          <br />
<code>connectedCheck</code>   Runs checks that requires a connected device or emulator, they will run on all connected devices in parallel. <strong>[在已连接的设备和模拟器上并行运行check任务]</strong>              <br />
<code>deviceCheck</code>   Runs checks using APIs to connect to remote devices. This is used on CI servers.  <strong>[使用APIs来连接远程设备以运行check任务]</strong>                         <br />
<code>build</code>   This task does both assemble and check     <br />
<code>clean</code>    This task cleans the output of the project</p>

<p>The new anchor tasks are necessary in order to be able to run regular checks without needing a connected device.Note that build does not depend on deviceCheck, or connectedCheck.</p>

<p><strong>[任务build并不依赖deviceCheck和connectedCheck这两个任务]</strong></p>

<p>An Android project has at least two outputs: a debug APK and a release APK. Each of these has its own anchor task to facilitate building them separately:</p>

<p>[Android项目至少有两个输出：一个debug模式的APK，另一个是release模式deAPK，每种模式都有自己的anchor task以便于将它们的build过程分开]</p>

<p><code>assemble</code>   <br />
<code>assembleDebug</code>    <br />
<code>assembleRelease</code>     </p>

<p>They both depend on other tasks that execute the multiple steps needed to build an APK. The <code>assemble</code> task depends on both, so calling it will build both APKs.</p>

<p><strong>Tip: Gradle support camel case shortcuts for task names on the command line.</strong> </p>

<p>[Gradle支持在命令行中使用某个task的名称的camel case缩写调用这个task]</p>

<p>For instance:   <code>gradle aR</code>  is the same as typing  <code>gradle assembleRelease</code>，as long as no other task match <code>‘aR’</code></p>

<p>The <code>check</code> anchor tasks have their own dependencies:</p>

<p><code>check</code>      <br />
<code>lint</code>    <br />
<code>connectedCheck</code>    <br />
<code>connectedAndroidTest</code>    <br />
<code>connectedUiAutomatorTest </code>(not implemented yet)    <br />
<code>deviceCheck</code>      </p>

<p>This depends on tasks created when other plugins implement test extension points.</p>

<p><strong>Finally, the plugin creates <code>install/uninstall</code> tasks for all build types (debug, release, test), as long as they can be installed (which requires signing).</strong></p>

<p>[Android插件还会对所有build type创建它们的<code>install/uninstall</code> 任务，只要它们可以被安装，安装需要签名]</p>

<h3 id="basic-build-customization">Basic Build Customization</h3>

<p>The Android plugin provides a broad DSL to customize most things directly from the build system.</p>

<h4 id="manifest-entries">Manifest entries</h4>

<p>[通过DSL我们可以在<code>build.gradle</code> 文件中指定那些定义在AndroidManifest文件中的内容，不过能够指定的内容有限]</p>

<p>Through the DSL it is possible to configure the following manifest entries:</p>

<p><code>minSdkVersion</code>    <br />
<code>targetSdkVersion</code>   <br />
<code>versionCode</code>   <br />
<code>versionName</code>   <br />
<code>applicationId</code> (the effective packageName – see <a href="http://tools.android.com/tech-docs/new-build-system/applicationid-vs-packagename">ApplicationId versus PackageName</a> for more information)    <br />
<code>Package Name</code> for the test application   <br />
<code>Instrumentation test runner</code>     </p>

<p>Example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="n">compileSdkVersion</span> <span class="mi">19</span>
</span><span class="line">    <span class="n">buildToolsVersion</span> <span class="s">&quot;19.0.0&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="n">defaultConfig</span> <span class="o">{</span>
</span><span class="line">        <span class="n">versionCode</span> <span class="mi">12</span>
</span><span class="line">        <span class="n">versionName</span> <span class="s">&quot;2.0&quot;</span>
</span><span class="line">        <span class="n">minSdkVersion</span> <span class="mi">16</span>
</span><span class="line">        <span class="n">targetSdkVersion</span> <span class="mi">16</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>defaultConfig</code> element inside the android element is where all this configuration is defined.</p>

<p><strong>Previous versions of the Android Plugin used <code>packageName</code> to configure the manifest ‘packageName’ attribute. Starting in 0.11.0, you should use <code>applicationId</code> in the <code>build.gradle</code> to configure the manifest ‘packageName’ entry. This was disambiguated to reduce confusion between the application’s packageName (which is its ID) and java packages.</strong></p>

<p>[从Gradle Plugin 0.11.0 版本开始在<code>build.gradle</code> 文件中使用<code>applicationId</code> 而不是 <code>packageName</code> 来指定AndroidManifest文件中的<code>packageName</code>]</p>

<p>The power of describing it in the build file is that it can be dynamic.
For instance, one could be reading the version name from a file somewhere or using some custom logic:</p>

<p>[将上面那些内容定义在build文件中的魔力就在于它们可以是动态的，如下所示]</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">def</span> <span class="nf">computeVersionName</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="n">compileSdkVersion</span> <span class="mi">19</span>
</span><span class="line">    <span class="n">buildToolsVersion</span> <span class="s">&quot;19.0.0&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="n">defaultConfig</span> <span class="o">{</span>
</span><span class="line">        <span class="n">versionCode</span> <span class="mi">12</span>
</span><span class="line">        <span class="n">versionName</span> <span class="nf">computeVersionName</span><span class="o">()</span>
</span><span class="line">        <span class="n">minSdkVersion</span> <span class="mi">16</span>
</span><span class="line">        <span class="n">targetSdkVersion</span> <span class="mi">16</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>[注意不要使用当前域中已有的getter方法作为自定义的函数名，否则会发生冲突]</p>

<p><strong>Note: Do not use function names that could conflict with existing getters in the given scope. For instance instance <code>defaultConfig { ...}</code> calling <code>getVersionName()</code> will automatically use the getter of <code>defaultConfig.getVersionName()</code> instead of the custom method.</strong></p>

<p>If a property is not set through the DSL, some default value will be used. Here’s a table of how this is processed.</p>

<p><img src="http://hujiaweibujidao.github.io/images/gradle2.png" alt="image" /></p>

<p><strong>[第2列是当你在build script中使用自定义逻辑去查询第1列元素对应的默认结果，如果结果不是你想要的话，你可以指定另一个结果，但是在build时如果这个结果是null的话，build系统就会使用第3列中的结果]</strong></p>

<p>The value of the 2nd column is important if you use custom logic in the build script that queries these properties. For instance, you could write:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="k">if</span> <span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">defaultConfig</span><span class="o">.</span><span class="na">testInstrumentationRunner</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="c1">// assign a better default...</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If the value remains null, then it is replaced at build time by the actual default from column 3, but the DSL element does not contain this default value so you can’t query against it.</p>

<p>This is to prevent parsing the manifest of the application unless it’s really needed. </p>

<h4 id="build-types">Build Types</h4>

<p>[默认情况下，Android插件会自动将原项目编译成debug和release两个版本，它们的区别在于调试程序的功能和APK的签名方式。debug版本使用<code>key/certificate</code> 来签名，而release版本在build过程中并不签名，它的签名过程发生在后面。Android插件允许我们自定义build type]</p>

<p>By default, the Android plugin automatically sets up the project to build both a debug and a release version of the application.</p>

<p><strong>These differ mostly around the ability to debug the application on a secure (non dev) devices, and how the APK is signed.</strong></p>

<p><strong>The debug version is signed with a <code>key/certificate</code> that is created automatically with a known <code>name/password</code> (to prevent required prompt during the build). The release is not signed during the build, this needs to happen after.</strong></p>

<p>This configuration is done through an object called a <code>BuildType</code>. By default, 2 instances are created, a <code>debug</code> and a <code>release</code> one.</p>

<p>The Android plugin allows customizing those two instances as well as creating other Build Types. This is done with the <code>buildTypes</code> DSL container:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="n">buildTypes</span> <span class="o">{</span>
</span><span class="line">        <span class="n">debug</span> <span class="o">{</span>
</span><span class="line">            <span class="n">applicationIdSuffix</span> <span class="s">&quot;.debug&quot;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="n">jnidebug</span><span class="o">.</span><span class="na">initWith</span><span class="o">(</span><span class="n">buildTypes</span><span class="o">.</span><span class="na">debug</span><span class="o">)</span>
</span><span class="line">        <span class="n">jnidebug</span> <span class="o">{</span>
</span><span class="line">            <span class="n">packageNameSuffix</span> <span class="s">&quot;.jnidebug&quot;</span>
</span><span class="line">            <span class="n">jnidebugBuild</span> <span class="kc">true</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The above snippet achieves the following:</p>

<p>Configures the default debug Build Type:</p>

<p>(1) set its package to be <code>&lt;app appliationId&gt;.debug</code> to be able to install both debug and release apk on the same device</p>

<p>(2) Creates a new BuildType called jnidebug and configure it to be a copy of the debug build type.</p>

<p>(3) Keep configuring the jnidebug, by enabling debug build of the JNI component, and add a different package suffix.</p>

<p>[在buildTypes容器中创建一个新的build type很简单，要么调用<code>initWith()</code> 方法继承自某个build type或者直接使用花括号来配置它]</p>

<p>Creating new Build Types is as easy as using a new element under the buildTypes container, either to call <code>initWith()</code> or to configure it with a closure.</p>

<p>The possible properties and their default values are:</p>

<p><img src="http://hujiaweibujidao.github.io/images/gradle3.png" alt="image" /></p>

<p>In addition to these properties, Build Types can contribute to the build with code and resources.</p>

<p><strong>[对于每个build type都会生成一个对应的<code>sourceSet</code>，默认的位置是<code>src/&lt;buildtypename&gt;/</code> ，所以build type的名称不能是<code>main</code>或者<code>androidTest</code>，而且它们相互之间不能重名]</strong></p>

<p>For each Build Type, a new matching <code>sourceSet</code> is created, with a default location of  <code>src/&lt;buildtypename&gt;/</code></p>

<p>This means the Build Type names cannot be main or androidTest (this is enforced by the plugin), and that they have to be unique to each other.</p>

<p>Like any other source sets, the location of the build type source set can be relocated:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="n">sourceSets</span><span class="o">.</span><span class="na">jnidebug</span><span class="o">.</span><span class="na">setRoot</span><span class="o">(</span><span class="err">&#39;</span><span class="n">foo</span><span class="o">/</span><span class="n">jnidebug</span><span class="err">&#39;</span><span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>[类似其他的sourceSet，build type的source set的位置也可以重新定义，此外，对于每个build type，都会自动创建一个名为<code>assemble&lt;BuildTypeName&gt;</code> 的任务，而且自动称为<code>assemble</code> 任务的依赖项]</p>

<p>Additionally, for each Build Type, a new <code>assemble&lt;BuildTypeName&gt;</code> task is created.</p>

<p>The <code>assembleDebug</code> and <code>assembleRelease</code> tasks have already been mentioned, and this is where they come from. When the debug and release Build Types are pre-created, their tasks are automatically created as well.</p>

<p>The <code>build.gradle</code> snippet above would then also generate an <code>assembleJnidebug</code> task, and <code>assemble</code> would be made to depend on it the same way it depends on the <code>assembleDebug</code> and <code>assembleRelease</code> tasks.</p>

<p>Tip: remember that you can type gradle aJ to run the assembleJnidebug task.</p>

<p>Possible use case: [使用场景]</p>

<p>Permissions in debug mode only, but not in release mode    <br />
Custom implementation for debugging   <br />
Different resources for debug mode (for instance when a resource value is tied to the signing certificate).      </p>

<p><strong>[build type的code/resources的处理过程: (1)Manifest整合进app的Manifest; (2)code就作为另一个源码目录; (3)resources覆盖原有的main resources]</strong></p>

<p>The code/resources of the BuildType are used in the following way:</p>

<p>The manifest is merged into the app manifest    <br />
The code acts as just another source folder   <br />
The resources are overlayed over the main resources, replacing existing values.</p>

<h4 id="signing-configurations">Signing Configurations</h4>

<p>Signing an application requires the following: </p>

<p>A keystore    <br />
A keystore password   <br />
A key alias name   <br />
A key password   <br />
The store type     </p>

<p>The location, as well as the key name, both passwords and store type form together a Signing Configuration (type <code>SigningConfig</code>)     </p>

<p><strong>[对一个应用程序进行签名需要5个信息，这些信息组合起来就是类型SigningConfig。默认情况下，debug的配置使用了一个已知密码的keystore和已知密码的默认key，其中的keystore保存在<code>$HOME/.android/debug.keystore</code> 文件中，如果没有的话它会自动被创建]</strong></p>

<p>By default, there is a <code>debug</code> configuration that is setup to use a debug keystore, with a known password and a default key with a known password.The debug keystore is located in <code>$HOME/.android/debug.keystore</code>, and is created if not present.</p>

<p>The debug Build Type is set to use this debug SigningConfig automatically.It is possible to create other configurations or customize the default built-in one. This is done through the signingConfigs DSL container:</p>

<p>[默认情况下，debug的build过程会自动使用debug SigningConfig，当然我们可以自己定义]</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="n">signingConfigs</span> <span class="o">{</span>
</span><span class="line">        <span class="n">debug</span> <span class="o">{</span>
</span><span class="line">            <span class="n">storeFile</span> <span class="nf">file</span><span class="o">(</span><span class="s">&quot;debug.keystore&quot;</span><span class="o">)</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="n">myConfig</span> <span class="o">{</span>
</span><span class="line">            <span class="n">storeFile</span> <span class="nf">file</span><span class="o">(</span><span class="s">&quot;other.keystore&quot;</span><span class="o">)</span>
</span><span class="line">            <span class="n">storePassword</span> <span class="s">&quot;android&quot;</span>
</span><span class="line">            <span class="n">keyAlias</span> <span class="s">&quot;androiddebugkey&quot;</span>
</span><span class="line">            <span class="n">keyPassword</span> <span class="s">&quot;android&quot;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">buildTypes</span> <span class="o">{</span>
</span><span class="line">        <span class="n">foo</span> <span class="o">{</span>
</span><span class="line">            <span class="n">debuggable</span> <span class="kc">true</span>
</span><span class="line">            <span class="n">jniDebugBuild</span> <span class="kc">true</span>
</span><span class="line">            <span class="n">signingConfig</span> <span class="n">signingConfigs</span><span class="o">.</span><span class="na">myConfig</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The above snippet changes the location of the debug keystore to be at the root of the project. This automatically impacts any Build Types that are set to using it, in this case the debug Build Type.</p>

<p>It also creates a new Signing Config and a new Build Type that uses the new configuration.</p>

<p><strong>[只有当debug keystore是放在默认的位置，即使修改了keystore文件的名称，keystore也会被自动创建，但是如果改变了默认位置的话则不会被自动创建。此外，设置keystore的位置一般使用相对于项目根目录的路径，虽然也可以使用绝对路径，但是并不推荐这样做]</strong></p>

<p>Note: Only debug keystores located in the default location will be automatically created. Changing the location of the debug keystore will not create it on-demand. Creating a SigningConfig with a different name that uses the default debug keystore location will create it automatically. In other words, it’s tied to the location of the keystore, not the name of the configuration.</p>

<p>Note: Location of keystores are usually relative to the root of the project, but could be absolute paths, though it is not recommended (except for the debug one since it is automatically created).</p>

<p>Note:  If you are checking these files into version control, you may not want the password in the file. The following Stack Overflow post shows ways to read the values from the console, or from environment variables.
http://stackoverflow.com/questions/18328730/how-to-create-a-release-signed-apk-file-using-gradle</p>

<p>We’ll update this guide with more detailed information later.</p>

<h4 id="running-proguard">Running ProGuard</h4>

<p>[对ProGuard的支持是通过Gradle plugin for ProGuard 4.10来实现的，给build type添加<code>runProguard</code> 属性即可自动生成相应的task]</p>

<p>ProGuard is supported through the Gradle plugin for ProGuard version 4.10. </p>

<p>The ProGuard plugin is applied automatically, and the tasks are created automatically if the Build Type is configured to run ProGuard through the <code>runProguard</code> property.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="n">buildTypes</span> <span class="o">{</span>
</span><span class="line">        <span class="n">release</span> <span class="o">{</span>
</span><span class="line">            <span class="n">runProguard</span> <span class="kc">true</span>
</span><span class="line">            <span class="n">proguardFile</span> <span class="nf">getDefaultProguardFile</span><span class="o">(</span><span class="err">&#39;</span><span class="n">proguard</span><span class="o">-</span><span class="n">android</span><span class="o">.</span><span class="na">txt</span><span class="err">&#39;</span><span class="o">)</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">productFlavors</span> <span class="o">{</span>
</span><span class="line">        <span class="n">flavor1</span> <span class="o">{</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="n">flavor2</span> <span class="o">{</span>
</span><span class="line">            <span class="n">proguardFile</span> <span class="err">&#39;</span><span class="n">some</span><span class="o">-</span><span class="n">other</span><span class="o">-</span><span class="n">rules</span><span class="o">.</span><span class="na">txt</span><span class="err">&#39;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Variants use all the rules files declared in their build type, and product flavors.</p>

<p><strong>[默认情况下有两个proguard rule 文件，它们存放在Android SDK目录中，默认是<code>$ANDROID_HOME/tools/proguard/</code> 目录下 ，使用<code>getDefaultProguardFile()</code> 可以得到它们的完整路径]</strong></p>

<p>There are 2 default rules files </p>

<p><code>proguard-android.txt</code>     <br />
<code>proguard-android-optimize.txt</code>        </p>

<p>They are located in the SDK. Using <code>getDefaultProguardFile()</code> will return the full path to the files. They are identical except for enabling optimizations.</p>

<h3 id="dependencies-android-libraries-and-multi-project-setup">Dependencies, Android Libraries and Multi-project setup</h3>

<p>Gradle projects can have dependencies on other components. These components can be external binary packages, or other Gradle projects.</p>

<h4 id="dependencies-on-binary-packages">Dependencies on binary packages</h4>

<h4 id="local-packages">Local packages</h4>

<p>To configure a dependency on an external library jar, you need to add a dependency on the <code>compile</code> configuration.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">dependencies</span> <span class="o">{</span>
</span><span class="line">    <span class="n">compile</span> <span class="nf">files</span><span class="o">(</span><span class="err">&#39;</span><span class="n">libs</span><span class="o">/</span><span class="n">foo</span><span class="o">.</span><span class="na">jar</span><span class="err">&#39;</span><span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>[注意dependencies是标准Gradle API的一部分，所以不是在android元素中声明]</p>

<p><strong>Note: the dependencies DSL element is part of the standard Gradle API and does not belong inside the android element.</strong></p>

<p>[<code>compile</code> 的配置是用来编译main application的，所以其中的所有元素都会加入到编译的类路径中，同样也会打包进最终的APK中]</p>

<p><strong>The <code>compile</code> configuration is used to compile the main application. Everything in it is added to the compilation classpath and also packaged in the final APK.</strong></p>

<p>There are other possible configurations to add dependencies to:</p>

<p><code>compile</code>: main application     <br />
<code>androidTestCompile</code>: test application    <br />
<code>debugCompile</code>: debug Build Type    <br />
<code>releaseCompile</code>: release Build Type.      </p>

<p><strong>[对应每个build type都有一个对应的<code>&lt;buildtype&gt;Compile</code>， 它们的dependencies也都可以自行定义使其不同。如果希望不同的build type表现出不同的结果时，我们便可以使用这种方式让它们依赖不同的library]</strong></p>

<p>Because it’s not possible to build an APK that does not have an associated Build Type, the APK is always configured with two (or more) configurations: <code>compile</code> and <code>&lt;buildtype&gt;Compile</code>.</p>

<p>Creating a new Build Type automatically creates a new configuration based on its name.</p>

<p>This can be useful if the debug version needs to use a custom library (to report crashes for instance), while the release doesn’t, or if they rely on different versions of the same library.</p>

<h4 id="remote-artifacts">Remote artifacts</h4>

<p>[Gradle支持Maven和Ivy资源库]</p>

<p>Gradle supports pulling artifacts from Maven and Ivy repositories.</p>

<p>First the repository must be added to the list, and then the dependency must be declared in a way that Maven or Ivy declare their artifacts.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">repositories</span> <span class="o">{</span>
</span><span class="line">    <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">dependencies</span> <span class="o">{</span>
</span><span class="line">    <span class="n">compile</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">guava</span><span class="o">:</span><span class="nl">guava:</span><span class="mf">11.0</span><span class="o">.</span><span class="mi">2</span><span class="err">&#39;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>[<code>mavenCentral()</code> 方法返回的就是Maven Repository的URL，Gradle同时支持remote 和 local repositories，此外，Gradle能够处理dependency之间的相互依赖，然后自动pull所需要的dependencies]</strong></p>

<p>Note: <code>mavenCentral()</code> is a shortcut to specifying the URL of the repository. Gradle supports both remote and local repositories.</p>

<p>Note: Gradle will follow all dependencies transitively. This means that if a dependency has dependencies of its own, those are pulled in as well.</p>

<p>For more information about setting up dependencies, read the <a href="http://gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html">Gradle user guide here</a>, and <a href="http://gradle.org/docs/current/dsl/org.gradle.api.artifacts.dsl.DependencyHandler.html">DSL documentation here</a>.</p>

<h4 id="multi-project-setup">Multi project setup</h4>

<p>[使用multi-project setup可以使得Gradle项目依赖其他的Gradle项目，它通常是通过将所有的项目作为某个指定的根项目的子目录来实现的。]</p>

<p>Gradle projects can also depend on other gradle projects by using a multi-project setup.</p>

<p>A multi-project setup usually works by having all the projects as sub folders of a given root project.</p>

<p>For instance, given to following structure:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">MyProject</span><span class="o">/</span>
</span><span class="line"> <span class="o">+</span> <span class="n">app</span><span class="o">/</span>
</span><span class="line"> <span class="o">+</span> <span class="n">libraries</span><span class="o">/</span>
</span><span class="line">    <span class="o">+</span> <span class="n">lib1</span><span class="o">/</span>
</span><span class="line">    <span class="o">+</span> <span class="n">lib2</span><span class="o">/</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We can identify 3 projects. Gradle will reference them with the following name:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="o">:</span><span class="n">app</span>
</span><span class="line"><span class="o">:</span><span class="nl">libraries:</span><span class="n">lib1</span>
</span><span class="line"><span class="o">:</span><span class="nl">libraries:</span><span class="n">lib2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Each projects will have its own <code>build.gradle</code> declaring how it gets built. Additionally, there will be a file called <code>settings.gradle</code> at the root declaring the projects.</strong></p>

<p>[每个项目都有自己的<code>build.gradle</code> 文件声明它的build过程，此外，根项目下还有一个<code>settings.gradle</code> 文件用来指定这些子项目]</p>

<p>This gives the following structure:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">MyProject</span><span class="o">/</span>
</span><span class="line"> <span class="o">|</span> <span class="n">settings</span><span class="o">.</span><span class="na">gradle</span>
</span><span class="line"> <span class="o">+</span> <span class="n">app</span><span class="o">/</span>
</span><span class="line">    <span class="o">|</span> <span class="n">build</span><span class="o">.</span><span class="na">gradle</span>
</span><span class="line"> <span class="o">+</span> <span class="n">libraries</span><span class="o">/</span>
</span><span class="line">    <span class="o">+</span> <span class="n">lib1</span><span class="o">/</span>
</span><span class="line">       <span class="o">|</span> <span class="n">build</span><span class="o">.</span><span class="na">gradle</span>
</span><span class="line">    <span class="o">+</span> <span class="n">lib2</span><span class="o">/</span>
</span><span class="line">       <span class="o">|</span> <span class="n">build</span><span class="o">.</span><span class="na">gradle</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The content of <code>settings.gradle</code> is very simple:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">include</span> <span class="err">&#39;</span><span class="o">:</span><span class="n">app</span><span class="err">&#39;</span><span class="o">,</span> <span class="err">&#39;</span><span class="o">:</span><span class="nl">libraries:</span><span class="n">lib1</span><span class="err">&#39;</span><span class="o">,</span> <span class="err">&#39;</span><span class="o">:</span><span class="nl">libraries:</span><span class="n">lib2</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This defines which folder is actually a Gradle project. [它声明了哪个目录是一个Gradle项目]</p>

<p>The <code>:app</code> project is likely to depend on the libraries, and this is done by declaring the following dependencies:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">dependencies</span> <span class="o">{</span>
</span><span class="line">    <span class="n">compile</span> <span class="nf">project</span><span class="o">(</span><span class="err">&#39;</span><span class="o">:</span><span class="nl">libraries:</span><span class="n">lib1</span><span class="err">&#39;</span><span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>More general information about <a href="http://gradle.org/docs/current/userguide/multi_project_builds.html">multi-project setup here</a>.</p>

<h4 id="library-projects">Library projects</h4>

<p><strong>[如果前面例子中的两个library projects都是Java项目的话，那么app这个Android项目就使用它们的输出jar文件即可，但是如果你需要引用library project中的资源或者代码的话，那它们必须是Android Library Projects]</strong></p>

<p>In the above multi-project setup, <code>:libraries:lib1</code> and <code>:libraries:lib2</code> can be Java projects, and the <code>:app</code> Android project will use their jar output.</p>

<p>However, if you want to share code that accesses Android APIs or uses Android-style resources, these libraries cannot be regular Java project, they have to be <code>Android Library Projects</code>.</p>

<h4 id="creating-a-library-project">Creating a Library Project</h4>

<p>A Library project is very similar to a regular Android project with a few differences.</p>

<p>Since building libraries is different than building applications, a different plugin is used. Internally both plugins share most of the same code and they are both provided by the same <code>com.android.tools.build.gradle</code> jar.</p>

<p><strong>[创建Library Project使用的是不同的插件，即<code>android-library</code>，它和<code>android</code> 插件共享很多的代码(所以大部分的配置都和前面提到的一模一样)，并且这个插件的源码也是在<code>com.android.tools.build.gradle</code> 这个jar包中]</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">buildscript</span> <span class="o">{</span>
</span><span class="line">    <span class="n">repositories</span> <span class="o">{</span>
</span><span class="line">        <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class="line">        <span class="n">classpath</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">tools</span><span class="o">.</span><span class="na">build</span><span class="o">:</span><span class="nl">gradle:</span><span class="mf">0.5</span><span class="o">.</span><span class="mi">6</span><span class="err">&#39;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="n">apply</span> <span class="nl">plugin:</span> <span class="err">&#39;</span><span class="n">android</span><span class="o">-</span><span class="n">library</span><span class="err">&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="n">compileSdkVersion</span> <span class="mi">15</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This creates a library project that uses API 15 to compile. SourceSets, and dependencies are handled the same as they are in an application project and can be customized the same way.</p>

<h4 id="differences-between-a-project-and-a-library-project">Differences between a Project and a Library Project</h4>

<p><strong>[一个Library Project的主要输出是一个aar包，它是编译后的代码与资源的集合，它同样可以生成test apk来独立地测试这个library。Library Project和普通Project的assemble task是一样的，所以它们的behave没啥区别。此外，因为它可以有不同的build type和product flavor，所以它可以得到很多个不同的aar]</strong></p>

<p>A Library project’s main output is an .aar package (which stands for Android archive). It is a combination of compile code (as a jar file and/or native .so files) and resources (manifest, res, assets).</p>

<p>**A library project can also generate a test apk to test the library independently from an application. **</p>

<p>The same anchor tasks are used for this (<code>assembleDebug</code>, <code>assembleRelease</code>) so there’s no difference in commands to build such a project.</p>

<p>For the rest, libraries behave the same as application projects. <strong>They have build types and product flavors, and can potentially generate more than one version of the aar.</strong></p>

<p>[大多数的build type的配置都不会应用于Library Project中，当然它还是可以进行配置的]</p>

<p><strong>Note that most of the configuration of the Build Type do not apply to library projects. However you can use the custom sourceSet to change the content of the library depending on whether it’s used by a project or being tested.</strong></p>

<h4 id="referencing-a-library">Referencing a Library</h4>

<p>Referencing a library is done the same way any other project is referenced:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">dependencies</span> <span class="o">{</span>
</span><span class="line">    <span class="n">compile</span> <span class="nf">project</span><span class="o">(</span><span class="err">&#39;</span><span class="o">:</span><span class="nl">libraries:</span><span class="n">lib1</span><span class="err">&#39;</span><span class="o">)</span>
</span><span class="line">    <span class="n">compile</span> <span class="nf">project</span><span class="o">(</span><span class="err">&#39;</span><span class="o">:</span><span class="nl">libraries:</span><span class="n">lib2</span><span class="err">&#39;</span><span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note: if you have more than one library, then the order will be important. This is similar to the old build system where the order of the dependencies in the <code>project.properties</code> file was important.  </p>

<p>[注：如果你有很多的library projects，那么你要根据它们相互之间的依赖关系确定一个正确的顺序，就类似以前build系统中的<code>project.properties</code> 文件一样，以前需要如下地声明<code>android.library.reference</code>]</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">android</span><span class="o">.</span><span class="na">library</span><span class="o">.</span><span class="na">reference</span><span class="o">.</span><span class="mi">1</span><span class="o">=</span><span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">libraryproject</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="library-publication">Library Publication</h4>

<p>[默认情况下，library project只会publish它的release variant，所有其他的project都是引用这个variant，但是你还是可以通过配置<code>defaultPublishConfig</code> 控制将哪个variant进行publish，而且你也可以设置为publish所有variant]</p>

<p>By default a library only publishes its release variant. This variant will be used by all projects referencing the library, no matter which variant they build themselves. This is a temporary limitation due to Gradle limitations that we are working towards removing.</p>

<p>You can control which variant gets published with </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="n">defaultPublishConfig</span> <span class="s">&quot;debug&quot;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>**Note that this publishing configuration name references the full variant name. Release and debug are only applicable when there are no flavors. ** If you wanted to change the default published variant while using flavors, you would write:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="n">defaultPublishConfig</span> <span class="s">&quot;flavor1Debug&quot;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>It is also possible to publish all variants of a library. We are planning to allow this while using a normal project-to-project dependency (like shown above), but this is not possible right now due to limitations in Gradle (we are working toward fixing those as well).</strong></p>

<p>Publishing of all variants are not enabled by default. To enable them:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">android</span> <span class="o">{</span>
</span><span class="line">    <span class="n">publishNonDefault</span> <span class="kc">true</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It is important to realize that publishing multiple variants means publishing multiple aar files, instead of a single aar containing multiple variants. Each aar packaging contains a single variant.</p>

<p>[publish一个variant意味着使得这个aar包作为Gradle项目的输出，它可以用于publish到maven repository，也可以被其他项目作为依赖项目被引用]</p>

<p><strong>Publishing an variant means making this aar available as an output artifact of the Gradle project. This can then be used either when publishing to a maven repository, or when another project creates a dependency on the library project.</strong></p>

<p>Gradle has a concept of default” artifact. This is the one that is used when writing:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">compile</span> <span class="nf">project</span><span class="o">(</span><span class="err">&#39;</span><span class="o">:</span><span class="nl">libraries:</span><span class="n">lib2</span><span class="err">&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To create a dependency on another published artifact, you need to specify which one to use:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">dependencies</span> <span class="o">{</span>
</span><span class="line">    <span class="n">flavor1Compile</span> <span class="nf">project</span><span class="o">(</span><span class="nl">path:</span> <span class="err">&#39;</span><span class="o">:</span><span class="n">lib1</span><span class="err">&#39;</span><span class="o">,</span> <span class="nl">configuration:</span> <span class="err">&#39;</span><span class="n">flavor1Release</span><span class="err">&#39;</span><span class="o">)</span>
</span><span class="line">    <span class="n">flavor2Compile</span> <span class="nf">project</span><span class="o">(</span><span class="nl">path:</span> <span class="err">&#39;</span><span class="o">:</span><span class="n">lib1</span><span class="err">&#39;</span><span class="o">,</span> <span class="nl">configuration:</span> <span class="err">&#39;</span><span class="n">flavor2Release</span><span class="err">&#39;</span><span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Important: Note that the published configuration is a full variant, including the build type, and needs to be referenced as such. </p>

<p><strong>Important: When enabling publishing of non default, the Maven publishing plugin will publish these additional variants as extra packages (with classifier). This means that this is not really compatible with publishing to a maven repository. You should either publish a single variant to a repository OR enable all config publishing for inter-project dependencies.</strong> [?]</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/10/13/gradle-plugin-user-guide-1/">http://hujiaweibujidao.github.io/blog/2014/10/13/gradle-plugin-user-guide-1/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootcamp an open source Django site]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/09/16/bootcamp-an-open-source-django-site/"/>
    <updated>2014-09-16T17:57:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/09/16/bootcamp-an-open-source-django-site</id>
    <content type="html"><![CDATA[<p>最近接了一个项目，用Django开发一个网站，于是打算看看用Django开发的开源网站，推荐一个网站 <a href="https://www.djangosites.org/with-source/">djangosites</a>，上面有大量用django开发的网站源码。最后我找到了Bootcamp，一个包含了Feed、Article和QA三部分的社交网站，界面简洁大方，功能基本齐全，相当适合我这个新手拿来学习</p>

<p>试用Bootcamp网址： <a href="http://trybootcamp.vitorfs.com/">http://trybootcamp.vitorfs.com/</a></p>

<p>Bootcamp源码： <a href="https://github.com/vitorfs/bootcamp">https://github.com/vitorfs/bootcamp</a></p>

<p>Bootcamp安装说明： <a href="https://github.com/vitorfs/bootcamp/wiki/Installing-and-Running-Bootcamp">https://github.com/vitorfs/bootcamp/wiki/Installing-and-Running-Bootcamp</a></p>

<p>安装过程很简单，以下是我安装过程中遇到的一些问题和关键步骤：</p>

<p>(1)安装psycopg2报错 <code>Error: pg_config executable not found.</code></p>

<p>参考网址： <a href="http://stackoverflow.com/questions/11618898/pg-config-executable-not-found">http://stackoverflow.com/questions/11618898/pg-config-executable-not-found</a></p>

<p>解决方案：<code>brew install postgresql</code></p>

<p>(2)新建文件<code>.env</code>，配置数据库为mysql</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">DEBUG</span><span class="o">=</span><span class="bp">True</span>
</span><span class="line"><span class="n">SECRET_KEY</span><span class="o">=</span><span class="s">&#39;mys3cr3tk3y&#39;</span>
</span><span class="line"><span class="n">DATABASE_URL</span><span class="o">=</span><span class="s">&#39;mysql://root:@localhost/bootcamp&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(3)同步数据库，运行 <code>python manage.py syncdb</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">hujiawei</span><span class="o">-</span><span class="n">MacBook</span><span class="o">-</span><span class="n">Pro</span><span class="p">:</span><span class="n">bootcamp</span> <span class="n">hujiawei</span><span class="err">$</span> <span class="n">python</span> <span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">syncdb</span>
</span><span class="line"><span class="n">Syncing</span><span class="o">...</span>
</span><span class="line"><span class="n">Creating</span> <span class="n">tables</span> <span class="o">...</span>
</span><span class="line"><span class="n">Creating</span> <span class="n">table</span> <span class="n">auth_permission</span> <span class="o">...</span>
</span><span class="line">
</span><span class="line"><span class="n">You</span> <span class="n">just</span> <span class="n">installed</span> <span class="n">Django</span><span class="s">&#39;s auth system, which means you don&#39;</span><span class="n">t</span> <span class="n">have</span> <span class="nb">any</span> <span class="n">superusers</span> <span class="n">defined</span><span class="o">.</span>
</span><span class="line"><span class="n">Would</span> <span class="n">you</span> <span class="n">like</span> <span class="n">to</span> <span class="n">create</span> <span class="n">one</span> <span class="n">now</span><span class="err">?</span> <span class="p">(</span><span class="n">yes</span><span class="o">/</span><span class="n">no</span><span class="p">):</span> <span class="n">yes</span>
</span><span class="line"><span class="n">Username</span> <span class="p">(</span><span class="n">leave</span> <span class="n">blank</span> <span class="n">to</span> <span class="n">use</span> <span class="s">&#39;hujiawei&#39;</span><span class="p">):</span> <span class="n">hujiawei</span>
</span><span class="line"><span class="n">Email</span> <span class="n">address</span><span class="p">:</span> <span class="o">...</span>
</span><span class="line"><span class="n">Installing</span> <span class="n">indexes</span> <span class="o">...</span>
</span><span class="line"><span class="n">Installed</span> <span class="mi">0</span> <span class="nb">object</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="kn">from</span> <span class="mi">0</span> <span class="n">fixture</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">Synced</span><span class="p">:</span>
</span><span class="line"> <span class="o">&gt;</span> <span class="n">django</span><span class="o">.</span><span class="n">contrib</span><span class="o">.</span><span class="n">auth</span> <span class="o">...</span>
</span><span class="line">
</span><span class="line"><span class="n">Not</span> <span class="n">synced</span> <span class="p">(</span><span class="n">use</span> <span class="n">migrations</span><span class="p">):</span>
</span><span class="line"> <span class="o">-</span>
</span><span class="line"><span class="p">(</span><span class="n">use</span> <span class="o">./</span><span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">migrate</span> <span class="n">to</span> <span class="n">migrate</span> <span class="n">these</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(4)除去项目中的google痕迹，加速页面的加载</p>

<p><code>base.html</code>中删除<code>ga.js</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="c">&lt;!--</span>
</span><span class="line"><span class="c">&lt;script src=&quot;js/ga.js&quot;&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="c">--&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>static/css/bootcamp.css</code>中修改字体库url，改成360的CDN</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">@import url(http://fonts.useso.com/css?family=Audiowide);
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>网站界面如下：</p>

<p><img src="http://hujiaweibujidao.github.io/images/others/bootcamp.png" alt="image" /></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/09/16/bootcamp-an-open-source-django-site/">http://hujiaweibujidao.github.io/blog/2014/09/16/bootcamp-an-open-source-django-site/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Download Coursera Courses in the Fastest Way]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/07/12/download-coursera-courses-in-the-fastest-way/"/>
    <updated>2014-07-12T12:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/07/12/download-coursera-courses-in-the-fastest-way</id>
    <content type="html"><![CDATA[<p>大家估计都上过C站的课吧？每个人都有自己的学习方式和下载方式，或许是看一节下一节，或者一次性全部下载，或者其他的方式等等。我是一个性子比较急的人，学东西喜欢一次性学完，所以我基本上没有去追C站的课程，都只是开课前加入，结课后我开始下载课程资料然后开始学习，嘿嘿，下面是我个人的C站课程一次性下载一门课程所有课程资源的方式，觉得还行特意共享一下</p>

<p>1.使用Firefox浏览器，安装<a href="http://www.downthemall.net/">DownloadThemAll扩展插件</a></p>

<p>2.修改下DownloadThemAll扩展插件的配置</p>

<p>添加两个Filter：一个<code>CourseraVedio</code>，内容是<code>download.mp4?</code>，用于过滤得到课程视频文件；另一个<code>CourseraSubtitls</code>，内容是<code>subtitles?</code>，用于过滤得到课程视频对应的字幕文件</p>

<p>3.进入课程的Video Lectures页面，点击<code>DownloadThemAll! Tools</code>下的<code>DownloadThemAll!</code>，选中新创建的两个filter再加上前面的<code>Documents</code>过滤器，然后选择一个目录点击<code>Start</code>就可以了，下载速度都是超快的哟！</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/07/12/download-coursera-courses-in-the-fastest-way/">http://hujiaweibujidao.github.io/blog/2014/07/12/download-coursera-courses-in-the-fastest-way/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Algorithms - C9 Graphs]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-graphs/"/>
    <updated>2014-07-01T11:30:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-graphs</id>
    <content type="html"><![CDATA[<p>最后更新时间：2014-7-7</p>

<p><strong><center>Python算法设计篇(9)</center></strong>
<strong><center>逸夫图书馆, 2014/7/1</center></strong></p>

<h3 id="centerchapter-9-from-a-to-b-with-edsger-and-friendscenter"><center>Chapter 9: From A to B with Edsger and Friends</center></h3>

<blockquote>
  <p>The shortest distance between two points is under construction.    <br />
  ——Noelie Altito</p>
</blockquote>

<p>本节主要介绍图算法中的各种最短路径算法，从不同的角度揭示它们的内核以及它们的异同</p>

<p>在前面的内容里我们已经介绍了图的表示方法(邻接矩阵和“各种”邻接表)、图的遍历(DFS和BFS)、图中的一些基本算法(基于DFS的拓扑排序和有向无环图的强连通分量、最小生成树的Prim和Kruskal算法等)，剩下的就是图算法中的各种最短路径算法，也就是本节的主要内容。</p>

<p>[The shortest path problem comes in several varieties. For example, you can find shortest paths (just like any other kinds of paths) in both directed and undirected graphs. The most important distinctions, though, stem from your starting points and destinations. Do you want to find the shortest from one node to all others (single source)? From one node to another (single pair, one to one, point to point)? From all nodes to one (single destination)? From all nodes to all others (all pairs)? Two of these—single source and all pairs—are perhaps the most important. Although we have some tricks for the single pair problem (see “Meeting in the middle” and “Knowing where you’re going,” later), there are no guarantees that will let us solve that problem any faster than the general single source problem. The single destination problem is, of course, equivalent (just flip the edges for the directed case). The all pairs problem can be tackled by using each node as a single source (and we’ll look into that), but there are special-purpose algorithms for that problem as well.]</p>

<p>最短路径问题有很多的变种，比如我们是处理有向图还是无向图上的最短路径问题呢？此外，各个问题之间最大的区别在于起点和终点。这个问题是从一个节点到所有其他节点的最短路径吗(单源最短路径)？还是从一个节点到另一个节点的最短路径(单对节点间最短路径)？还是从所有其他节点到某一个节点(多源最短路径)？还是求任何两个节点之间的最短路径(所有节点对最短路径)？</p>

<p>其中单源最短路径和所有节点对最短路径是最常见的问题类型，其他问题大致可以将其转化成这两类问题。虽然单对节点间最短路径问题有一些求解的技巧(“Meeting in the middle” and “Knowing where you’re going,”)，但是该问题并没有比单源最短路径问题的解法快到哪里去，所以单对节点间最短路径问题可以就用单源最短路径问题的算法去求解；而多源点单终点的最短路径问题可以将边反转过来看成是单源最短路径问题；至于所有节点对最短路径问题，可以对图中的每个节点使用单源最短路径来求解，但是对于这个问题还有一些特殊的更好的算法可以解决。</p>

<p>在开始介绍各种算法之前，作者给出了图中的几个重要结论或者性质，此处附上原文</p>

<p>assume that we start in node s and that we initialize D[s] to zero, while all other distance estimates are set to infinity. Let d(u,v) be the length of the shortest path from u to v.</p>

<p>• d(s,v) &lt;= d(s,u) + W[u,v]. This is an example of the triangle inequality.</p>

<p>• d(s,v) &lt;= D[v]. For v other than s, D[v] is initially infinite, and we reduce it only
when we find actual shortcuts. We never “cheat,” so it remains an upper bound.</p>

<p>• If there is no path to node v, then relaxing will never get D[v] below infinity. That’s
because we’ll never find any shortcuts to improve D[v].</p>

<p>• Assumeashortestpathtovisformedbyapathfromstouandanedgefromutov. Now, if D[u] is correct at any time before relaxing the edge from u to v, then D[v] is correct at all times afterward. The path defined by P[v] will also be correct.</p>

<p>• Let [s, a, b, … , z, v] be a shortest path from s to v. Assume all the edges (s,a), (a,b), … , (z,v) in the path have been relaxed in order. Then D[v] and P[v] will be correct. It doesn’t matter if other relax operations have been performed in between.</p>

<p>[最后这个是路径松弛性质，也就是后面的Bellman-Ford算法的核心]</p>

<p>对于单对节点间最短路径问题，如果每条边的权值都一样(或者说边一样长)的话，使用前面的BFS就可以得到结果了(<a href="http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-traversal/">第5节遍历中介绍了</a>)；如果图是有向无环图，那么我们还可以用前面动规中的DAG最短路径算法来求解(<a href="http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-dynamic-programming/">第8节动态规划中介绍了</a>)，但是，现实中的图总是有环的，边的权值也总是不同，而且可能有负权值，所以我们还需要其他的算法！</p>

<p>首先我们来实现下<a href="http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-induction/">之前学过的松弛技术relaxtion</a>，代码中D保存各个节点到源点的距离值估计(上界值)，P保存节点的最短路径上的前驱节点，W保存边的权值，其中不存在的边的权值为inf。松弛就是说，假设节点 u 和节点 v 事先都有一个最短距离的估计(例如测试代码中的7和13)，如果现在要松弛边(u,v)，也就是对从节点 u 通过边(u,v)到达节点 v，将这条路径得到节点 v 的距离估计值(7+3=10)和原来的节点 v 的距离估计值(13)进行比较，如果前者更小的话，就表示我们可以放弃在这之前确定的从源点到节点 v 的最短路径，改成从源点到节点 u，然后节点 u 再到节点 v，这条路线距离会更短些，这也就是发生了一次松弛！(测试代码中10&lt;13，所以要进行松弛，此时D[v]变成10，而它的前驱节点也变成了 u)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#relaxtion</span>
</span><span class="line"><span class="n">inf</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s">&#39;inf&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">def</span> <span class="nf">relax</span><span class="p">(</span><span class="n">W</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">D</span><span class="p">,</span> <span class="n">P</span><span class="p">):</span>
</span><span class="line">    <span class="n">d</span> <span class="o">=</span> <span class="n">D</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">u</span><span class="p">,</span><span class="n">inf</span><span class="p">)</span> <span class="o">+</span> <span class="n">W</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">]</span>                  <span class="c"># Possible shortcut estimate</span>
</span><span class="line">    <span class="k">if</span> <span class="n">d</span> <span class="o">&lt;</span> <span class="n">D</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="n">inf</span><span class="p">):</span>                        <span class="c"># Is it really a shortcut?</span>
</span><span class="line">        <span class="n">D</span><span class="p">[</span><span class="n">v</span><span class="p">],</span> <span class="n">P</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">d</span><span class="p">,</span> <span class="n">u</span>                       <span class="c"># Update estimate and parent</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">True</span>                             <span class="c"># There was a change!</span>
</span><span class="line">
</span><span class="line"><span class="c">#测试代码</span>
</span><span class="line"><span class="n">u</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">v</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line"><span class="n">D</span><span class="p">,</span> <span class="n">W</span><span class="p">,</span> <span class="n">P</span> <span class="o">=</span> <span class="p">{},</span> <span class="p">{</span><span class="n">u</span><span class="p">:{</span><span class="n">v</span><span class="p">:</span><span class="mi">3</span><span class="p">}},</span> <span class="p">{}</span>
</span><span class="line"><span class="n">D</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">=</span> <span class="mi">7</span>
</span><span class="line"><span class="n">D</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="mi">13</span>
</span><span class="line"><span class="k">print</span> <span class="n">D</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="c"># 7</span>
</span><span class="line"><span class="k">print</span> <span class="n">D</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="c"># 13</span>
</span><span class="line"><span class="k">print</span> <span class="n">W</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="c"># 3</span>
</span><span class="line"><span class="n">relax</span><span class="p">(</span><span class="n">W</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">D</span><span class="p">,</span> <span class="n">P</span><span class="p">)</span> <span class="c"># True</span>
</span><span class="line"><span class="k">print</span> <span class="n">D</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="c"># 10</span>
</span><span class="line"><span class="n">D</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="mi">8</span>
</span><span class="line"><span class="n">relax</span><span class="p">(</span><span class="n">W</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">D</span><span class="p">,</span> <span class="n">P</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="n">D</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="c"># 8</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>显然，如果你随机地对边进行松弛，那么与该边有关的节点的距离估计值就会慢慢地变得更加准确，这样的改进会在整个图中进行传播，如果一直这么松弛下去的话，最终整个图所有节点的距离值都不会发生变化的时候我们就得到了从源点到所有节点的最短路径值。</p>

<p><strong>每次松弛可以看作是向最终解前进了“一步”，我们的目标自然是希望松弛的次数越少越好，关键就是要确定松弛的次数和松弛的顺序</strong>(好的松弛顺序可以让我们直接朝着最优解前进，缩短算法运行时间)，后面要介绍的图中的Bellman-Ford算法、Dijkstra算法以及DAG上的最短路径问题都是如此。</p>

<p>现在我们考虑一个问题，如果我们对图中的所有边都松弛一遍会怎样？可能部分顶点的距离估计值有所减小对吧，那如果再对图中的所有边都松弛一遍又会怎样呢？可能又有部分顶点的距离估计值有所减小对吧，那到底什么时候才会没有改进呢？到底什么时候可以停止了呢？</p>

<p>这个问题可以这么想，假设从源点 s 到节点 v 的最短路径是<code>p=&lt;v0, v1, v2, v3 ... vk&gt;</code>，此时v0=s, vk=v，那除了源点 s 之外，这条路径总共经过了其他 k 个顶点对吧，k 肯定小于 (V-1) 对吧，也就是说从节点 s 到节点 v 要经过一条最多只有(V-1)条边的路径，因为每遍松弛都是松弛所有边，那么肯定会松弛路径p 中的所有边，我们可以保险地认为第 i 次循环松弛了边<script type="math/tex">% &lt;![CDATA[
<v_{i-1}, v_{i}> %]]&gt;</script>，这样的话经过 k 次松弛遍历，我们肯定能够得到节点 v 的最短路径值，再根据这条路径最多只有(V-1)条边，也就说明了我们最多只要循环地对图中的所有边都松弛(V-1)遍就可以得到所有节点的最短路径值！上面的思路就是Bellman-Ford算法了，时间复杂度是$O(VE)$。</p>

<p>下面看下算法导论上的Bellman-Ford算法的示例图</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/bellmanford.png" alt="image" /></p>

<p>[上图的解释，需要注意的是，如果边的松弛顺序不同，可能中间得到的结果不同，但是最后的结果都是一样的：The execution of the Bellman-Ford algorithm. The source is vertex s. The d values are shown within the vertices, and shaded edges indicate predecessor values: if edge (u, v) is shaded, then π[v] = u. In this particular example, each pass relaxes the edges in the order (t, x), (t, y), (t, z), (x, t), (y, x), (y, z), (z, x), (z, s), (s, t), (s, y). (a) The situation just before the first pass over the edges. (b)-(e) The situation after each successive pass over the edges. The d and π values in part (e) are the final values. The Bellman-Ford algorithm returns TRUE in this example.]</p>

<p>上面的分析很好，但是我们漏考虑了一个关键问题，那就是如果图中存在负权回路的话不论我们松弛多少遍，图中有些节点的最短路径值都还是会减小，所以我们在 (V-1) 次松弛遍历之后再松弛遍历一次，如果还有节点的最短路径减小的话就说明图中存在负权回路！这就引出了Bellman-Ford算法的一个重要作用：判断图中是否存在负权回路。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#Bellman-Ford算法</span>
</span><span class="line"><span class="k">def</span> <span class="nf">bellman_ford</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
</span><span class="line">    <span class="n">D</span><span class="p">,</span> <span class="n">P</span> <span class="o">=</span> <span class="p">{</span><span class="n">s</span><span class="p">:</span><span class="mi">0</span><span class="p">},</span> <span class="p">{}</span>                            <span class="c"># Zero-dist to s; no parents</span>
</span><span class="line">    <span class="k">for</span> <span class="n">rnd</span> <span class="ow">in</span> <span class="n">G</span><span class="p">:</span>                               <span class="c"># n = len(G) rounds</span>
</span><span class="line">        <span class="n">changed</span> <span class="o">=</span> <span class="bp">False</span>                         <span class="c"># No changes in round so far</span>
</span><span class="line">        <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">G</span><span class="p">:</span>                             <span class="c"># For every from-node...</span>
</span><span class="line">            <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">G</span><span class="p">[</span><span class="n">u</span><span class="p">]:</span>                      <span class="c"># ... and its to-nodes...</span>
</span><span class="line">                <span class="k">if</span> <span class="n">relax</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">D</span><span class="p">,</span> <span class="n">P</span><span class="p">):</span>        <span class="c"># Shortcut to v from u?</span>
</span><span class="line">                    <span class="n">changed</span> <span class="o">=</span> <span class="bp">True</span>              <span class="c"># Yes! So something changed</span>
</span><span class="line">        <span class="k">if</span> <span class="ow">not</span> <span class="n">changed</span><span class="p">:</span> <span class="k">break</span>                   <span class="c"># No change in round: Done</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>                                       <span class="c"># Not done before round n?</span>
</span><span class="line">        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&#39;negative cycle&#39;</span><span class="p">)</span>      <span class="c"># Negative cycle detected</span>
</span><span class="line">    <span class="k">return</span> <span class="n">D</span><span class="p">,</span> <span class="n">P</span>                                 <span class="c"># Otherwise: D and P correct</span>
</span><span class="line">
</span><span class="line"><span class="c">#测试代码</span>
</span><span class="line"><span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class="line"><span class="n">W</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="n">s</span><span class="p">:</span> <span class="p">{</span><span class="n">t</span><span class="p">:</span><span class="mi">6</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span><span class="mi">7</span><span class="p">},</span>
</span><span class="line">    <span class="n">t</span><span class="p">:</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span><span class="mi">8</span><span class="p">,</span> <span class="n">z</span><span class="p">:</span><span class="o">-</span><span class="mi">4</span><span class="p">},</span>
</span><span class="line">    <span class="n">x</span><span class="p">:</span> <span class="p">{</span><span class="n">t</span><span class="p">:</span><span class="o">-</span><span class="mi">2</span><span class="p">},</span>
</span><span class="line">    <span class="n">y</span><span class="p">:</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="n">z</span><span class="p">:</span><span class="mi">9</span><span class="p">},</span>
</span><span class="line">    <span class="n">z</span><span class="p">:</span> <span class="p">{</span><span class="n">s</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span><span class="mi">7</span><span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="n">D</span><span class="p">,</span> <span class="n">P</span> <span class="o">=</span> <span class="n">bellman_ford</span><span class="p">(</span><span class="n">W</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">D</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">]]</span> <span class="c"># [0, 2, 4, 7, -2]</span>
</span><span class="line"><span class="k">print</span> <span class="n">s</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">P</span> <span class="c"># True</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">P</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">t</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">]]</span> <span class="o">==</span> <span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">]</span> <span class="c"># True</span>
</span><span class="line"><span class="n">W</span><span class="p">[</span><span class="n">s</span><span class="p">][</span><span class="n">t</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">100</span>
</span><span class="line"><span class="k">print</span> <span class="n">bellman_ford</span><span class="p">(</span><span class="n">W</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
</span><span class="line"><span class="c"># Traceback (most recent call last):</span>
</span><span class="line"><span class="c">#         ...</span>
</span><span class="line"><span class="c"># ValueError: negative cycle</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>前面我们在动态规划中介绍了一个DAG图中的最短路径算法，它的时间复杂度是$O(V+E)$的，下面我们用松弛的思路来快速回顾一下那个算法的迭代版本。因为它先对顶点进行了拓扑排序，所以它是一个典型的通过修改边松弛的顺序来提高算法运行速度的算法，也就是说，我们不是随机松弛，也不是所有边来松弛一遍，而是沿着拓扑排序得到的节点的顺序来进行松弛，怎么松弛呢？当我们到达一个节点时我们就松弛这个节点的出边，为什么这种方式能够奏效呢？</p>

<p>这里还是假设从源点 s 到节点 v 的最短路径是<code>p=&lt;v0, v1, v2, v3 ... vk&gt;</code>，此时v0=s, vk=v，如果我们到达了节点 v，那么说明源点 s 和节点 v 之间的那些点都已经经过了(节点是经过了拓扑排序的哟)，而且它们的边也都已经松弛过了，所以根据路径松弛性质可以知道当我们到达节点 v 时我们能够直接得到源点 s 到节点 v 的最短路径值。</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/dagsp.png" alt="image" /></p>

<p>[上图的解释：The execution of the algorithm for shortest paths in a directed acyclic graph. The vertices are topologically sorted from left to right. The source vertex is s. The d values are shown within the vertices, and shaded edges indicate the π values. (a) The situation before the first iteration of the for loop of lines 3-5. (b)-(g) The situation after each iteration of the for loop of lines 3-5. The newly blackened vertex in each iteration was used as u in that iteration. The values shown in part (g) are the final values.]</p>

<p>接下来我们看下Dijkstra算法，它看起来非常像Prim算法，同样是基于贪心策略，每次贪心地选择松弛距离最近的“边缘节点”所在的那条边(另一个节点在已经包含的节点集合中)，那为什么这种方式也能奏效呢？因为算法导论给出了完整的证明，不信你去看看！呵呵，开玩笑的啦，如果光说有证明就用不着我来写文章咯，其实是因为<strong>Dijkstra算法隐藏了一个DAG最短路径算法</strong>，而DAG的最短路径问题我们上面已经介绍过了，仔细想也不难发现，它们的区别就是松弛的顺序不同，DAG最短路径算法是先进行拓扑排序然后松弛，而Dijkstra算法是每次直接贪心地选择一条边来松弛。那为什么Dijkstra算法隐藏了一个DAG？</p>

<hr />

<p>[<strong>这里我想了好久怎么解释，但是还是觉得原文实在太精彩，我想我这有限的水平很难讲明白，故这里附上原文，前面部分作者解释了为什么DAG最短路径算法中边松弛的顺序和拓扑排序有关，然后作者继续解释(Dijkstra算法中)下一个要加入(到已包含的节点集合)的节点必须有正确的距离估计值，最后作者解释了这个节点肯定是那个具有最小距离估计值的节点！一切顺风顺水，但是有一个重要前提条件，那就是边不能有负权值！</strong>]</p>

<p>作者下面的解释中提到的图9-1</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/dijkstra0.png" alt="image" /></p>

<p>To get thing started, we can imagine that we already know the distances from the start node to each of the others. We don’t, of course, but this imaginary situation can help our reasoning. Imagine ordering the nodes, left to right, based on their distance. What happens? For the general case—not much. However, we’re assuming that we have no negative edge weights, and that makes all the difference.</p>

<p>Because all edges are positive, the only nodes that can contribute to a node’s solution will lie to its left in our hypothetical ordering. It will be impossible to locate a node to the right that will help us find a shortcut, because this node is further away, and could only give us a shortcut if it had a negative back edge. The positive back edges are completely useless to us, and aren’t part of the problem structure. What remains, then, is a DAG, and the topological ordering we’d like to use is exactly the hypothetical ordering we started with: nodes sorted by their actual distance. See Figure 9-1 for an illustration of this structure. (I’ll get back to the question marks in a minute.)</p>

<p>Predictably enough, we now hit the major gap in the solution: it’s totally circular. In uncovering the basic problem structure (decomposing into subproblems or finding the hidden DAG), we’ve assumed that we’ve already solved the problem. The reasoning has still been useful, though, because we now have something specific to look for. We want to find the ordering—and we can find it with our trusty workhorse, induction!</p>

<p>Consider, again, Figure 9-1. Assume that the highlighted node is the one we’re trying to identify in our inductive step (meaning that the earlier ones have been identified and already have correct distance estimates). Just like in the ordinary DAG shortest path problem, we’ll be relaxing all out-edges for each node, as soon as we’ve identified it and determined its correct distance. That means that we’ve relaxed the edges out of all earlier nodes. We haven’t relaxed the out-edges of later nodes, but as discussed, they can’t matter: the distance estimates of these later nodes are upper bounds, and the back-edges have positive weights, so there’s no way they can contribute to a shortcut.</p>

<p>This means (by the earlier relaxation properties or the discussion of the DAG shortest path algorithm in Chapter 8) that the next node must have a correct distance estimate. That is, the highlighted node in Figure 9-1 must by now have received its correct distance estimate, because we’ve relaxed all edges out of the first three nodes. This is very good news, and all that remains is to figure out which node it is. We still don’t really know what the ordering is, remember? We’re figuring out the topological sorting as we go along, step by step.</p>

<p>There is only one node that could possibly be the next one, of course:3 the one with the lowest distance estimate. We know it’s next in the sorted order, and we know it has a correct estimate; because these estimates are upper bounds, none of the later nodes could possibly have lower estimates. Cool, no? And now, by induction, we’ve solved the problem. We just relax all out-edges of the nodes of each node in distance order—which means always taking the one with the lowest estimate next.</p>

<hr />

<p>下图是算法导论中Dijkstra算法的示例图，可以参考下</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/dijkstra.png" alt="image" /></p>

<p>[上图的解释：The execution of Dijkstra’s algorithm. The source s is the leftmost vertex. The shortest-path estimates are shown within the vertices, and shaded edges indicate predecessor values. Black vertices are in the set S, and white vertices are in the min-priority queue Q = V - S. (a) The situation just before the first iteration of the while loop of lines 4-8. The shaded vertex has the minimum d value and is chosen as vertex u in line 5. (b)-(f) The situation after each successive iteration of the while loop. The shaded vertex in each part is chosen as vertex u in line 5 of the next iteration. The d and π values shown in part (f) are the final values.]</p>

<p>下面是Dijkstra算法的实现</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#Dijkstra算法</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">heapq</span> <span class="kn">import</span> <span class="n">heappush</span><span class="p">,</span> <span class="n">heappop</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">dijkstra</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
</span><span class="line">    <span class="n">D</span><span class="p">,</span> <span class="n">P</span><span class="p">,</span> <span class="n">Q</span><span class="p">,</span> <span class="n">S</span> <span class="o">=</span> <span class="p">{</span><span class="n">s</span><span class="p">:</span><span class="mi">0</span><span class="p">},</span> <span class="p">{},</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span><span class="n">s</span><span class="p">)],</span> <span class="nb">set</span><span class="p">()</span>      <span class="c"># Est., tree, queue, visited</span>
</span><span class="line">    <span class="k">while</span> <span class="n">Q</span><span class="p">:</span>                                    <span class="c"># Still unprocessed nodes?</span>
</span><span class="line">        <span class="n">_</span><span class="p">,</span> <span class="n">u</span> <span class="o">=</span> <span class="n">heappop</span><span class="p">(</span><span class="n">Q</span><span class="p">)</span>                       <span class="c"># Node with lowest estimate</span>
</span><span class="line">        <span class="k">if</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">S</span><span class="p">:</span> <span class="k">continue</span>                     <span class="c"># Already visited? Skip it</span>
</span><span class="line">        <span class="n">S</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>                                <span class="c"># We&#39;ve visited it now</span>
</span><span class="line">        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">G</span><span class="p">[</span><span class="n">u</span><span class="p">]:</span>                          <span class="c"># Go through all its neighbors</span>
</span><span class="line">            <span class="n">relax</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">D</span><span class="p">,</span> <span class="n">P</span><span class="p">)</span>                <span class="c"># Relax the out-edge</span>
</span><span class="line">            <span class="n">heappush</span><span class="p">(</span><span class="n">Q</span><span class="p">,</span> <span class="p">(</span><span class="n">D</span><span class="p">[</span><span class="n">v</span><span class="p">],</span> <span class="n">v</span><span class="p">))</span>              <span class="c"># Add to queue, w/est. as pri</span>
</span><span class="line">    <span class="k">return</span> <span class="n">D</span><span class="p">,</span> <span class="n">P</span>                                 <span class="c"># Final D and P returned</span>
</span><span class="line">
</span><span class="line"><span class="c">#测试代码</span>
</span><span class="line"><span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class="line"><span class="n">W</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="n">s</span><span class="p">:</span> <span class="p">{</span><span class="n">t</span><span class="p">:</span><span class="mi">10</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span><span class="mi">5</span><span class="p">},</span>
</span><span class="line">    <span class="n">t</span><span class="p">:</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span><span class="mi">2</span><span class="p">},</span>
</span><span class="line">    <span class="n">x</span><span class="p">:</span> <span class="p">{</span><span class="n">z</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span>
</span><span class="line">    <span class="n">y</span><span class="p">:</span> <span class="p">{</span><span class="n">t</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span><span class="mi">9</span><span class="p">,</span> <span class="n">z</span><span class="p">:</span><span class="mi">2</span><span class="p">},</span>
</span><span class="line">    <span class="n">z</span><span class="p">:</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span><span class="mi">6</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span><span class="mi">7</span><span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="n">D</span><span class="p">,</span> <span class="n">P</span> <span class="o">=</span> <span class="n">dijkstra</span><span class="p">(</span><span class="n">W</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">D</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">]]</span> <span class="c"># [0, 8, 9, 5, 7]</span>
</span><span class="line"><span class="k">print</span> <span class="n">s</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">P</span> <span class="c"># True</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">P</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">t</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">]]</span> <span class="o">==</span> <span class="p">[</span><span class="n">y</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">y</span><span class="p">]</span> <span class="c"># True</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Dijkstra算法和Prim算法的实现很像，也和BFS算法实现很像，其实，如果我们把每条权值为 w 的边(u,v)想象成节点 u 和节点 v 中间有 (w-1) 个节点，且每条边都是权值为1的一条路径的话，BFS算法其实就和Dijkstra算法差不多了。 Dijkstra算法的时间复杂度和使用的优先队列有关，上面的实现用的是最小堆，所以时间复杂度是$O(m lg n)$，其中 m 是边数，n 是节点数。</p>

<p>下面我们来看看所有点对最短路径问题</p>

<p>对于所有点对最短路径问题，我们第一个想法肯定是对每个节点运行一遍Dijkstra算法就可以了嘛，但是，Dijkstra算法有个前提条件，所有边的权值都是正的，那些包含了负权边的图怎么办？那就想办法对图进行些预处理，使得所有边的权值都是正的就可以了，那怎么处理能够做到呢？此时可以看下前面的三角不等性质，内容如下：</p>

<p>d(s,v) &lt;= d(s,u) + W[u,v]. This is an example of the triangle inequality.</p>

<p>令h(u)=d(s,u), h(v)=d(s,v)，假设我们给边(u,v)重新赋权w’(u, v) = w(u, v) + h(u) - h(v)，根据三角不等性质可知w’(u, v)肯定非负，这样新图的边就满足Dijkstra算法的前提条件，但是，我们怎么得到每个节点的最短路径值d(s,v)？</p>

<p>其实这个问题很好解决对吧，前面介绍的Bellman-Ford算法就干这行的，但是源点 s 是什么？这里的解决方案有点意思，我们可以向图中添加一个顶点 s，并且让它连接图中的所有其他节点，边的权值都是0，完了之后我们就可以在新图上从源点 s 开始运行Bellman-Ford算法，这样就得到了每个节点的最短路径值d(s,v)。但是，新的问题又来了，这么改了之后真的好吗？得到的最短路径对吗？</p>

<p>这里的解释更加有意思，想想任何一条从源点 s 到节点 v 的路径<code>p=&lt;s, v1, v2, v3 ... u, v&gt;</code>，假设我们把路径上的边权值都加起来的话，你会发现下面的有意思的现象(telescoping sums)：</p>

<p>sum=[w(s,v1)+h(s)-h(v1)]+[w(v1,v2)+h(v1)-h(v2)]+…+[w(u,v)+h(u)-h(v)]
=w(v1,v2)+w(v2,v3)+…+w(u,v)-h(v)</p>

<p>上面的式子说明，所有从源点 s 到节点 v 的路径都会减去h(v)，也就说明对于新图上的任何一条最短路径，它都是对应着原图的那条最短路径，只是路径的权值减去了h(v)，这也就说明采用上面的策略得到的最短路径没有问题。</p>

<p>现在我们捋一捋思路，我们首先要使用Bellman-Ford算法得到每个节点的最短路径值，然后利用这些值修改图中边的权值，最后我们对图中所有节点都运行一次Dijkstra算法就解决了所有节点对最短路径问题，但是如果原图本来边的权值就都是正的话就直接运行Dijkstra算法就行了。这就是Johnson算法，一个巧妙地利用Bellman-Ford和Dijkstra算法结合来解决所有节点对最短路径问题的算法。它特别适合用于稀疏图，算法的时间复杂度是$O(mn lg n)$，比后面要介绍的Floyd-Warshall算法要好些。</p>

<p>还有一点需要补充的是，在运行完了Dijkstra算法之后，如果我们要得到准确的最短路径的权值的话，我们还需要做一定的修改，从前面的式子可以看出，新图上节点 u 和节点 v 之间的最短路径 D’(u,v) 与原图上两个节点的最短路径 D(u,v) 有如下左式的关系，那么经过右式的简单计算就能得到原图的最短路径值</p>

<p>D’(u,v)=D(u,v)+h(u)-h(v)  ==&gt; D(u,v)=D’(u,v)-h(u)+h(v) </p>

<p>基于上面的思路，我们可以得到下面的Johnson算法实现</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#Johnson’s Algorithm</span>
</span><span class="line"><span class="k">def</span> <span class="nf">johnson</span><span class="p">(</span><span class="n">G</span><span class="p">):</span>                                 <span class="c"># All pairs shortest paths</span>
</span><span class="line">    <span class="n">G</span> <span class="o">=</span> <span class="n">deepcopy</span><span class="p">(</span><span class="n">G</span><span class="p">)</span>                             <span class="c"># Don&#39;t want to break original</span>
</span><span class="line">    <span class="n">s</span> <span class="o">=</span> <span class="nb">object</span><span class="p">()</span>                                <span class="c"># Guaranteed unique node</span>
</span><span class="line">    <span class="n">G</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="n">v</span><span class="p">:</span><span class="mi">0</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">G</span><span class="p">}</span>                     <span class="c"># Edges from s have zero wgt</span>
</span><span class="line">    <span class="n">h</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">bellman_ford</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>                   <span class="c"># h[v]: Shortest dist from s</span>
</span><span class="line">    <span class="k">del</span> <span class="n">G</span><span class="p">[</span><span class="n">s</span><span class="p">]</span>                                    <span class="c"># No more need for s</span>
</span><span class="line">    <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">G</span><span class="p">:</span>                                 <span class="c"># The weight from u...</span>
</span><span class="line">        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">G</span><span class="p">[</span><span class="n">u</span><span class="p">]:</span>                          <span class="c"># ... to v...</span>
</span><span class="line">            <span class="n">G</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="o">+=</span> <span class="n">h</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">-</span> <span class="n">h</span><span class="p">[</span><span class="n">v</span><span class="p">]</span>              <span class="c"># ... is adjusted (nonneg.)</span>
</span><span class="line">    <span class="n">D</span><span class="p">,</span> <span class="n">P</span> <span class="o">=</span> <span class="p">{},</span> <span class="p">{}</span>                               <span class="c"># D[u][v] and P[u][v]</span>
</span><span class="line">    <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">G</span><span class="p">:</span>                                 <span class="c"># From every u...</span>
</span><span class="line">        <span class="n">D</span><span class="p">[</span><span class="n">u</span><span class="p">],</span> <span class="n">P</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">=</span> <span class="n">dijkstra</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">u</span><span class="p">)</span>             <span class="c"># ... find the shortest paths</span>
</span><span class="line">        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">G</span><span class="p">:</span>                             <span class="c"># For each destination...</span>
</span><span class="line">            <span class="n">D</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="o">+=</span> <span class="n">h</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">-</span> <span class="n">h</span><span class="p">[</span><span class="n">u</span><span class="p">]</span>              <span class="c"># ... readjust the distance</span>
</span><span class="line">    <span class="k">return</span> <span class="n">D</span><span class="p">,</span> <span class="n">P</span>                                 <span class="c"># These are two-dimensional</span>
</span><span class="line">
</span><span class="line"><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class="line"><span class="n">W</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="n">a</span><span class="p">:</span> <span class="p">{</span><span class="n">c</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="n">d</span><span class="p">:</span><span class="mi">7</span><span class="p">},</span>
</span><span class="line">    <span class="n">b</span><span class="p">:</span> <span class="p">{</span><span class="n">a</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span>
</span><span class="line">    <span class="n">c</span><span class="p">:</span> <span class="p">{</span><span class="n">b</span><span class="p">:</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span><span class="mi">2</span><span class="p">},</span>
</span><span class="line">    <span class="n">d</span><span class="p">:</span> <span class="p">{</span><span class="n">c</span><span class="p">:</span><span class="mi">6</span><span class="p">},</span>
</span><span class="line">    <span class="n">e</span><span class="p">:</span> <span class="p">{</span><span class="n">a</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span><span class="mi">8</span><span class="p">,</span> <span class="n">d</span><span class="p">:</span><span class="o">-</span><span class="mi">4</span><span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="n">D</span><span class="p">,</span> <span class="n">P</span> <span class="o">=</span> <span class="n">johnson</span><span class="p">(</span><span class="n">W</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">D</span><span class="p">[</span><span class="n">a</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">]]</span> <span class="c"># [0, -4, 1, -1, 3]</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">D</span><span class="p">[</span><span class="n">b</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">]]</span> <span class="c"># [4, 0, 5, 3, 7]</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">D</span><span class="p">[</span><span class="n">c</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">]]</span> <span class="c"># [-1, -5, 0, -2, 2]</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">D</span><span class="p">[</span><span class="n">d</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">]]</span> <span class="c"># [5, 1, 6, 0, 8]</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">D</span><span class="p">[</span><span class="n">e</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">]]</span> <span class="c"># [1, -3, 2, -4, 0]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面我们看下Floyd-Warshall算法，这是一个基于动态规划的算法，时间复杂度是$O(n^3)$，n是图中节点数</p>

<p>假设所有节点都有一个数字编号(从1开始)，我们要把原来的问题reduce成一个个子问题，子问题有三个参数：起点 u、终点 v、能经过的节点的最大编号k，也就是求从起点 u 到终点 v 只能够经过编号为(1,2,3,…,k)的节点的最短路径问题 (原文表述如下)</p>

<p>Let d(u, v, k) be the length of the shortest path that exists from node u to node v if you’re only allowed to use the k first nodes as intermediate nodes. </p>

<p>这个子问题怎么考虑呢？当然还是采用之前动态规划中常用的选择还是不选择这种策略，如果我们选择不经过节点 k 的话，那么问题变成了求从起点 u 到终点 v 只能够经过编号为(1,2,3,…,k-1)的节点的最短路径问题；如果我们选择经过节点 k 的话，那么问题变成求从起点 u 到终点 k 只能够经过编号为(1,2,3,…,k-1)的节点的最短路径问题与求从起点 k 到终点 v 只能够经过编号为(1,2,3,…,k-1)的节点的最短路径问题之和，如下图所示</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/fw0.png" alt="image" /></p>

<p>经过上面的分析，我们可以得到下面的结论</p>

<p>d(u,v,k) = min(d(u,v,k-1), d(u,k,k-1) + d(k,v,k-1))</p>

<p>根据这个式子我们很快可以得到下面的递归实现</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#递归版本的Floyd-Warshall算法</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">memo</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="n">cache</span> <span class="o">=</span> <span class="p">{}</span>                                  <span class="c"># Stored subproblem solutions</span>
</span><span class="line">    <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>                                <span class="c"># Make wrap look like func</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">wrap</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>                            <span class="c"># The memoized wrapper</span>
</span><span class="line">        <span class="k">if</span> <span class="n">args</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cache</span><span class="p">:</span>                   <span class="c"># Not already computed?</span>
</span><span class="line">            <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>           <span class="c"># Compute &amp; cache the solution</span>
</span><span class="line">        <span class="k">return</span> <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span>                      <span class="c"># Return the cached solution</span>
</span><span class="line">    <span class="k">return</span> <span class="n">wrap</span>                                 <span class="c"># Return the wrapper</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">rec_floyd_warshall</span><span class="p">(</span><span class="n">G</span><span class="p">):</span>                                <span class="c"># All shortest paths</span>
</span><span class="line">    <span class="nd">@memo</span>                                                 <span class="c"># Store subsolutions</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">d</span><span class="p">(</span><span class="n">u</span><span class="p">,</span><span class="n">v</span><span class="p">,</span><span class="n">k</span><span class="p">):</span>                                         <span class="c"># u to v via 1..k</span>
</span><span class="line">        <span class="k">if</span> <span class="n">k</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="n">G</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">]</span>                           <span class="c"># Assumes v in G[u]</span>
</span><span class="line">        <span class="k">return</span> <span class="nb">min</span><span class="p">(</span><span class="n">d</span><span class="p">(</span><span class="n">u</span><span class="p">,</span><span class="n">v</span><span class="p">,</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="n">d</span><span class="p">(</span><span class="n">u</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">d</span><span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="p">,</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>   <span class="c"># Use k or not?</span>
</span><span class="line">    <span class="k">return</span> <span class="p">{(</span><span class="n">u</span><span class="p">,</span><span class="n">v</span><span class="p">):</span> <span class="n">d</span><span class="p">(</span><span class="n">u</span><span class="p">,</span><span class="n">v</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">G</span><span class="p">))</span> <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">G</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">G</span><span class="p">}</span>   <span class="c"># D[u,v] = d(u,v,n)</span>
</span><span class="line">
</span><span class="line"><span class="c">#测试代码</span>
</span><span class="line"><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span> <span class="c"># One-based</span>
</span><span class="line"><span class="n">W</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="n">a</span><span class="p">:</span> <span class="p">{</span><span class="n">c</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="n">d</span><span class="p">:</span><span class="mi">7</span><span class="p">},</span>
</span><span class="line">    <span class="n">b</span><span class="p">:</span> <span class="p">{</span><span class="n">a</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span>
</span><span class="line">    <span class="n">c</span><span class="p">:</span> <span class="p">{</span><span class="n">b</span><span class="p">:</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span><span class="mi">2</span><span class="p">},</span>
</span><span class="line">    <span class="n">d</span><span class="p">:</span> <span class="p">{</span><span class="n">c</span><span class="p">:</span><span class="mi">6</span><span class="p">},</span>
</span><span class="line">    <span class="n">e</span><span class="p">:</span> <span class="p">{</span><span class="n">a</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span><span class="mi">8</span><span class="p">,</span> <span class="n">d</span><span class="p">:</span><span class="o">-</span><span class="mi">4</span><span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">W</span><span class="p">:</span>
</span><span class="line">    <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">W</span><span class="p">:</span>
</span><span class="line">        <span class="k">if</span> <span class="n">u</span> <span class="o">==</span> <span class="n">v</span><span class="p">:</span> <span class="n">W</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">        <span class="k">if</span> <span class="n">v</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">W</span><span class="p">[</span><span class="n">u</span><span class="p">]:</span> <span class="n">W</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">inf</span>
</span><span class="line"><span class="n">D</span> <span class="o">=</span> <span class="n">rec_floyd_warshall</span><span class="p">(</span><span class="n">W</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">D</span><span class="p">[</span><span class="n">a</span><span class="p">,</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">]]</span> <span class="c"># [0, -4, 1, -1, 3]</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">D</span><span class="p">[</span><span class="n">b</span><span class="p">,</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">]]</span> <span class="c"># [4, 0, 5, 3, 7]</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">D</span><span class="p">[</span><span class="n">c</span><span class="p">,</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">]]</span> <span class="c"># [-1, -5, 0, -2, 2]</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">D</span><span class="p">[</span><span class="n">d</span><span class="p">,</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">]]</span> <span class="c"># [5, 1, 6, 0, 8]</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">D</span><span class="p">[</span><span class="n">e</span><span class="p">,</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">]]</span> <span class="c"># [1, -3, 2, -4, 0]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>仔细看的话，不难发现这个解法和我们介绍动态规划时介绍的最长公共子序列的问题非常类似，<a href="http://hujiaweibujidao.github.io/blog/2014/05/19/longest-common-subsequence/">如果还没有阅读的话不妨看下最长公共子序列问题的5种实现这篇文章</a>，有了对最长公共子序列问题的理解，我们就很容易发现对于Floyd-Warshall算法我们也可以采用类似的方式来减小算法所需占用的空间，当然首先要将递归版本改成性能更好些的迭代版本。</p>

<p>Floyd-Warshall算法的递推公式</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

d_{ij}^{k}= \left\{ 
  \begin{array}{l l}
    \omega_{ij} & \quad \text{如果k=0}\\
    min(d_{ij}^{k-1},d_{ik}^{k-1}+d_{kj}^{k-1}) & \quad \text{如果$k \ge 1$}
  \end{array} \right.
 %]]&gt;</script>

<p>从递推公式中可以看出，计算当前回合(k)只需要上一回合(k-1)得到的结果，所以，如果应用对于中间结果不需要的话，那么可以只使用2个nxn的矩阵，一个保存当前回合(k)的结果D(k)，另一个保存上一回合(k-1)的结果D(k-1)，待当前回合计算完了之后将其全部复制到D(k-1)中，这样就仅需要$O(n^{2})$的空间。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#空间优化后的Floyd-Warshall算法</span>
</span><span class="line"><span class="k">def</span> <span class="nf">floyd_warshall1</span><span class="p">(</span><span class="n">G</span><span class="p">):</span>
</span><span class="line">    <span class="n">D</span> <span class="o">=</span> <span class="n">deepcopy</span><span class="p">(</span><span class="n">G</span><span class="p">)</span>                             <span class="c"># No intermediates yet</span>
</span><span class="line">    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">G</span><span class="p">:</span>                                 <span class="c"># Look for shortcuts with k</span>
</span><span class="line">        <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">G</span><span class="p">:</span>
</span><span class="line">            <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">G</span><span class="p">:</span>
</span><span class="line">                <span class="n">D</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">D</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">],</span> <span class="n">D</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">+</span> <span class="n">D</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">v</span><span class="p">])</span>
</span><span class="line">    <span class="k">return</span> <span class="n">D</span>
</span><span class="line">
</span><span class="line"><span class="c">#测试代码</span>
</span><span class="line"><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span> <span class="c"># One-based</span>
</span><span class="line"><span class="n">W</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="n">a</span><span class="p">:</span> <span class="p">{</span><span class="n">c</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="n">d</span><span class="p">:</span><span class="mi">7</span><span class="p">},</span>
</span><span class="line">    <span class="n">b</span><span class="p">:</span> <span class="p">{</span><span class="n">a</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span>
</span><span class="line">    <span class="n">c</span><span class="p">:</span> <span class="p">{</span><span class="n">b</span><span class="p">:</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span><span class="mi">2</span><span class="p">},</span>
</span><span class="line">    <span class="n">d</span><span class="p">:</span> <span class="p">{</span><span class="n">c</span><span class="p">:</span><span class="mi">6</span><span class="p">},</span>
</span><span class="line">    <span class="n">e</span><span class="p">:</span> <span class="p">{</span><span class="n">a</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span><span class="mi">8</span><span class="p">,</span> <span class="n">d</span><span class="p">:</span><span class="o">-</span><span class="mi">4</span><span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">W</span><span class="p">:</span>
</span><span class="line">    <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">W</span><span class="p">:</span>
</span><span class="line">        <span class="k">if</span> <span class="n">u</span> <span class="o">==</span> <span class="n">v</span><span class="p">:</span> <span class="n">W</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">        <span class="k">if</span> <span class="n">v</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">W</span><span class="p">[</span><span class="n">u</span><span class="p">]:</span> <span class="n">W</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">inf</span>
</span><span class="line"><span class="n">D</span> <span class="o">=</span> <span class="n">floyd_warshall1</span><span class="p">(</span><span class="n">W</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">D</span><span class="p">[</span><span class="n">a</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">]]</span> <span class="c"># [0, -4, 1, -1, 3]</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">D</span><span class="p">[</span><span class="n">b</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">]]</span> <span class="c"># [4, 0, 5, 3, 7]</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">D</span><span class="p">[</span><span class="n">c</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">]]</span> <span class="c"># [-1, -5, 0, -2, 2]</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">D</span><span class="p">[</span><span class="n">d</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">]]</span> <span class="c"># [5, 1, 6, 0, 8]</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">D</span><span class="p">[</span><span class="n">e</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">]]</span> <span class="c"># [1, -3, 2, -4, 0]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当然啦，一般情况下求最短路径问题我们还需要知道最短路径是什么，这个时候我们只需要在进行选择的时候设置一个前驱节点就行了</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#最终版本的Floyd-Warshall算法</span>
</span><span class="line"><span class="k">def</span> <span class="nf">floyd_warshall</span><span class="p">(</span><span class="n">G</span><span class="p">):</span>
</span><span class="line">    <span class="n">D</span><span class="p">,</span> <span class="n">P</span> <span class="o">=</span> <span class="n">deepcopy</span><span class="p">(</span><span class="n">G</span><span class="p">),</span> <span class="p">{}</span>
</span><span class="line">    <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">G</span><span class="p">:</span>
</span><span class="line">        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">G</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="n">u</span> <span class="o">==</span> <span class="n">v</span> <span class="ow">or</span> <span class="n">G</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="o">==</span> <span class="n">inf</span><span class="p">:</span>
</span><span class="line">                <span class="n">P</span><span class="p">[</span><span class="n">u</span><span class="p">,</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">P</span><span class="p">[</span><span class="n">u</span><span class="p">,</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">u</span>
</span><span class="line">    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">G</span><span class="p">:</span>
</span><span class="line">        <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">G</span><span class="p">:</span>
</span><span class="line">            <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">G</span><span class="p">:</span>
</span><span class="line">                <span class="n">shortcut</span> <span class="o">=</span> <span class="n">D</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">+</span> <span class="n">D</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">v</span><span class="p">]</span>
</span><span class="line">                <span class="k">if</span> <span class="n">shortcut</span> <span class="o">&lt;</span> <span class="n">D</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">]:</span>
</span><span class="line">                    <span class="n">D</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">shortcut</span>
</span><span class="line">                    <span class="n">P</span><span class="p">[</span><span class="n">u</span><span class="p">,</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">P</span><span class="p">[</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">D</span><span class="p">,</span> <span class="n">P</span>
</span><span class="line">
</span><span class="line"><span class="c">#测试代码</span>
</span><span class="line"><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class="line"><span class="n">W</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="n">a</span><span class="p">:</span> <span class="p">{</span><span class="n">c</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="n">d</span><span class="p">:</span><span class="mi">7</span><span class="p">},</span>
</span><span class="line">    <span class="n">b</span><span class="p">:</span> <span class="p">{</span><span class="n">a</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span>
</span><span class="line">    <span class="n">c</span><span class="p">:</span> <span class="p">{</span><span class="n">b</span><span class="p">:</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span><span class="mi">2</span><span class="p">},</span>
</span><span class="line">    <span class="n">d</span><span class="p">:</span> <span class="p">{</span><span class="n">c</span><span class="p">:</span><span class="mi">6</span><span class="p">},</span>
</span><span class="line">    <span class="n">e</span><span class="p">:</span> <span class="p">{</span><span class="n">a</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span><span class="mi">8</span><span class="p">,</span> <span class="n">d</span><span class="p">:</span><span class="o">-</span><span class="mi">4</span><span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">W</span><span class="p">:</span>
</span><span class="line">    <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">W</span><span class="p">:</span>
</span><span class="line">        <span class="k">if</span> <span class="n">u</span> <span class="o">==</span> <span class="n">v</span><span class="p">:</span> <span class="n">W</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">        <span class="k">if</span> <span class="n">v</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">W</span><span class="p">[</span><span class="n">u</span><span class="p">]:</span> <span class="n">W</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">inf</span>
</span><span class="line"><span class="n">D</span><span class="p">,</span> <span class="n">P</span> <span class="o">=</span> <span class="n">floyd_warshall</span><span class="p">(</span><span class="n">W</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">D</span><span class="p">[</span><span class="n">a</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">]]</span><span class="c">#[0, -4, 1, -1, 3]</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">D</span><span class="p">[</span><span class="n">b</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">]]</span><span class="c">#[4, 0, 5, 3, 7]</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">D</span><span class="p">[</span><span class="n">c</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">]]</span><span class="c">#[-1, -5, 0, -2, 2]</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">D</span><span class="p">[</span><span class="n">d</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">]]</span><span class="c">#[5, 1, 6, 0, 8]</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">D</span><span class="p">[</span><span class="n">e</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">]]</span><span class="c">#[1, -3, 2, -4, 0]</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">P</span><span class="p">[</span><span class="n">a</span><span class="p">,</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">]]</span><span class="c">#[None, 2, 0, 4, 2]</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">P</span><span class="p">[</span><span class="n">b</span><span class="p">,</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">]]</span><span class="c">#[1, None, 0, 4, 2]</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">P</span><span class="p">[</span><span class="n">c</span><span class="p">,</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">]]</span><span class="c">#[1, 2, None, 4, 2]</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">P</span><span class="p">[</span><span class="n">d</span><span class="p">,</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">]]</span><span class="c">#[1, 2, 3, None, 2]</span>
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="n">P</span><span class="p">[</span><span class="n">e</span><span class="p">,</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">]]</span><span class="c">#[1, 2, 3, 4, None]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>[算法导论在介绍所有节点对最短路径问题时先介绍了另一个基于动态规划的解法，但是那个算法时间复杂度较高，即使是使用了重复平方技术还是比较差，所以这里不介绍了，但是有意思的是书中将这个算法和矩阵乘法运算进行了对比，发现两者之间惊人的相似，其实同理，我们开始介绍的<strong>Bellman-Ford算法和矩阵与向量的乘法运算也有很多类似的地方</strong>，感兴趣可以自己探索下，也可以阅读算法导论了解下]</p>

<p>本章节最后作者还提出了两个用来解最短路径问题的技巧：“Meeting in the middle” 和 “Knowing where you’re going,”，这部分的内容又都比较难翻译和理解，感兴趣还是阅读原文较好</p>

<p>(1)Meeting in the middle</p>

<p>简单来说就是双向进行，Dijkstra算法是从节点 u 出发去找到达节点 v 的最短路径，但是，如果两个节点同时进行呢，当它们找到相同的节点时就得到一条路径了，这种方式比一个方向查找的效率要高些，下图是一个图示</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/meetinmiddle.png" alt="image" /></p>

<p>(2)Knowing where you’re going</p>

<p>这里作者介绍了大名鼎鼎的A*算法，实际上也就非常类似采用了分支限界策略的BFS算法(the best-first search used in the branch and bound strategy )。</p>

<p>By now you’ve seen that the basic idea of traversal is pretty versatile, and by simply using different queues, you get several useful algorithms. For example, for FIFO and LIFO queues, you get BFS and DFS, and with the appropriate priorities, you get the core of Prim’s and Dijkstra’s algorithms. The algorithm described in this section, called A*, extends Dijkstra’s, by tweaking the priority once again.</p>

<p>As mentioned earlier, the A* algorithm uses an idea similar to Johnson’s algorithm, although for a different purpose. Johnson’s algorithm transforms all edge weights to ensure they’re positive, while ensuring that the shortest paths are still shortest. In A*, we want to modify the edges in a similar fashion, but this time the goal isn’t to make the edges positive—we’re assuming they already are (as we’re building on Dijkstra’s algorithm). No, what we want is to guide the traversal in the right direction, by using information of where we’re going: we want to make edges moving away from our target node more expensive than those that take us closer to it.</p>

<hr />

<p>练习题：来自算法导论24-3 货币兑换问题</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/bfex.png" alt="image" /></p>

<p>简单来说就是在给定的不同货币的兑换率下是否存在一个货币兑换循环使得最终我们能够从中获利？[提示：Bellman-Ford算法]</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/bfans1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/algos/bfans2.png" alt="image" /></p>

<p>返回<a href="http://hujiaweibujidao.github.io/python/">Python数据结构与算法设计篇目录</a></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-graphs/">http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-graphs/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Algorithms - C8 Dynamic Programming]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-dynamic-programming/"/>
    <updated>2014-07-01T11:20:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-dynamic-programming</id>
    <content type="html"><![CDATA[<p>最后更新时间：2014-7-7</p>

<p><strong><center>Python算法设计篇(8)</center></strong>
<strong><center>逸夫图书馆, 2014/7/1</center></strong></p>

<h3 id="centerchapter-8-tangled-dependencies-and-memoizationcenter"><center>Chapter 8 Tangled Dependencies and Memoization</center></h3>

<blockquote>
  <p>Twice, adv. Once too often.   <br />
  —— Ambrose Bierce, The Devil’s Dictionary</p>
</blockquote>

<p>本节主要结合一些经典的动规问题介绍动态规划的备忘录法和迭代法这两种实现方式，并对这两种方式进行对比</p>

<p>[<strong>这篇文章实际写作时间在这个系列文章之前，所以写作风格可能略有不同，嘿嘿</strong>]</p>

<p>大家都知道，动态规划算法一般都有下面两种实现方式，前者我称为递归版本，后者称为迭代版本，根据前面的知识可知，这两个版本是可以相互转换的</p>

<p><strong>1.直接自顶向下实现递归式，并将中间结果保存，这叫备忘录法；</strong></p>

<p><strong>2.按照递归式自底向上地迭代，将结果保存在某个数据结构中求解。</strong></p>

<p>编程有一个原则<code>DRY=Don’t Repeat Yourself</code>，就是说你的代码不要重复来重复去的，这个原则同样可以用于理解动态规划，动态规划除了满足最优子结构，它还存在子问题重叠的性质，我们不能重复地去解决这些子问题，所以我们将子问题的解保存起来，类似缓存机制，之后遇到这个子问题时直接取出子问题的解。</p>

<p>举个简单的例子，斐波那契数列中的元素的计算，很简单，我们写下如下的代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">:</span> <span class="k">return</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">return</span> <span class="n">fib</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="n">fib</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>好，来测试下，运行<code>fib(10)</code>得到结果69，不错，速度也还行，换个大的数字，试试100，这时你会发现，这个程序执行不出结果了，为什么？递归太深了！要计算的子问题太多了！</p>

<p>所以，我们需要改进下，我们保存每次计算出来的子问题的解，用什么保存呢？用Python中的dict！那怎么实现保存子问题的解呢？用Python中的装饰器！</p>

<p>如果不是很了解Python的装饰器，可以快速看下<a href="http://hujiaweibujidao.github.io/blog/2014/05/10/python-tips1/">这篇总结中关于装饰器的解释：Python Basics</a></p>

<p>修改刚才的程序，得到如下代码，定义一个函数<code>memo</code>返回我们需要的装饰器，这里用<code>cache</code>保存子问题的解，key是方法的参数，也就是数字<code>n</code>，值就是<code>fib(n)</code>返回的解。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">memo</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="n">cache</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line">    <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">wrap</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">args</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cache</span><span class="p">:</span>
</span><span class="line">            <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span><span class="o">=</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">wrap</span>
</span><span class="line">
</span><span class="line"><span class="nd">@memo</span>
</span><span class="line"><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">:</span> <span class="k">return</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">return</span> <span class="n">fib</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="n">fib</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>重新运行下<code>fib(100)</code>，你会发现这次很快就得到了结果<code>573147844013817084101</code>，这就是动态规划的威力，上面使用的是第一种带备忘录的递归实现方式。</p>

<p><strong>带备忘录的递归方式的优点就是易于理解，易于实现，代码简洁干净，运行速度也不错，直接从需要求解的问题出发，而且只计算需要求解的子问题，没有多余的计算。但是，它也有自己的缺点，因为是递归形式，所以有限的栈深度是它的硬伤，有些问题难免会出现栈溢出了。</strong></p>

<p>于是，迭代版本的实现方式就诞生了！</p>

<p><strong>迭代实现方式有2个好处：1.运行速度快，因为没有用栈去实现，也避免了栈溢出的情况；2.迭代实现的话可以不使用dict来进行缓存，而是使用其他的特殊cache结构，例如多维数组等更为高效的数据结构。</strong></p>

<p>那怎么把递归版本转变成迭代版本呢？</p>

<p><strong>这就是递归实现和迭代实现的重要区别：递归实现不需要去考虑计算顺序，只要给出问题，然后自顶向下去解就行；而迭代实现需要考虑计算顺序，并且顺序很重要，算法在运行的过程中要保证当前要计算的问题中的子问题的解已经是求解好了的。</strong></p>

<p>斐波那契数列的迭代版本很简单，就是按顺序来计算就行了，不解释，关键是你可以看到我们就用了3个简单变量就求解出来了，没有使用任何高级的数据结构，节省了大量的空间。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">fib_iter</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">n</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">:</span> <span class="k">return</span> <span class="mi">1</span>
</span><span class="line">    <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span>
</span><span class="line">    <span class="k">while</span> <span class="n">n</span><span class="o">&gt;=</span><span class="mi">2</span><span class="p">:</span>
</span><span class="line">        <span class="n">c</span><span class="o">=</span><span class="n">a</span><span class="o">+</span><span class="n">b</span>
</span><span class="line">        <span class="n">a</span><span class="o">=</span><span class="n">b</span>
</span><span class="line">        <span class="n">b</span><span class="o">=</span><span class="n">c</span>
</span><span class="line">        <span class="n">n</span><span class="o">=</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span>
</span><span class="line">    <span class="k">return</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>斐波那契数列的变种经常出现在上楼梯的走法问题中，每次只能走一个台阶或者两个台阶，广义上思考的话，<strong>动态规划也就是一个连续决策问题，到底当前这一步是选择它(走一步)还是不选择它(走两步)呢?</strong></p>

<p>其他问题也可以很快地变相思考发现它们其实是一样的，例如求二项式系数<code>C(n,k)</code>，杨辉三角(求从源点到目标点有多少种走法)等等问题。</p>

<p>二项式系数<code>C(n,k)</code>表示从n个中选k个，假设我们现在处理n个中的第1个，考虑是否选择它。如果选择它的话，那么我们还需要从剩下的n-1个中选k-1个，即<code>C(n-1,k-1)</code>；如果不选择它的话，我们需要从剩下的n-1中选k个，即<code>C(n-1,k)</code>。所以，<code>C(n,k)=C(n-1,k-1)+C(n-1,k)</code>。</p>

<p>结合前面的装饰器，我们很快便可以实现求二项式系数的递归实现代码，其中的<code>memo</code>函数完全没变，只是在函数<code>cnk</code>前面添加了<code>@memo</code>而已，就这么简单！</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">memo</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="n">cache</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line">    <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">wrap</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">args</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cache</span><span class="p">:</span>
</span><span class="line">            <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span><span class="o">=</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">wrap</span>
</span><span class="line">
</span><span class="line"><span class="nd">@memo</span>
</span><span class="line"><span class="k">def</span> <span class="nf">cnk</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">k</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">k</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="mi">1</span> <span class="c">#the order of `if` should not change!!!</span>
</span><span class="line">    <span class="k">if</span> <span class="n">n</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">return</span> <span class="n">cnk</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">k</span><span class="p">)</span><span class="o">+</span><span class="n">cnk</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>它的迭代版本也比较简单，这里使用了<code>defaultdict</code>，略高级的数据结构，和dict不同的是，当查找的key不存在对应的value时，会返回一个默认的值，这个很有用，下面的代码可以看到。
如果不了解<code>defaultdict</code>的话可以看下<a href="http://blog.jobbole.com/65218/">Python中的高级数据结构</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span><span class="line">
</span><span class="line"><span class="n">n</span><span class="p">,</span><span class="n">k</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span><span class="mi">7</span>
</span><span class="line"><span class="n">C</span><span class="o">=</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span><span class="line"><span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class="line">    <span class="n">C</span><span class="p">[</span><span class="n">row</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span>
</span><span class="line">    <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class="line">        <span class="n">C</span><span class="p">[</span><span class="n">row</span><span class="p">,</span><span class="n">col</span><span class="p">]</span><span class="o">=</span><span class="n">C</span><span class="p">[</span><span class="n">row</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">col</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="n">C</span><span class="p">[</span><span class="n">row</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">col</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">C</span><span class="p">[</span><span class="n">n</span><span class="p">,</span><span class="n">k</span><span class="p">])</span> <span class="c">#120</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>杨辉三角大家都熟悉，在国外这个叫<code>Pascal Triangle</code>，它和二项式系数特别相似，看下图，除了两边的数字之外，里面的任何一个数字都是由它上面相邻的两个元素相加得到，想想<code>C(n,k)=C(n-1,k-1)+C(n-1,k)</code>不也就是这个含义吗?</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/sanjiao.png" alt="image" /></p>

<p>所以说，顺序对于迭代版本的动态规划实现很重要，下面举个实例，用动态规划解决有向无环图的单源最短路径问题。假设有如下图所示的图，当然，我们看到的是这个有向无环图经过了拓扑排序之后的结果，从a到f的最短路径用灰色标明了。</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/dag_sp.png" alt="image" /></p>

<p>好，怎么实现呢? </p>

<p>我们有两种思考方式：</p>

<p><strong>1.”去哪里?”：我们顺向思维，首先假设从a点出发到所有其他点的距离都是无穷大，然后，按照拓扑排序的顺序，从a点出发，接着更新a点能够到达的其他的点的距离，那么就是b点和f点，b点的距离变成2，f点的距离变成9。因为这个有向无环图是经过了拓扑排序的，所以按照拓扑顺序访问一遍所有的点(到了目标点就可以停止了)就能够得到a点到所有已访问到的点的最短距离，也就是说，当到达哪个点的时候，我们就找到了从a点到该点的最短距离，拓扑排序保证了后面的点不会指向前面的点，所以访问到后面的点时不可能再更新它前面的点的最短距离！(这里的更新也就是<a href="http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-induction/">前面第4节介绍过的relaxtion</a>)这种思维方式的代码实现就是迭代版本。</strong></p>

<p>[<strong>这里涉及到了拓扑排序，<a href="http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-traversal/">前面第5节Traversal中介绍过了</a>，这里为了方便没看前面的童鞋理解，W直接使用的是经过拓扑排序之后的结果。</strong>]</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">topsort</span><span class="p">(</span><span class="n">W</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">W</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">dag_sp</span><span class="p">(</span><span class="n">W</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">):</span>
</span><span class="line">    <span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="n">u</span><span class="p">:</span><span class="nb">float</span><span class="p">(</span><span class="s">&#39;inf&#39;</span><span class="p">)</span> <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">W</span><span class="p">}</span> <span class="c">#</span>
</span><span class="line">    <span class="n">d</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">topsort</span><span class="p">(</span><span class="n">W</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">u</span> <span class="o">==</span> <span class="n">t</span><span class="p">:</span> <span class="k">break</span>
</span><span class="line">        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">W</span><span class="p">[</span><span class="n">u</span><span class="p">]:</span>
</span><span class="line">            <span class="n">d</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">v</span><span class="p">],</span> <span class="n">d</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">+</span> <span class="n">W</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">])</span>
</span><span class="line">    <span class="k">return</span> <span class="n">d</span><span class="p">[</span><span class="n">t</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="c">#邻接表</span>
</span><span class="line"><span class="n">W</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">:{</span><span class="mi">1</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">:</span><span class="mi">9</span><span class="p">},</span><span class="mi">1</span><span class="p">:{</span><span class="mi">2</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">:</span><span class="mi">6</span><span class="p">},</span><span class="mi">2</span><span class="p">:{</span><span class="mi">3</span><span class="p">:</span><span class="mi">7</span><span class="p">},</span><span class="mi">3</span><span class="p">:{</span><span class="mi">4</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">:</span><span class="mi">3</span><span class="p">},</span><span class="mi">4</span><span class="p">:{</span><span class="mi">5</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span><span class="mi">5</span><span class="p">:{}}</span>
</span><span class="line"><span class="n">s</span><span class="p">,</span><span class="n">t</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">dag_sp</span><span class="p">(</span><span class="n">W</span><span class="p">,</span><span class="n">s</span><span class="p">,</span><span class="n">t</span><span class="p">))</span> <span class="c">#7</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>用图来表示计算过程就是下面所示：</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/dag_sp_iter.png" alt="image" /></p>

<p><strong>2.”从哪里来?”：我们逆向思维，目标是要到f，那从a点经过哪个点到f点会近些呢?只能是求解从a点出发能够到达的那些点哪个距离f点更近，这里a点能够到达b点和f点，f点到f点距离是0，但是a到f点的距离是9，可能不是最近的路，所以还要看b点到f点有多近，看b点到f点有多近就是求解从b点出发能够到达的那些点哪个距离f点更近，所以又绕回来了，也就是递归下去，直到我们能够回答从a点经过哪个点到f点会更近。这种思维方式的代码实现就是递归版本。</strong></p>

<p>这种情况下，不需要输入是经过了拓扑排序的，所以你可以任意修改输入<code>W</code>中节点的顺序，结果都是一样的，而上面采用迭代实现方式必须要是拓扑排序了的，从中你就可以看出迭代版本和递归版本的区别了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span><span class="line"><span class="k">def</span> <span class="nf">memo</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="n">cache</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line">    <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">wrap</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">args</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cache</span><span class="p">:</span>
</span><span class="line">            <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span><span class="o">=</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">            <span class="c"># print(&#39;cache {0} = {1}&#39;.format(args[0],cache[args]))</span>
</span><span class="line">        <span class="k">return</span> <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">wrap</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">rec_dag_sp</span><span class="p">(</span><span class="n">W</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">):</span>
</span><span class="line">    <span class="nd">@memo</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">d</span><span class="p">(</span><span class="n">u</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">u</span> <span class="o">==</span> <span class="n">t</span><span class="p">:</span> <span class="k">return</span> <span class="mi">0</span>
</span><span class="line">        <span class="k">return</span> <span class="nb">min</span><span class="p">(</span><span class="n">W</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">]</span><span class="o">+</span><span class="n">d</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">W</span><span class="p">[</span><span class="n">u</span><span class="p">])</span>
</span><span class="line">    <span class="k">return</span> <span class="n">d</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">#邻接表</span>
</span><span class="line"><span class="n">W</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">:{</span><span class="mi">1</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">:</span><span class="mi">9</span><span class="p">},</span><span class="mi">1</span><span class="p">:{</span><span class="mi">2</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">:</span><span class="mi">6</span><span class="p">},</span><span class="mi">2</span><span class="p">:{</span><span class="mi">3</span><span class="p">:</span><span class="mi">7</span><span class="p">},</span><span class="mi">3</span><span class="p">:{</span><span class="mi">4</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">:</span><span class="mi">3</span><span class="p">},</span><span class="mi">4</span><span class="p">:{</span><span class="mi">5</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span><span class="mi">5</span><span class="p">:{}}</span>
</span><span class="line"><span class="n">s</span><span class="p">,</span><span class="n">t</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">rec_dag_sp</span><span class="p">(</span><span class="n">W</span><span class="p">,</span><span class="n">s</span><span class="p">,</span><span class="n">t</span><span class="p">))</span> <span class="c">#7</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>用图来表示计算过程就如下图所示：</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/dag_sp_rec.png" alt="image" /></p>

<p>[扩展内容：对DAG求单源最短路径的动态规划问题的总结，比较难理解，附上原文]</p>

<p>Although the basic algorithm is the same, there are many ways of finding the shortest path in a DAG, and, by extension, solving most DP problems. You could do it recursively, with memoization, or you could do it iteratively, with relaxation. For the recursion, you could start at the first node, try various “next steps,” and then recurse on the remainder, or (if you graph representation permits) you could look at the last node and try “previous steps” and recurse on the initial part. The former is usually much more natural, while the latter corresponds more closely to what happens in the iterative version.</p>

<p>Now, if you use the iterative version, you also have two choices: you can relax the edges out of each node (in topologically sorted order), or you can relax all edges into each node. The latter more obviously yields a correct result but requires access to nodes by following edges backward. This isn’t as far-fetched as it seems when you’re working with an implicit DAG in some nongraph problem. (For example, in the longest increasing subsequence problem, discussed later in this chapter, looking at all backward “edges” can be a useful perspective.)</p>

<p>Outward relaxation, called reaching, is exactly equivalent when you relax all edges. As explained, once you get to a node, all its in-edges will have been relaxed anyway. However, with reaching, you can do something that’s hard in the recursive version (or relaxing in-edges): pruning. If, for example, you’re only interested in finding all nodes that are within a distance r, you can skip any node that has distance estimate greater than r. You will still need to visit every node, but you can potentially ignore lots of edges during the relaxation. This won’t affect the asymptotic running time, though (Exercise 8-6).</p>

<p>Note that finding the shortest paths in a DAG is surprisingly similar to, for example, finding the longest path, or even counting the number of paths between two nodes in a DAG. The latter problem is exactly what we did with Pascal’s triangle earlier; the exact same approach would work for an arbitrary graph. These things aren’t quite as easy for general graphs, though. Finding shortest paths in a general graph is a bit harder (in fact, Chapter 9 is devoted to this topic), while finding the longest path is an unsolved problem (see Chapter 11 for more on this).</p>

<!--
![image](http://hujiaweibujidao.github.io/images/algos/dp_summary.png)
-->

<p>好，我们差不多搞清楚了动态规划的本质以及两种实现方式的优缺点，下面我们来实践下，举最常用的例子：<a href="http://hujiaweibujidao.github.io/blog/2014/05/18/matrix-chain/">矩阵链乘问题，内容较多，所以请点击链接过去阅读完了之后回来看总结</a>！</p>

<p>OK，希望我把动态规划讲清楚了，总结下：<strong>动态规划其实就是一个连续决策的过程，每次决策我们可能有多种选择(二项式系数和0-1背包问题中我们只有两个选择，DAG图的单源最短路径中我们的选择要看点的出边或者入边，矩阵链乘问题中就是矩阵链可以分开的位置总数…)，我们每次选择最好的那个作为我们的决策。所以，动态规划的时间复杂度其实和这两者有关，也就是子问题的个数以及子问题的选择个数，一般情况下动态规划算法的时间复杂度就是两者的乘积。</strong></p>

<p><strong>动态规划有两种实现方式：一种是带备忘录的递归形式，这种方式直接从原问题出发，遇到子问题就去求解子问题并存储子问题的解，下次遇到的时候直接取出来，问题求解的过程看起来就像是先自顶向下地展开问题，然后自下而上的进行决策；另一个实现方式是迭代方式，这种方式需要考虑如何给定一个子问题的求解方式，使得后面求解规模较大的问题是需要求解的子问题都已经求解好了，它的缺点就是可能有些子问题不要算但是它还是算了，而递归实现方式只会计算它需要求解的子问题。</strong></p>

<hr />

<p>练习1：来试试写写最长公共子序列吧，<a href="http://hujiaweibujidao.github.io/blog/2014/05/19/longest-common-subsequence/">这篇文章中给出了Python版本的5种实现方式</a>哟！</p>

<p>练习2：算法导论问题 15-4: Planning a company party 计划一个公司聚会</p>

<p>Start example
Professor Stewart is consulting for the president of a corporation that is planning a company party. The company has a hierarchical structure; that is, the supervisor relation forms a tree rooted at the president. The personnel office has ranked each employee with a conviviality rating, which is a real number. In order to make the party fun for all attendees, the president does not want both an employee and his or her immediate supervisor to attend.</p>

<p>Professor Stewart is given the tree that describes the structure of the corporation, using the left-child, right-sibling representation described in Section 10.4. Each node of the tree holds, in addition to the pointers, the name of an employee and that employee’s conviviality ranking. Describe an algorithm to make up a guest list that maximizes the sum of the conviviality ratings of the guests. Analyze the running time of your algorithm.</p>

<p>原问题可以转换成：假设有一棵树，用左孩子右兄弟的表示方式表示，树的每个结点有个值，选了某个结点，就不能选择它的父结点，求整棵树选的节点值最大是多少。</p>

<p>假设如下：</p>

<p>dp[i][0]表示不选i结点时，i子树的最大价值</p>

<p>dp[i][1]表示选i结点时，i子树的最大价值</p>

<p>列出状态方程</p>

<p>dp[i][0] = sum(max(dp[u][0], dp[u][1])) $\quad$   (如果不选i结点，u为结点i的儿子)</p>

<p>dp[i][1] = sum(dp[u][0]) + val[i]   $\quad$  (如果选i结点，val[i]表示i结点的价值)</p>

<p>最后就是求max(dp[root][0], dp[root][1])</p>

<p>返回<a href="http://hujiaweibujidao.github.io/python/">Python数据结构与算法设计篇目录</a></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-dynamic-programming/">http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-dynamic-programming/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Algorithms - C7 Greedy]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-greedy/"/>
    <updated>2014-07-01T11:10:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-greedy</id>
    <content type="html"><![CDATA[<p>最后更新时间：2014-7-7</p>

<p><strong><center>Python算法设计篇(7)</center></strong>
<strong><center>逸夫图书馆, 2014/7/1</center></strong></p>

<h3 id="centerchapter-7-greed-is-good-prove-itcenter"><center>Chapter 7: Greed is good? Prove it!</center></h3>

<blockquote>
  <p>It’s not a question of enough, pal.  <br />
  ——Gordon Gekko, Wall Street</p>
</blockquote>

<p>本节主要通过几个例子来介绍贪心策略，主要包括背包问题、哈夫曼编码和最小生成树</p>

<p>贪心算法顾名思义就是每次都贪心地选择当前最好的那个(局部最优解)，不去考虑以后的情况，而且选择了就不能够“反悔”了，如果原问题满足贪心选择性质和最优子结构，那么最后得到的解就是最优解。贪心算法和其他的算法比较有明显的区别，动态规划每次都是综合所有子问题的解得到当前的最优解(全局最优解)，而不是贪心地选择；回溯法是尝试选择一条路，如果选择错了的话可以“反悔”，也就是回过头来重新选择其他的试试。</p>

<p>这个算法想必大家也都很熟悉了，我觉得贪心法总是比较容易想到，但是很难证明它是正确的，所有对于一类问题，条件稍有不同也许就不能使用贪心策略了。这一节采用类似上节的形式，记录下原书中的一些重点难点内容</p>

<p>[果然贪心我领悟的不够，很多问题我貌似都讲不到点子上，大家将就着看下]</p>

<p>1.匹配问题 matching problem (maximum-weight matching problem)</p>

<p>问题是这样的，有一群人打算一起跳探戈，跳之前要进行分组，一个男人和一个女人成为一组，而且任意一个异性组合都会一个相应的匹配值(compatibility)，目标是求使得匹配值之和达到最大的分组方式。</p>

<p>To be on the safe side, just let me emphasize that this greedy solution would not work in general, with an arbitrary set of weights. The distinct powers of two are key here.</p>

<p>一般情况下，如果匹配值是任意值的话，这个问题使用贪心法是不行的！但是如果匹配值都是2的整数幂的话，那么贪心法就能解决这个问题了！[<strong>这点我不明白，这是此题的一个重点，避免误导，我附上原文，不解释了，如果读者有明白了的希望能留言告知，嘿嘿</strong>]</p>

<p>In this case (or the bipartite case, for that matter), greed won’t work in general. However, by some freak coincidence, all the compatibility numbers happen to be distinct powers of two. Now, what happens?</p>

<p>Let’s first consider what a greedy algorithm would look like here and then see why it yields an optimal result. We’ll be building a solution piece by piece—let the pieces be pairs and a partial solution be a set of pairs. Such a partial solution is valid only if no person in it participates in two (or more) of its pairs. The algorithm will then be roughly as follows:</p>

<ol>
  <li>
    <p>List potential pairs, sorted by decreasing compatibility.</p>
  </li>
  <li>
    <p>Pick the first unused pair from the list.</p>
  </li>
  <li>
    <p>Is anyone in the pair already occupied? If so, discard it; otherwise, use it.</p>
  </li>
  <li>
    <p>Are there any more pairs on the list? If so, go to 2.</p>
  </li>
</ol>

<p>As you’ll see later, this is rather similar to Kruskal’s algorithm for minimum spanning trees (although that works regardless of the edge weights). It also is a rather prototypical greedy algorithm. Its correctness is another matter. Using distinct powers of two is sort of cheating, because it would make virtually any greedy algorithm work; that is, you’d get an optimal result as long as you could get a valid solution at all. Even though it’s cheating (see Exercise 7-3), it illustrates the central idea here: making the greedy choice is safe. Using the most compatible of the remaining couples will always be at least as good as any other choice.</p>

<p>贪心解决的思路大致如下：首先列举出所有可能的组合，然后将它们按照匹配值进行降序排序，接着按顺序从中选择前面没有使用过而且人物没有在前面出现过的组合，遍历完整个序列就得到了匹配值之和最大的分组方式。</p>

<hr />

<p>[原书关于稳定婚姻的扩展知识 <strong>EAGER SUITORS AND STABLE MARRIAGES</strong>]</p>

<p>There is, in fact, one classical matching problem that can be solved (sort of) greedily: the stable marriage problem. The idea is that each person in a group has preferences about whom he or she would like to marry. We’d like to see everyone married, and we’d like the marriages to be stable, meaning that there is no man who prefers a woman outside his marriage who also prefers him. (To keep things simple, we disregard same-sex marriages and polygamy here.)</p>

<p>There’s a simple algorithm for solving this problem, designed by David Gale and Lloyd Shapley. The formulation is quite gender-conservative but will certainly also work if the gender roles are reversed. The algorithm runs for a number of rounds, until there are no unengaged men left. Each round consists of two steps:</p>

<ol>
  <li>
    <p>Each unengaged man proposes to his favorite of the women he has not yet asked.</p>
  </li>
  <li>
    <p>Each woman is (provisionally) engaged to her favorite suitor and rejects the rest.</p>
  </li>
</ol>

<p>This can be viewed as greedy in that we consider only the available favorites (both of the men and women) right now. You might object that it’s only sort of greedy in that we don’t lock in and go straight for marriage; the women are allowed to break their engagement if a more interesting suitor comes along. Even so, once a man has been rejected, he has been rejected for good, which means that we’re guaranteed progress.</p>

<p>To show that this is an optimal and correct algorithm, we need to know that everyone gets married and that the marriages are stable. Once a woman is engaged, she stays engaged (although she may replace her fiancé). There is no way we can get stuck with an unmarried pair, because at some point the man would have proposed to the woman, and she would have (provisionally) accepted his proposal.</p>

<p>How do we know the marriages are stable? Let’s say Scarlett and Stuart are both married but not to each other. Is it possible they secretly prefer each other to their current spouses? No: if so, Stuart would already have proposed to her. If she accepted that proposal, she must later have found someone she liked better; if she rejected it, she would already have a preferable mate.</p>

<p>Although this problem may seem silly and trivial, it is not. For example, it is used for admission to some colleges and to allocate medical students to hospital jobs. There have, in fact, been written entire books (such as those by Donald Knuth and by Dan Gusfield and Robert W. Irwing) devoted to the problem and its variations.</p>

<hr />

<p>2.背包问题</p>

<p>这个问题大家很熟悉了，而且该问题的变种很多，常见的有整数背包和部分背包问题。问题大致是这样的，假设现在我们要装一些物品到一个书包里，每样物品都有一定的重量w和价值v，但是呢，这个书包承重量有限，所以我们要进行决策，如何选择物品才能使得最终的价值最大呢？整数背包是说一个物品要么拿要么不拿，比如茶杯或者台灯等等，而部分背包问题是说一个物品你可以拿其中的一部分，比如一袋子苹果放不下可以只装半袋子苹果。[更加复杂的版本是说每个物品都有一定的体积，同时书包还有体积的限制等等]</p>

<p>很显然，部分背包问题是可以用贪心法来求解的，我们计算每个物品的单位重量的价值，然后将它们降序排序，接着开始拿物品，只要装得下全部的该类物品那么就全装进去，如果不能全部装下就装部分进去直到书包载重量满了为止，这种策略肯定是正确的。</p>

<p>但是，整数背包问题就不能用贪心策略了。整数背包问题还可以分成两种：一种是每类物品数量都是有限的(bounded)，比如只有3个茶杯和2个台灯；还有一种是数量无限的(unbounded)，也就是你想要多少有多少，这两种都不能使用贪心策略。0-1背包问题是典型的第一种整数背包问题，看下算法导论上的这个例子就明白了，在(b)中，虽然物品1单位重量的价值最大，但是任何包含物品1的选择都没有超过选择物品2和物品3得到的最优解220；而(c)中能达到最大的价值是240。</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/knapsack.png" alt="image" /></p>

<p>整数背包问题还没有能够在多项式时间内解决它的算法，下一节我们介绍的动态规划能够解决0-1背包问题，但是是一个伪多项式时间复杂度。[实际时间复杂度是$O(nw)$，n是物品数目，w是书包载重量，严格意义上说这不是一个多项式时间复杂度]</p>

<p>There are two important cases of the integer knapsack problem—the bounded and unbounded cases. The bounded case assumes we have a fixed number of objects in each category,4 and the unbounded case lets us use as many as we want. Sadly, greed won’t work in either case. In fact, these are both unsolved problems, in the sense that no polynomial algorithms are known to solve them. There is hope, however. As you’ll see in the next chapter, we can use dynamic programming to solve the problems in pseudopolynomial time, which may be good enough in many important cases. Also, for the unbounded case, it turns out that the greedy approach ain’t half bad! Or, rather, it’s at least half good, meaning that we’ll never get less than half the optimum value. And with a slight modification, you can get as good results for the bounded version, too. This concept of greedy approximation is discussed in more detail in Chapter 11.</p>

<p>3.哈夫曼编码</p>

<p>这个问题原始是用来实现一个可变长度的编码问题，但可以总结成这样一个问题，假设我们有很多的叶子节点，每个节点都有一个权值w(可以是任何有意义的数值，比如它出现的概率)，我们要用这些叶子节点构造一棵树，那么每个叶子节点就有一个深度d，我们的目标是使得所有叶子节点的权值与深度的乘积之和<script type="math/tex">\Sigma w_{i}d_{i}</script>最小。</p>

<p>很自然的一个想法就是，对于权值大的叶子节点我们让它的深度小些(更加靠近根节点)，权值小的让它的深度相对大些，这样的话我们自然就会想着每次取当前权值最小的两个节点将它们组合出一个父节点，一直这样组合下去直到只有一个节点即根节点为止。如下图所示的示例</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/huffmanexample.png" alt="image" /></p>

<p>代码实现比较简单，使用了<code>heapq</code>模块，树结构是用list来保存的，有意思的是其中<code>zip</code>函数的使用，其中统计函数<code>count</code>作为<code>zip</code>函数的参数，<a href="https://docs.python.org/2/library/functions.html#zip">详情见python docs</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">heapq</span> <span class="kn">import</span> <span class="n">heapify</span><span class="p">,</span> <span class="n">heappush</span><span class="p">,</span> <span class="n">heappop</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">count</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">huffman</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">frq</span><span class="p">):</span>
</span><span class="line">    <span class="n">num</span> <span class="o">=</span> <span class="n">count</span><span class="p">()</span>
</span><span class="line">    <span class="n">trees</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">frq</span><span class="p">,</span> <span class="n">num</span><span class="p">,</span> <span class="n">seq</span><span class="p">))</span>            <span class="c"># num ensures valid ordering</span>
</span><span class="line">    <span class="n">heapify</span><span class="p">(</span><span class="n">trees</span><span class="p">)</span>                              <span class="c"># A min-heap based on freq</span>
</span><span class="line">    <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">trees</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>                       <span class="c"># Until all are combined</span>
</span><span class="line">        <span class="n">fa</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="n">heappop</span><span class="p">(</span><span class="n">trees</span><span class="p">)</span>               <span class="c"># Get the two smallest trees</span>
</span><span class="line">        <span class="n">fb</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">heappop</span><span class="p">(</span><span class="n">trees</span><span class="p">)</span>
</span><span class="line">        <span class="n">n</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class="line">        <span class="n">heappush</span><span class="p">(</span><span class="n">trees</span><span class="p">,</span> <span class="p">(</span><span class="n">fa</span><span class="o">+</span><span class="n">fb</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">]))</span>     <span class="c"># Combine and re-add them</span>
</span><span class="line">    <span class="c"># print trees</span>
</span><span class="line">    <span class="k">return</span> <span class="n">trees</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">seq</span> <span class="o">=</span> <span class="s">&quot;abcdefghi&quot;</span>
</span><span class="line"><span class="n">frq</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">20</span><span class="p">]</span>
</span><span class="line"><span class="k">print</span> <span class="n">huffman</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">frq</span><span class="p">)</span>
</span><span class="line"><span class="c"># [[&#39;i&#39;, [[&#39;a&#39;, &#39;b&#39;], &#39;e&#39;]], [[&#39;f&#39;, &#39;g&#39;], [[&#39;c&#39;, &#39;d&#39;], &#39;h&#39;]]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>现在我们考虑另外一个问题，合并文件问题，假设我们将大小为 m 和大小为 n 的两个文件合并在一起需要 m+n 的时间，现在给定一些文件，求一个最优的合并策略使得所需要的时间最小。</p>

<p>如果我们将上面哈夫曼树中的叶子节点看成是文件，两个文件合并得到的大文件就是树中的内部节点，假设每个节点上都有一个值表示该文件的大小，合并得到的大文件上的值是合并的两个文件的值之和，那我们的目标是就是使得内部节点的和最小的合并方案，因为叶子节点的大小是固定的，所以实际上也就是使得所有节点的和最小的合并方案！</p>

<p>consider how each leaf contributes to the sum over all nodes: the leaf weight occurs as a summand once in each of its ancestor nodes—which means that the sum is exactly the same! That is, sum(weight(node) for node in nodes) is exactly the same as sum(depth(leaf)*weight(leaf) for leaf in leaves). </p>

<p>细想也就有了一个叶子节点的所有祖先节点们都有一份该叶子节点的值包含在里面，也就是说所有叶子节点的深度与它的值的乘积之和就是所有节点的值之和！可以看下下面的示例图，最终我们知道哈夫曼树就是这个问题的解决方案。</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/treedemo.png" alt="image" /></p>

<p>[哈夫曼树问题的一个扩展就是最优二叉搜索树问题，后者可以用动态规划算法来求解，感兴趣的话可以阅读算法导论中动态规划部分内容]</p>

<p>4.最小生成树</p>

<p>最小生成树是图中的重要算法，主要有两个大家耳熟能详的Kruskal和Prim算法，两个算法都是基于贪心策略，不过略有不同。</p>

<p>[如果对最小生成树问题的历史感兴趣的话作者推荐看这篇论文<code>“On the History of the Minimum Spanning Tree Problem,” by Graham and Hell</code>]</p>

<p>不了解Kruskal或者Prim算法的童鞋可以参考算法导论的示例图理解下面的内容</p>

<p>Kruskal算法</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/kruskal.png" alt="image" /></p>

<p>Prim算法</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/prim.png" alt="image" /></p>

<p>连通无向图G的生成树是指包含它所有顶点但是部分边的子图，假设每条边都有一个权值，那么权值之和最小的生成树就是最小生成树，它不一定是唯一的。如果图G是非连通的，那么它就没有生成树。</p>

<p>前面我们在介绍遍历的时候也得到过生成树，那里我们是一个顶点一个顶点进行遍历，下面我们通过每次添加一条边来得到最小生成树，而且每次我们贪心地选择剩下的边中权值最小的那条边，但是要保证不能形成环！</p>

<p>那怎么判断是否会出现环呢？</p>

<p>假设我们要考虑是否添加边(u,v)，一个最直接的想法就是遍历已生成的树，看是否能够从 u 到 v，如果能，那么就舍弃这条边继续考虑后面的边，否则就添加这条边。很显然，采用遍历的方式太费时了。</p>

<p>再假设我们用一个集合来保存我们已经生成的树中的节点，如果我们要考虑是否添加边(u,v)，那么我们就看下集合中这两个节点是否都存在，如果都存在的话说明这条边加进来的话会形成环。这么做可以在常数时间内确定是否会形成环，但是…它是错误的！除非我们每次添加一条边之后得到的局部解一直都只有一棵树才对，如果之前加入的节点 u 和节点 v 在不同的分支上的话，上面的判断不能确定添加这条边之后会形成环！[<strong>后面的Prim算法采用的策略就能保证局部解一直都是一棵树</strong>]</p>

<p>下面我们可以试着让每个加入的节点都知道自己处在哪个分支上，而且我们可以用分支中的某一个节点作为该分支的“代表”，该分支中的所有节点都指向这个“代表”，显然我们接下来会遇到分支合并的问题。如果两个分支因为某条边的加入而连通了，那么它们就要合并了，那怎么合并呢？我们让两个分支中的所有节点都指向同一个“代表”就行了，但是这是一个线性时间的操作，我们可以做得更快！假设我们改变下策略，让每个节点指向另一个节点(这个节点不一定是分支的“代表”)，如果我们顺着指向链一直找，就肯定能找到“代表”，因为“代表”是自己指向自己的。这样的话，如果两个分支要合并，只需要让其中的一个分支的“代表”指向另一个分支的“代表”就行啦！这就是一个常数时间的操作。</p>

<p>基于上面的思路我们就有了下面的实现</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#A Naïve Implementation of Kruskal’s Algorithm</span>
</span><span class="line"><span class="k">def</span> <span class="nf">naive_find</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="n">u</span><span class="p">):</span>                           <span class="c"># Find component rep.</span>
</span><span class="line">    <span class="k">while</span> <span class="n">C</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">!=</span> <span class="n">u</span><span class="p">:</span>                            <span class="c"># Rep. would point to itself</span>
</span><span class="line">        <span class="n">u</span> <span class="o">=</span> <span class="n">C</span><span class="p">[</span><span class="n">u</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">u</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">naive_union</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">):</span>
</span><span class="line">    <span class="n">u</span> <span class="o">=</span> <span class="n">naive_find</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="n">u</span><span class="p">)</span>                        <span class="c"># Find both reps</span>
</span><span class="line">    <span class="n">v</span> <span class="o">=</span> <span class="n">naive_find</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
</span><span class="line">    <span class="n">C</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>                                    <span class="c"># Make one refer to the other</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">naive_kruskal</span><span class="p">(</span><span class="n">G</span><span class="p">):</span>
</span><span class="line">    <span class="n">E</span> <span class="o">=</span> <span class="p">[(</span><span class="n">G</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">],</span><span class="n">u</span><span class="p">,</span><span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">G</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">G</span><span class="p">[</span><span class="n">u</span><span class="p">]]</span>
</span><span class="line">    <span class="n">T</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>                                   <span class="c"># Empty partial solution</span>
</span><span class="line">    <span class="n">C</span> <span class="o">=</span> <span class="p">{</span><span class="n">u</span><span class="p">:</span><span class="n">u</span> <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">G</span><span class="p">}</span>                        <span class="c"># Component reps</span>
</span><span class="line">    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">E</span><span class="p">):</span>                   <span class="c"># Edges, sorted by weight</span>
</span><span class="line">        <span class="k">if</span> <span class="n">naive_find</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="n">u</span><span class="p">)</span> <span class="o">!=</span> <span class="n">naive_find</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="n">v</span><span class="p">):</span>
</span><span class="line">            <span class="n">T</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">))</span>                       <span class="c"># Different reps? Use it!</span>
</span><span class="line">            <span class="n">naive_union</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>                <span class="c"># Combine components</span>
</span><span class="line">    <span class="k">return</span> <span class="n">T</span>
</span><span class="line">
</span><span class="line"><span class="n">G</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="mi">0</span><span class="p">:</span> <span class="p">{</span><span class="mi">1</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span>
</span><span class="line">    <span class="mi">1</span><span class="p">:</span> <span class="p">{</span><span class="mi">2</span><span class="p">:</span><span class="mi">5</span><span class="p">},</span>
</span><span class="line">    <span class="mi">2</span><span class="p">:</span> <span class="p">{</span><span class="mi">3</span><span class="p">:</span><span class="mi">2</span><span class="p">},</span>
</span><span class="line">    <span class="mi">3</span><span class="p">:</span> <span class="nb">set</span><span class="p">()</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="k">print</span> <span class="nb">list</span><span class="p">(</span><span class="n">naive_kruskal</span><span class="p">(</span><span class="n">G</span><span class="p">))</span> <span class="c">#[(0, 1), (2, 3), (0, 2)]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>从上面的分析我们可以看到，虽然合并时修改指向的操作是常数时间的，但是通过指向链的方式找到“代表”所花的时间是线性的，而这里还可以做些改进。</p>

<p>首先，在合并(union)的时候我们让“小”分支指向“大”分支，这样平衡了之后平均查找时间肯定有所下降，那么怎么确定分支的“大小”呢？这个可以用平衡树的方式来思考，假设我们给每个节点都设置一个权重(rank or weight)，其实重要的还是“代表”的权重，如果要合并的两个分支的“代表”的权重相等的话，在将“小”分支指向“大”分支之后，还要将“大”分支的权重加1。</p>

<p>其次，在查找(find)的时候我们一边查找一边修正经过的点的指向，让它直接指向“代表”，这个怎么做到呢？使用递归就行了，因为递归在找到了之后会回溯，回溯的时候就可以设置其他节点的“代表”了，这个叫做path compression技术，是Kruskal算法常用的一个技巧。</p>

<p>基于上面的改进就有了下面优化的Kruskal算法</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#Kruskal’s Algorithm</span>
</span><span class="line"><span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="n">u</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">C</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">!=</span> <span class="n">u</span><span class="p">:</span>
</span><span class="line">        <span class="n">C</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="n">C</span><span class="p">[</span><span class="n">u</span><span class="p">])</span>                    <span class="c"># Path compression</span>
</span><span class="line">    <span class="k">return</span> <span class="n">C</span><span class="p">[</span><span class="n">u</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">union</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="n">R</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">):</span>
</span><span class="line">    <span class="n">u</span><span class="p">,</span> <span class="n">v</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="n">u</span><span class="p">),</span> <span class="n">find</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">R</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">R</span><span class="p">[</span><span class="n">v</span><span class="p">]:</span>                             <span class="c"># Union by rank</span>
</span><span class="line">        <span class="n">C</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">u</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="n">C</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
</span><span class="line">    <span class="k">if</span> <span class="n">R</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">==</span> <span class="n">R</span><span class="p">[</span><span class="n">v</span><span class="p">]:</span>                            <span class="c"># A tie: Move v up a level</span>
</span><span class="line">        <span class="n">R</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">kruskal</span><span class="p">(</span><span class="n">G</span><span class="p">):</span>
</span><span class="line">    <span class="n">E</span> <span class="o">=</span> <span class="p">[(</span><span class="n">G</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">],</span><span class="n">u</span><span class="p">,</span><span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">G</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">G</span><span class="p">[</span><span class="n">u</span><span class="p">]]</span>
</span><span class="line">    <span class="n">T</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
</span><span class="line">    <span class="n">C</span><span class="p">,</span> <span class="n">R</span> <span class="o">=</span> <span class="p">{</span><span class="n">u</span><span class="p">:</span><span class="n">u</span> <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">G</span><span class="p">},</span> <span class="p">{</span><span class="n">u</span><span class="p">:</span><span class="mi">0</span> <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">G</span><span class="p">}</span>   <span class="c"># Comp. reps and ranks</span>
</span><span class="line">    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">E</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">find</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="n">u</span><span class="p">)</span> <span class="o">!=</span> <span class="n">find</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="n">v</span><span class="p">):</span>
</span><span class="line">            <span class="n">T</span><span class="o">.</span><span class="n">add</span><span class="p">((</span><span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">))</span>
</span><span class="line">            <span class="n">union</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="n">R</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">T</span>
</span><span class="line">
</span><span class="line"><span class="n">G</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="mi">0</span><span class="p">:</span> <span class="p">{</span><span class="mi">1</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span>
</span><span class="line">    <span class="mi">1</span><span class="p">:</span> <span class="p">{</span><span class="mi">2</span><span class="p">:</span><span class="mi">5</span><span class="p">},</span>
</span><span class="line">    <span class="mi">2</span><span class="p">:</span> <span class="p">{</span><span class="mi">3</span><span class="p">:</span><span class="mi">2</span><span class="p">},</span>
</span><span class="line">    <span class="mi">3</span><span class="p">:</span> <span class="nb">set</span><span class="p">()</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="k">print</span> <span class="nb">list</span><span class="p">(</span><span class="n">kruskal</span><span class="p">(</span><span class="n">G</span><span class="p">))</span> <span class="c">#[(0, 1), (2, 3), (0, 2)]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接下来就是Prim算法了，它其实就是我们前面介绍的traversal算法中的一种，不同点是它对待办事项(to-do list，即前面提到的“边缘节点”，也就是我们已经包含的这些节点能够直接到达的那些节点)进行了一定的排序，我们在实现BFS时使用的是双端队列<code>deque</code>，此时我们只要把它改成一个优先队列(priority queue)就行了，这里选用<code>heapq</code>模块中的堆<code>heap</code>。</p>

<p>Prim算法不断地添加新的边(也可以说是一个新的顶点)，一旦我们加入了一条新的边，可能会导致某些原来的边缘节点到生成树的距离更加近了，所以我们要更新一下它们的距离值，然后重新调整下排序，那怎么修改距离值呢？我们可以先找到原来的那个节点，然后再修改它的距离值接着重新调整堆，但是这么做实在是太麻烦了！这里有一个巧妙的技巧就是直接向堆中插入新的距离值的节点！为什么可以呢？因为插入的新节点B的距离值比原来的节点A的距离值小，那么Prim算法添加顶点的时候肯定是先弹出堆中的节点B，后面如果弹出节点A的话，因为这个节点已经添加进入了，直接忽略就行了，也就是说我们这么做不仅很简单，而且并没有把原来的问题搞砸了。下面是作者给出的详细解释，总共三点，第三点是重复的添加不会影响算法的渐近时间复杂度</p>

<p>• We’re using a priority queue, so if a node has been added multiple times, by the time we remove one of its entries, it will be the one with the lowest weight (at that time), which is the one we want.</p>

<p>• We make sure we don’t add the same node to our traversal tree more than once. This can be ensured by a constant-time membership check. Therefore, all but one of the queue entries for any given node will be discarded.</p>

<p>• The multiple additions won’t affect asymptotic running time</p>

<p>[重新添加一次权值减小了的节点就相当于是松弛(或者说是隐含了松弛操作在里面)，Re-adding a node with a lower weight is equivalent to a relaxation，这两种方式是可以相互交换的，后面图算法中作者在实现Dijkstra算法时使用的是relax，那其实我们还可以实现带relex的Prim和不带relax的Dijkstra]</p>

<p>根据上面的分析就有了下面的Prim算法实现</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">heapq</span> <span class="kn">import</span> <span class="n">heappop</span><span class="p">,</span> <span class="n">heappush</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">prim</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
</span><span class="line">    <span class="n">P</span><span class="p">,</span> <span class="n">Q</span> <span class="o">=</span> <span class="p">{},</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="n">s</span><span class="p">)]</span>
</span><span class="line">    <span class="k">while</span> <span class="n">Q</span><span class="p">:</span>
</span><span class="line">        <span class="n">_</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">u</span> <span class="o">=</span> <span class="n">heappop</span><span class="p">(</span><span class="n">Q</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">P</span><span class="p">:</span> <span class="k">continue</span>
</span><span class="line">        <span class="n">P</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span>
</span><span class="line">        <span class="k">for</span> <span class="n">v</span><span class="p">,</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">G</span><span class="p">[</span><span class="n">u</span><span class="p">]</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span><span class="line">            <span class="n">heappush</span><span class="p">(</span><span class="n">Q</span><span class="p">,</span> <span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">))</span> <span class="c">#weight, predecessor node, node</span>
</span><span class="line">    <span class="k">return</span> <span class="n">P</span>
</span><span class="line">
</span><span class="line"><span class="n">G</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="mi">0</span><span class="p">:</span> <span class="p">{</span><span class="mi">1</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span>
</span><span class="line">    <span class="mi">1</span><span class="p">:</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span><span class="mi">5</span><span class="p">},</span>
</span><span class="line">    <span class="mi">2</span><span class="p">:</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span><span class="mi">2</span><span class="p">},</span>
</span><span class="line">    <span class="mi">3</span><span class="p">:</span> <span class="p">{</span><span class="mi">2</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">:</span><span class="mi">4</span><span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="k">print</span> <span class="n">prim</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="c"># {0: None, 1: 0, 2: 0, 3: 2}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />

<p>[扩展知识，另一个角度来看最小生成树 <strong>A SLIGHTLY DIFFERENT PERSPECTIVE</strong>]</p>

<p>In their historical overview of minimum spanning tree algorithms, Ronald L. Graham and Pavol Hell outline three algorithms that they consider especially important and that have played a central role in the history of the problem. The first two are the algorithms that are commonly attributed to Kruskal and Prim (although the second one was originally formulated by Vojtěch Jarník in 1930), while the third is the one initially described by Borůvka. Graham and Hell succinctly explain the algorithms as follows. A partial solution is a spanning forest, consisting of a set of fragments (components, trees). Initially, each node is a fragment. In each iteration, edges are added, joining fragments, until we have a spanning tree.</p>

<p>Algorithm 1: Add a shortest edge that joins two different fragments.</p>

<p>Algorithm 2: Add a shortest edge that joins the fragment containing the root to another fragment. </p>

<p>Algorithm 3: For every fragment, add the shortest edge that joins it to another fragment.</p>

<p>For algorithm 2, the root is chosen arbitrarily at the beginning. For algorithm 3, it is assumed that all edge weights are different to ensure that no cycles can occur. As you can see, all three algorithms are based on the same fundamental fact—that the shortest edge over a cut is safe. Also, in order to implement them efficiently, you need to be able to find shortest edges, detect whether two nodes belong to the same fragment, and so forth (as explained for algorithms 1 and 2 in the main text). Still, these brief explanations can be useful as a memory aid or to get the bird’s-eye perspective on what’s going on.</p>

<hr />

<p>5.Greed Works. But When?</p>

<p>还是老话题，贪心算法真的很好，有时候也比较容易想到，但是它什么时候是正确的呢？</p>

<p>针对这个问题，作者提出了些建议和方法[都比较难翻译和理解，感兴趣还是阅读原文较好]</p>

<p>(1)Keeping Up with the Best</p>

<p>This is what Kleinberg and Tardos (in Algorithm Design) call staying ahead. The idea is to show that as you build your solution, one step at a time, the greedy algorithm will always have gotten at least as far as a hypothetical optimal algorithm would have. Once you reach the finish line, you’ve shown that greed is optimal. </p>

<p>(2)No Worse Than Perfect</p>

<p>This is a technique I used in showing the greedy choice property for Huffman’s algorithm. It involves showing that you can transform a hypothetical optimal solution to the greedy one, without reducing the quality. Kleinberg and Tardos call this an exchange argument. </p>

<p>(3)Staying Safe</p>

<p>This is where we started: to make sure a greedy algorithm is correct, we must make sure each greedy step along the way is safe. One way of doing this is the two-part approach of showing (1) the greedy choice property, that is, that a greedy choice is compatible with optimality, and (2) optimal substructure, that is, that the remaining subproblem is a smaller instance that must also be solved optimally. </p>

<p>[扩展知识：算法导论中还介绍了贪心算法的内在原理，也就是拟阵，贪心算法一般都是求这个拟阵的最大独立子集，方法就是从一个空的独立子集开始，从一个已经经过排序的序列中依次取出一个元素，尝试添加到独立子集中，如果新元素加入之后的集合仍然是一个独立子集的话那就加入进去，这样就形成了一个更大的独立子集，待遍历完整个序列时我们就得到最大的独立子集。拟阵的内容比较难，感兴趣不妨阅读下算法导论然后证明一两道练习题挑战下，嘻嘻]</p>

<p>用Python代码来形容上面的过程就是</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#贪心算法的框架 [拟阵的思想]</span>
</span><span class="line"><span class="k">def</span> <span class="nf">greedy</span><span class="p">(</span><span class="n">E</span><span class="p">,</span> <span class="n">S</span><span class="p">,</span> <span class="n">w</span><span class="p">):</span>
</span><span class="line">    <span class="n">T</span> <span class="o">=</span> <span class="p">[]</span>                                      <span class="c"># Emtpy, partial solution</span>
</span><span class="line">    <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">E</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">w</span><span class="p">):</span>                  <span class="c"># Greedily consider elements</span>
</span><span class="line">        <span class="n">TT</span> <span class="o">=</span> <span class="n">T</span> <span class="o">+</span> <span class="p">[</span><span class="n">e</span><span class="p">]</span>                            <span class="c"># Tentative solution</span>
</span><span class="line">        <span class="k">if</span> <span class="n">TT</span> <span class="ow">in</span> <span class="n">S</span><span class="p">:</span> <span class="n">T</span> <span class="o">=</span> <span class="n">TT</span>                      <span class="c"># Is it valid? Use it!</span>
</span><span class="line">    <span class="k">return</span> <span class="n">T</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />

<p>练习：<a href="http://hujiaweibujidao.github.io/blog/2014/05/20/delete-number-problem/">试试这道删数问题吧，这里对比了贪心算法和动态规划算法两种解法</a></p>

<p>返回<a href="http://hujiaweibujidao.github.io/python/">Python数据结构与算法设计篇目录</a></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-greedy/">http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-greedy/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Algorithms - C6 Divide and Combine and Conquer]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-divide-and-combine-and-conquer/"/>
    <updated>2014-07-01T11:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-divide-and-combine-and-conquer</id>
    <content type="html"><![CDATA[<p>最后更新时间：2014-7-7</p>

<p><strong><center>Python算法设计篇(6)</center></strong>
<strong><center>逸夫图书馆, 2014/7/1</center></strong></p>

<h3 id="centerchapter-6-divide-and-combine-and-conquercenter"><center>Chapter 6: Divide and Combine and Conquer</center></h3>

<blockquote>
  <p>Divide and rule, a sound motto; Unite and lead, a better one.      <br />
  ——Johann Wolfgang von Goethe, Gedichte</p>
</blockquote>

<p>本节主要介绍分治法策略，提到了树形问题的平衡性以及基于分治策略的排序算法</p>

<p>本节的标题写全了就是：<strong>divide the problem instance, solve subproblems recursively, combine the results, and thereby conquer the problem</strong></p>

<p>简言之就是将原问题划分成几个小问题，然后递归地解决这些小问题，最后综合它们的解得到问题的解。分治法的思想我想大家都已经很清楚了，所以我就不过多地介绍它了，下面摘录些原书中的重点内容。</p>

<p>1.平衡性是树形问题的关键</p>

<p>如果我们将子问题看做节点，将问题之间的依赖关系(dependencies or reductions)看做边，那么我们就得到了子问题图(subproblem graph )，最简单的子问题图就是树形结构问题，例如我们之前提到过的递归树的形式。也许子问题之间有依赖关系，但是对于每个子问题我们都是可以独立求解的，根据我们前面学的内容，只要我们能够找到合适的规约，我们就可以直接使用递归形式的算法将这个问题解决。[至于子问题间有重叠的话我们后面会详细介绍动态规划的方法来解决这类问题，这里我们不考虑]</p>

<p>前面我们学的内容已经完全足够我们理解分治法了，第3节的Divide-and-conquer recurrences，第4节的Strong induction，还有第5节的Recursive traversal</p>

<p>The recurrences tell you something about the performance involved, the induction gives you a tool for understanding how the algorithms work, and the recursive traversal (DFS in trees) is a raw skeleton for the algorithms.</p>

<p>但是，我们前面介绍Induction时总是从 n-1 到 n，这节我们要考虑平衡性，我们希望从 n/2 到 n，也就是说我们假设我们能够解决规模为原问题一半的子问题。</p>

<p>假设对于同一个问题，我们有下面两个解决方案，哪个方案更好些呢？</p>

<p>(1)T(n)=T(n-1)+T(1)+n</p>

<p>(2)T(n)=2T(n/2)+n</p>

<p>如果从时间复杂度来评价的话，前者是$O(n^2)$的，而后者是$O(n lg n)$的，所以是后者更好些。下图以递归树的形式显示了两种方案的不同</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/balance.png" alt="image" /></p>

<p>2.典型的分治法</p>

<p>下面是典型分治法的伪代码，很容易理解对吧</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># Pseudocode(ish)</span>
</span><span class="line"><span class="k">def</span> <span class="nf">divide_and_conquer</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">divide</span><span class="p">,</span> <span class="n">combine</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">S</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span> <span class="k">return</span> <span class="n">S</span>
</span><span class="line">    <span class="n">L</span><span class="p">,</span> <span class="n">R</span> <span class="o">=</span> <span class="n">divide</span><span class="p">(</span><span class="n">S</span><span class="p">)</span>
</span><span class="line">    <span class="n">A</span> <span class="o">=</span> <span class="n">divide_and_conquer</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">divide</span><span class="p">,</span> <span class="n">combine</span><span class="p">)</span>
</span><span class="line">    <span class="n">B</span> <span class="o">=</span> <span class="n">divide_and_conquer</span><span class="p">(</span><span class="n">R</span><span class="p">,</span> <span class="n">divide</span><span class="p">,</span> <span class="n">combine</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">combine</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>用图形来表示如下，上面部分是分(division)，下面部分是合(combination)</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/dcc.png" alt="image" /></p>

<p>二分查找是最常用的采用分治策略的算法，我们经常使用的版本控制系统(evision control systems=RCSs)查找代码中发生某个变化是在哪个版本时采用的正是二分查找策略。</p>

<p>Python中<code>bisect</code>模块也正是利用了二分查找策略，其中方法<code>bisect</code>的作用是返回要找到元素的位置，<code>bisect_left</code>是其左边的那个位置，而<code>bisect_right</code>和<code>bisect</code>的作用是一样的，函数<code>insort</code>也是这样设计的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">bisect</span> <span class="kn">import</span> <span class="n">bisect</span>
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
</span><span class="line"><span class="k">print</span> <span class="n">bisect</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="c">#4</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">bisect</span> <span class="kn">import</span> <span class="n">bisect_left</span><span class="p">,</span> <span class="n">bisect_right</span>
</span><span class="line"><span class="k">print</span> <span class="n">bisect_left</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="c">#3</span>
</span><span class="line"><span class="k">print</span> <span class="n">bisect_right</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="c">#4</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>二分查找策略很好，但是它有个前提，序列必须是有序的才可以这样做，为了高效地得到中间位置的元素，于是就有了二叉搜索树，这个我们在<a href="http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-Trees/">数据结构篇中已经详细介绍过了</a>，下面给出一份完整的二叉搜索树的实现，不过多介绍了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">Node</span><span class="p">:</span>
</span><span class="line">    <span class="n">lft</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">    <span class="n">rgt</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">key</span> <span class="o">=</span> <span class="n">key</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">val</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">node</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span> <span class="k">return</span> <span class="n">Node</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>      <span class="c"># Empty leaf: Add node here</span>
</span><span class="line">    <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">key</span> <span class="o">==</span> <span class="n">key</span><span class="p">:</span> <span class="n">node</span><span class="o">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">val</span>          <span class="c"># Found key: Replace val</span>
</span><span class="line">    <span class="k">elif</span> <span class="n">key</span> <span class="o">&lt;</span> <span class="n">node</span><span class="o">.</span><span class="n">key</span><span class="p">:</span>                        <span class="c"># Less than the key?</span>
</span><span class="line">        <span class="n">node</span><span class="o">.</span><span class="n">lft</span> <span class="o">=</span> <span class="n">insert</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">lft</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>   <span class="c"># Go left</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>                                       <span class="c"># Otherwise...</span>
</span><span class="line">        <span class="n">node</span><span class="o">.</span><span class="n">rgt</span> <span class="o">=</span> <span class="n">insert</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">rgt</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>   <span class="c"># Go right</span>
</span><span class="line">    <span class="k">return</span> <span class="n">node</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">node</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span> <span class="k">raise</span> <span class="ne">KeyError</span>             <span class="c"># Empty leaf: It&#39;s not here</span>
</span><span class="line">    <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">key</span> <span class="o">==</span> <span class="n">key</span><span class="p">:</span> <span class="k">return</span> <span class="n">node</span><span class="o">.</span><span class="n">val</span>         <span class="c"># Found key: Return val</span>
</span><span class="line">    <span class="k">elif</span> <span class="n">key</span> <span class="o">&lt;</span> <span class="n">node</span><span class="o">.</span><span class="n">key</span><span class="p">:</span>                        <span class="c"># Less than the key?</span>
</span><span class="line">        <span class="k">return</span> <span class="n">search</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">lft</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>            <span class="c"># Go left</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>                                       <span class="c"># Otherwise...</span>
</span><span class="line">        <span class="k">return</span> <span class="n">search</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">rgt</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>            <span class="c"># Go right</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Tree</span><span class="p">:</span>                                     <span class="c"># Simple wrapper</span>
</span><span class="line">    <span class="n">root</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__setitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">root</span> <span class="o">=</span> <span class="n">insert</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="n">search</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__contains__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class="line">        <span class="k">try</span><span class="p">:</span> <span class="n">search</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span><span class="line">        <span class="k">except</span> <span class="ne">KeyError</span><span class="p">:</span> <span class="k">return</span> <span class="bp">False</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>比较：二分法，二叉搜索树，字典</p>

<p>三者都是用来提高搜索效率的，但是各有区别。二分法只能作用于有序数组(例如排序后的Python的list)，但是有序数组较难维护，因为插入需要线性时间；二叉搜索树有些复杂，动态变化着，但是插入和删除效率高了些；字典的效率相比而言就比较好了，插入删除操作的平均时间都是常数的，只不过它还需要计算下hash值才能确定元素的位置。</p>

<p>3.顺序统计量</p>

<p>在算法导论中一组序列中的第 k 大的元素定义为顺序统计量</p>

<p>如果我们想要在线性时间内找到一组序列中的前 k 大的元素怎么做呢？很显然，如果这组序列中的数字范围比较大的话，我们就不能使用线性排序算法，而其他的基于比较的排序算法的最好的平均时间复杂度($O(n lg n)$)都超过了线性时间，怎么办呢？</p>

<p>[扩展知识：在Python中如果泥需要求前 k 小或者前 k 大的元素，可以使用<code>heapq</code>模块中的<code>nsmallest</code>或者<code>nlargest</code>函数，如果 k 很小的话这种方式会好些，但是如果 k 很大的话，不如直接去调用<code>sort</code>函数]</p>

<p>要想解决这个问题，我们还是要用分治法，采用类似快排中的<code>partition</code>将序列进行划分(divide)，也就是说找一个主元(pivot)，然后用主元作为基准将序列分成两部分，一部分小于主元，另一半大于主元，比较下主元最终的位置值和 k的大小关系，然后确定后面在哪个部分继续进行划分。如果这里不理解的话请移步阅读前面<a href="http://hujiaweibujidao.github.io/blog/2014/05/07/python-algorithms-sort/">数据结构篇之排序中的快速排序</a></p>

<p>基于上面的想法就有了下面的实现，需要注意的是下面的<code>partition</code>函数不是就地划分的哟</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#A Straightforward Implementation of Partition and Select</span>
</span><span class="line"><span class="k">def</span> <span class="nf">partition</span><span class="p">(</span><span class="n">seq</span><span class="p">):</span>
</span><span class="line">    <span class="n">pi</span><span class="p">,</span> <span class="n">seq</span> <span class="o">=</span> <span class="n">seq</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">seq</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>                   <span class="c"># Pick and remove the pivot</span>
</span><span class="line">    <span class="n">lo</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">seq</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="n">pi</span><span class="p">]</span>            <span class="c"># All the small elements</span>
</span><span class="line">    <span class="n">hi</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">seq</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="n">pi</span><span class="p">]</span>             <span class="c"># All the large ones</span>
</span><span class="line">    <span class="k">return</span> <span class="n">lo</span><span class="p">,</span> <span class="n">pi</span><span class="p">,</span> <span class="n">hi</span>                           <span class="c"># pi is &quot;in the right place&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">select</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
</span><span class="line">    <span class="n">lo</span><span class="p">,</span> <span class="n">pi</span><span class="p">,</span> <span class="n">hi</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span>                 <span class="c"># [&lt;= pi], pi, [&gt; pi]</span>
</span><span class="line">    <span class="n">m</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">lo</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">m</span> <span class="o">==</span> <span class="n">k</span><span class="p">:</span> <span class="k">return</span> <span class="n">pi</span>                        <span class="c"># We found the kth smallest</span>
</span><span class="line">    <span class="k">elif</span> <span class="n">m</span> <span class="o">&lt;</span> <span class="n">k</span><span class="p">:</span>                                 <span class="c"># Too far to the left</span>
</span><span class="line">        <span class="k">return</span> <span class="n">select</span><span class="p">(</span><span class="n">hi</span><span class="p">,</span> <span class="n">k</span><span class="o">-</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>                <span class="c"># Remember to adjust k</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>                                       <span class="c"># Too far to the right</span>
</span><span class="line">        <span class="k">return</span> <span class="n">select</span><span class="p">(</span><span class="n">lo</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span>                    <span class="c"># Just use original k here</span>
</span><span class="line">
</span><span class="line"><span class="n">seq</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</span><span class="line"><span class="k">print</span> <span class="n">partition</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="c">#([1, 3, 0, 1, 2, 2, 3, 3, 2], 3, [4, 6, 7, 9, 13, 93, 100])</span>
</span><span class="line"><span class="k">print</span> <span class="n">select</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="mi">3</span><span class="p">)</span> <span class="c">#5</span>
</span><span class="line"><span class="k">print</span> <span class="n">select</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="mi">4</span><span class="p">)</span> <span class="c">#7</span>
</span><span class="line"><span class="n">ans</span> <span class="o">=</span> <span class="p">[</span><span class="n">select</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">))]</span>
</span><span class="line"><span class="n">seq</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
</span><span class="line"><span class="k">print</span> <span class="n">ans</span> <span class="o">==</span> <span class="n">seq</span> <span class="c">#True</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>细读上面的代码发现主元默认就是第一个元素，你也许会想这么选科学吗？事实证明这种随机选择的期望运行时间的确是线性的，但是如果每次都选择的不好，导致划分的时候每次都特别不平衡将会导致运行时间变成平方时间，那有没有什么选主元的办法能够保证算法的运行时间是线性的？的确有！但是比较麻烦，实际使用的并不多，感兴趣可以看下面的内容</p>

<p>[<strong>我还未完全理解，算法导论上也有相应的介绍，感兴趣不妨去阅读下</strong>]</p>

<p>It turns out guaranteeing that the pivot is even a small percentage into the sequence (that is, not at either end, or a constant number of steps from it) is enough for the running time to be linear. In 1973, a group of algorists (Blum, Floyd, Pratt, Rivest, and Tarjan) came up with a version of the algorithm that gives exactly this kind of guarantee.</p>

<p>The algorithm is a bit involved, but the core idea is simple enough: first divide the sequence into groups of five (or some other small constant). Find the median in each, using (for example) a simple sorting algorithm. So far, we’ve used only linear time. Now, find the median among these medians, using the linear selection algorithm recursively. (This will work, because the number of medians is smaller than the size of the original sequence—still a bit mind-bending.) The resulting value is a pivot that is guaranteed to be good enough to avoid the degenerate recursion—use it as a pivot in your selection.</p>

<p>In other words, the algorithm is used recursively in two ways: first, on the sequence of medians, to find a good pivot, and second, on the original sequence, using this pivot.</p>

<p>While the algorithm is important to know about for theoretical reasons (because it means selection can be done in guaranteed linear time), you’ll probably never actually use it in practice.</p>

<p>3.二分排序</p>

<p>前面我们介绍了二分查找，下面看看如何进行二分排序，这里不再详细介绍快排和合并排序的思想了，如果不理解的话请移步阅读前面<a href="http://hujiaweibujidao.github.io/blog/2014/05/07/python-algorithms-sort/">数据结构篇之排序</a></p>

<p>利用前面的<code>partition</code>函数快排代码呼之欲出</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">quicksort</span><span class="p">(</span><span class="n">seq</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span> <span class="k">return</span> <span class="n">seq</span>                <span class="c"># Base case</span>
</span><span class="line">    <span class="n">lo</span><span class="p">,</span> <span class="n">pi</span><span class="p">,</span> <span class="n">hi</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span>                 <span class="c"># pi is in its place</span>
</span><span class="line">    <span class="k">return</span> <span class="n">quicksort</span><span class="p">(</span><span class="n">lo</span><span class="p">)</span> <span class="o">+</span> <span class="p">[</span><span class="n">pi</span><span class="p">]</span> <span class="o">+</span> <span class="n">quicksort</span><span class="p">(</span><span class="n">hi</span><span class="p">)</span> <span class="c"># Sort lo and hi separately</span>
</span><span class="line">
</span><span class="line"><span class="n">seq</span> <span class="o">=</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</span><span class="line"><span class="k">print</span> <span class="n">quicksort</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="c">#[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>合并排序是更加典型的采用分治法策略来进行的排序，注意后半部分是比较谁大然后调用<code>append</code>函数，最后<code>reverse</code>一下，因为如果是比较谁小的话就要调用<code>insert</code>函数，它的效率不如<code>append</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># Mergesort, repeated from Chapter 3 (with some modifications)</span>
</span><span class="line"><span class="k">def</span> <span class="nf">mergesort</span><span class="p">(</span><span class="n">seq</span><span class="p">):</span>
</span><span class="line">    <span class="n">mid</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span>                           <span class="c"># Midpoint for division</span>
</span><span class="line">    <span class="n">lft</span><span class="p">,</span> <span class="n">rgt</span> <span class="o">=</span> <span class="n">seq</span><span class="p">[:</span><span class="n">mid</span><span class="p">],</span> <span class="n">seq</span><span class="p">[</span><span class="n">mid</span><span class="p">:]</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">lft</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span> <span class="n">lft</span> <span class="o">=</span> <span class="n">mergesort</span><span class="p">(</span><span class="n">lft</span><span class="p">)</span>       <span class="c"># Sort by halves</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">rgt</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span> <span class="n">rgt</span> <span class="o">=</span> <span class="n">mergesort</span><span class="p">(</span><span class="n">rgt</span><span class="p">)</span>
</span><span class="line">    <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="k">while</span> <span class="n">lft</span> <span class="ow">and</span> <span class="n">rgt</span><span class="p">:</span>                          <span class="c"># Neither half is empty</span>
</span><span class="line">        <span class="k">if</span> <span class="n">lft</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">rgt</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>                  <span class="c"># lft has greatest last value</span>
</span><span class="line">            <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">lft</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>               <span class="c"># Append it</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>                                   <span class="c"># rgt has greatest last value</span>
</span><span class="line">            <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">rgt</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>               <span class="c"># Append it</span>
</span><span class="line">    <span class="n">res</span><span class="o">.</span><span class="n">reverse</span><span class="p">()</span>                               <span class="c"># Result is backward</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span><span class="n">lft</span> <span class="ow">or</span> <span class="n">rgt</span><span class="p">)</span> <span class="o">+</span> <span class="n">res</span>                   <span class="c"># Also add the remainder</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>[扩展知识：Python内置的排序算法TimSort，看起来好复杂的样子啊，我果断只是略读了一下下]</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/timsort.png" alt="image" /></p>

<p>[<strong>章节最后作者介绍了一些关于树平衡的内容，提到2-3树，我对树平衡不是特别感兴趣，也不是很明白，所以跳过不总结，感兴趣的不妨阅读下</strong>]</p>

<hr />

<p>问题6-2. 三分查找</p>

<p>Binary search divides the sequence into two approximately equal parts in each recursive step. Consider ternary search, which divides the sequence into three parts. What would its asymptotic complexity be? What can you say about the number of comparisons in binary and ternary search?</p>

<p>题目就是说让我们分析下三分查找的时间复杂度，和二分查找进行下对比</p>

<p>The asymptotic running time would be the same. The number of comparison goes up, however. To see this, consider the recurrences B(n) = B(n/2) + 1 and T(n) = T(n/3) + 2 for binary and ternary search, respectively (with base cases B(1) = T(1) = 0 and B(2) = T(2) = 1). You can show (by induction) that
B(n) &lt; lg n + 1 &lt; T(n).</p>

<p>返回<a href="http://hujiaweibujidao.github.io/python/">Python数据结构与算法设计篇目录</a></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-divide-and-combine-and-conquer/">http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-divide-and-combine-and-conquer/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Algorithms - C5 Traversal]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-traversal/"/>
    <updated>2014-07-01T10:50:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-traversal</id>
    <content type="html"><![CDATA[<p>最后更新时间：2014-7-7</p>

<p><strong><center>Python算法设计篇(5)</center></strong>
<strong><center>逸夫图书馆, 2014/7/1</center></strong></p>

<h3 id="centerchapter-5-traversalcenter"><center>Chapter 5: Traversal</center></h3>

<blockquote>
  <p>You are in a narrow hallway. This continues for several metres and ends in a doorway. Halfway along the passage you can see an archway where some steps lead downwards. Will you go forwards to the door (turn to 5), or creep down the steps (turn to 344)?    <br />
  ——Steve Jackson, Citadel of Chaos</p>
</blockquote>

<p>本节主要介绍图的遍历算法BFS和DFS，以及寻找图的(强)连通分量的算法</p>

<p>Traversal就是遍历，主要是对图的遍历，也就是遍历图中的每个节点。对一个节点的遍历有两个阶段，首先是发现(discover)，然后是访问(visit)。遍历的重要性自然不必说，图中有几个算法和遍历没有关系？！</p>

<p>[算法导论对于发现和访问区别的非常明显，对图的算法讲解地特别好，在遍历节点的时候给节点标注它的发现节点时间d[v]和结束访问时间f[v]，然后由这些时间的一些规律得到了不少实用的定理，本节后面介绍了部分内容，感兴趣不妨阅读下算法导论原书]</p>

<p>图的连通分量是图的一个最大子图，在这个子图中任何两个节点之间都是相互可达的(忽略边的方向)。我们本节的重点就是想想怎么找到一个图的连通分量呢？</p>

<p>一个很明显的想法是，我们从一个顶点出发，沿着边一直走，慢慢地扩大子图，直到子图不能再扩大了停止，我们就得到了一个连通分量对吧，我们怎么确定我们真的是找到了一个完整的连通分量呢？可以看下作者给出的解释，类似上节的Induction，我们思考从 i-1 到 i 的过程，只要我们保证增加了这个节点后子图仍然是连通的就对了。</p>

<p>Let’s look at the following related problem. Show that you can order the nodes in a connected graph, V1, V2, … Vn, so that for any i = 1…n, the subgraph over V1, … , Vi is connected. If we can show this and we can figure out how to do the ordering, we can go through all the nodes in a connected component and know when they’re all used up.</p>

<p>How do we do this? Thinking inductively, we need to get from i -1 to i. We know that the subgraph over the i -1 first nodes is connected. What next? Well, because there are paths between any pair of nodes, consider a node u in the first i -1 nodes and a node v in the remainder. On the path from u to v, consider the last node that is in the component we’ve built so far, as well as the first node outside it. Let’s call them x and y. Clearly there must be an edge between them, so adding y to the nodes of our growing component keeps it connected, and we’ve shown what we set out to show.</p>

<p>经过上面的一番思考，我们就知道了如何找连通分量：从一个顶点开始，沿着它的边找到其他的节点(或者说站在这个节点上看，看能够发现哪些节点)，然后就是不断地向已有的连通分量中添加节点，使得连通分量内部依然满足连通性质。如果我们按照上面的思路一直做下去，我们就得到了一棵树，一棵遍历树，它也是我们遍历的分量的一棵生成树。在具体实现这个算法时，我们要记录“边缘节点”，也就是那些和已得到的连通分量中的节点相连的节点，它们就像是一个个待办事项(to-do list)一样，而前面加入的节点就是标记为已完成的(checked off)待办事项。</p>

<p>这里作者举了一个很有意思的例子，一个角色扮演的游戏，如下图所示，我们可以将房间看作是节点，将房间的门看作是节点之间的边，走过的轨迹就是遍历树。这么看的话，房间就分成了三种：(1)我们已经经过的房间；(2)我们已经经过的房间附近的房间，也就是马上可以进入的房间；(3)“黑屋”，我们甚至都不知道它们是否存在，存在的话也不知道在哪里。</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/dungeon.png" alt="image" /></p>

<p>根据上面的分析可以写出下面的遍历函数<code>walk</code>，其中参数<code>S</code>暂时没有用，它在后面求强连通分量时需要，表示的是一个“禁区”(forbidden zone)，也就是不要去访问这些节点。</p>

<p>注意下面的<code>difference</code>函数的使用，参数可以是多个，也就是说调用后返回的集合中的元素在各个参数中都不存在，此外，参数也不一定是set，也可以是dict或者list，只要是可迭代的(iterables)即可。<a href="https://docs.python.org/2/library/stdtypes.html#set.difference">可以看下python docs</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># Walking Through a Connected Component of a Graph Represented Using Adjacency Sets</span>
</span><span class="line"><span class="k">def</span> <span class="nf">walk</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">S</span><span class="o">=</span><span class="nb">set</span><span class="p">()):</span>                        <span class="c"># Walk the graph from node s</span>
</span><span class="line">    <span class="n">P</span><span class="p">,</span> <span class="n">Q</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(),</span> <span class="nb">set</span><span class="p">()</span>                        <span class="c"># Predecessors + &quot;to do&quot; queue</span>
</span><span class="line">    <span class="n">P</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>                                 <span class="c"># s has no predecessor</span>
</span><span class="line">    <span class="n">Q</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>                                    <span class="c"># We plan on starting with s</span>
</span><span class="line">    <span class="k">while</span> <span class="n">Q</span><span class="p">:</span>                                    <span class="c"># Still nodes to visit</span>
</span><span class="line">        <span class="n">u</span> <span class="o">=</span> <span class="n">Q</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>                             <span class="c"># Pick one, arbitrarily</span>
</span><span class="line">        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">G</span><span class="p">[</span><span class="n">u</span><span class="p">]</span><span class="o">.</span><span class="n">difference</span><span class="p">(</span><span class="n">P</span><span class="p">,</span> <span class="n">S</span><span class="p">):</span>         <span class="c"># New nodes?</span>
</span><span class="line">            <span class="n">Q</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>                            <span class="c"># We plan to visit them!</span>
</span><span class="line">            <span class="n">P</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">u</span>                            <span class="c"># Remember where we came from</span>
</span><span class="line">    <span class="k">return</span> <span class="n">P</span>                                    <span class="c"># The traversal tree</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们可以用下面代码来测试下，得到的结果没有问题</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">some_graph</span><span class="p">():</span>
</span><span class="line">    <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</span><span class="line">    <span class="n">N</span> <span class="o">=</span> <span class="p">[</span>
</span><span class="line">        <span class="p">[</span><span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">f</span><span class="p">],</span>    <span class="c"># a</span>
</span><span class="line">        <span class="p">[</span><span class="n">c</span><span class="p">,</span> <span class="n">e</span><span class="p">],</span>             <span class="c"># b</span>
</span><span class="line">        <span class="p">[</span><span class="n">d</span><span class="p">],</span>                <span class="c"># c</span>
</span><span class="line">        <span class="p">[</span><span class="n">e</span><span class="p">],</span>                <span class="c"># d</span>
</span><span class="line">        <span class="p">[</span><span class="n">f</span><span class="p">],</span>                <span class="c"># e</span>
</span><span class="line">        <span class="p">[</span><span class="n">c</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">h</span><span class="p">],</span>          <span class="c"># f</span>
</span><span class="line">        <span class="p">[</span><span class="n">f</span><span class="p">,</span> <span class="n">h</span><span class="p">],</span>             <span class="c"># g</span>
</span><span class="line">        <span class="p">[</span><span class="n">f</span><span class="p">,</span> <span class="n">g</span><span class="p">]</span>              <span class="c"># h</span>
</span><span class="line">    <span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">N</span>
</span><span class="line">
</span><span class="line"><span class="n">G</span> <span class="o">=</span> <span class="n">some_graph</span><span class="p">()</span>
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">G</span><span class="p">)):</span> <span class="n">G</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">G</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class="line"><span class="k">print</span> <span class="nb">list</span><span class="p">(</span><span class="n">walk</span><span class="p">(</span><span class="n">G</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span> <span class="c">#[0, 1, 2, 3, 4, 5, 6, 7]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的<code>walk</code>函数只适用于无向图，而且只能找到一个从参数<code>s</code>出发的连通分量，要想得到全部的连通分量需要修改下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">components</span><span class="p">(</span><span class="n">G</span><span class="p">):</span>                              <span class="c"># The connected components</span>
</span><span class="line">    <span class="n">comp</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="n">seen</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>                                <span class="c"># Nodes we&#39;ve already seen</span>
</span><span class="line">    <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">G</span><span class="p">:</span>                                 <span class="c"># Try every starting point</span>
</span><span class="line">        <span class="k">if</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span> <span class="k">continue</span>                  <span class="c"># Seen? Ignore it</span>
</span><span class="line">        <span class="n">C</span> <span class="o">=</span> <span class="n">walk</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">u</span><span class="p">)</span>                          <span class="c"># Traverse component</span>
</span><span class="line">        <span class="n">seen</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">C</span><span class="p">)</span>                          <span class="c"># Add keys of C to seen</span>
</span><span class="line">        <span class="n">comp</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">C</span><span class="p">)</span>                          <span class="c"># Collect the components</span>
</span><span class="line">    <span class="k">return</span> <span class="n">comp</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>用下面的代码来测试下，得到的结果没有问题</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">G</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="mi">0</span><span class="p">:</span> <span class="nb">set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]),</span>
</span><span class="line">    <span class="mi">1</span><span class="p">:</span> <span class="nb">set</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">]),</span>
</span><span class="line">    <span class="mi">2</span><span class="p">:</span> <span class="nb">set</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]),</span>
</span><span class="line">    <span class="mi">3</span><span class="p">:</span> <span class="nb">set</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]),</span>
</span><span class="line">    <span class="mi">4</span><span class="p">:</span> <span class="nb">set</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]),</span>
</span><span class="line">    <span class="mi">5</span><span class="p">:</span> <span class="nb">set</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="p">[</span><span class="nb">list</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">C</span><span class="p">))</span> <span class="k">for</span> <span class="n">C</span> <span class="ow">in</span> <span class="n">components</span><span class="p">(</span><span class="n">G</span><span class="p">)]</span>  <span class="c">#[[0, 1, 2], [3, 4, 5]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>至此我们就完成了一个时间复杂度为$\Theta(E+V)$的求无向图的连通分量的算法，因为每条边和每个顶点都要访问一次。[这个时间复杂度会经常看到，例如拓扑排序，强连通分量都是它]</p>

<p>[接下来作者作为扩展介绍了欧拉回路和哈密顿回路：前者是经过图中的所有边一次，然后回到起点；后者是经过图中的所有顶点一次，然后回到起点。网上资料甚多，感兴趣自行了解]</p>

<p>下面我们看下迷宫问题，如下图所示，原始问题是一个人在公园中走路，结果走不出来了，即使是按照“左手准则”(也就是但凡遇到交叉口一直向左转)走下去，如果走着走着回到了原来的起点，那么就会陷入无限的循环中！有意思的是，左边的迷宫可以通过“左手准则”转换成右边的树型结构。</p>

<p>[<strong>注：具体的转换方式我还未明白，下面是作者给出的构造说明</strong>]</p>

<p>Here the “keep one hand on the wall” strategy will work nicely. One way of seeing why it works is to observe that the maze really has only one inner wall (or, to put it another way, if you put wallpaper inside it, you could use one continuous strip). Look at the outer square. As long as you’re not allowed to create cycles, any obstacles you draw have to be connected to the it in exactly one place, and this doesn’t create any problems for the left-hand rule. Following this traversal strategy, you’ll discover all nodes and walk every passage twice (once in either direction).</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/maze.png" alt="image" /></p>

<p>上面的迷宫实际上就是为了引出深度优先搜索(DFS)，每次到了一个交叉口的时候，可能我们可以向左走，也可以向右走，选择是有不少，但是我们要向一直走下去的话就只能选择其中的一个方向，如果我们发现这个方向走不出去的话，我们就回溯回来，选择一个刚才没选过的方向继续尝试下去。</p>

<p>基于上面的想法可以写出下面递归版本的DFS</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">rec_dfs</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">S</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">S</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span> <span class="n">S</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>                     <span class="c"># Initialize the history</span>
</span><span class="line">    <span class="n">S</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>                                    <span class="c"># We&#39;ve visited s</span>
</span><span class="line">    <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">G</span><span class="p">[</span><span class="n">s</span><span class="p">]:</span>                              <span class="c"># Explore neighbors</span>
</span><span class="line">        <span class="k">if</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">S</span><span class="p">:</span> <span class="k">continue</span>                     <span class="c"># Already visited: Skip</span>
</span><span class="line">        <span class="n">rec_dfs</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">S</span><span class="p">)</span>                        <span class="c"># New: Explore recursively</span>
</span><span class="line">    <span class="k">return</span> <span class="n">S</span> <span class="c"># For testing</span>
</span><span class="line">
</span><span class="line"><span class="n">G</span> <span class="o">=</span> <span class="n">some_graph</span><span class="p">()</span>
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">G</span><span class="p">)):</span> <span class="n">G</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">G</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class="line"><span class="k">print</span> <span class="nb">list</span><span class="p">(</span><span class="n">rec_dfs</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>   <span class="c">#[0, 1, 2, 3, 4, 5, 6, 7]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>很自然的我们想到要将递归版本改成迭代版本的，下面的代码中使用了Python中的<code>yield</code>关键字，具体的用法可以<a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/index.html">看下这里IBM Developer Works</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">iter_dfs</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
</span><span class="line">    <span class="n">S</span><span class="p">,</span> <span class="n">Q</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(),</span> <span class="p">[]</span>                            <span class="c"># Visited-set and queue</span>
</span><span class="line">    <span class="n">Q</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>                                 <span class="c"># We plan on visiting s</span>
</span><span class="line">    <span class="k">while</span> <span class="n">Q</span><span class="p">:</span>                                    <span class="c"># Planned nodes left?</span>
</span><span class="line">        <span class="n">u</span> <span class="o">=</span> <span class="n">Q</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>                             <span class="c"># Get one</span>
</span><span class="line">        <span class="k">if</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">S</span><span class="p">:</span> <span class="k">continue</span>                     <span class="c"># Already visited? Skip it</span>
</span><span class="line">        <span class="n">S</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>                                <span class="c"># We&#39;ve visited it now</span>
</span><span class="line">        <span class="n">Q</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">G</span><span class="p">[</span><span class="n">u</span><span class="p">])</span>                          <span class="c"># Schedule all neighbors</span>
</span><span class="line">        <span class="k">yield</span> <span class="n">u</span>                                 <span class="c"># Report u as visited</span>
</span><span class="line">
</span><span class="line"><span class="n">G</span> <span class="o">=</span> <span class="n">some_graph</span><span class="p">()</span>
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">G</span><span class="p">)):</span> <span class="n">G</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">G</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class="line"><span class="k">print</span> <span class="nb">list</span><span class="p">(</span><span class="n">iter_dfs</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>  <span class="c">#[0, 5, 7, 6, 2, 3, 4, 1]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面迭代版本经过一点点的修改可以得到更加通用的遍历函数</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">traverse</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">qtype</span><span class="o">=</span><span class="nb">set</span><span class="p">):</span>
</span><span class="line">    <span class="n">S</span><span class="p">,</span> <span class="n">Q</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(),</span> <span class="n">qtype</span><span class="p">()</span>
</span><span class="line">    <span class="n">Q</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class="line">    <span class="k">while</span> <span class="n">Q</span><span class="p">:</span>
</span><span class="line">        <span class="n">u</span> <span class="o">=</span> <span class="n">Q</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class="line">        <span class="k">if</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">S</span><span class="p">:</span> <span class="k">continue</span>
</span><span class="line">        <span class="n">S</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>
</span><span class="line">        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">G</span><span class="p">[</span><span class="n">u</span><span class="p">]:</span>
</span><span class="line">            <span class="n">Q</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class="line">        <span class="k">yield</span> <span class="n">u</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>函数<code>traverse</code>中的参数<code>qtype</code>表示队列类型，例如栈stack，下面的代码给出了如何自定义一个stack，以及测试<code>traverse</code>函数</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">stack</span><span class="p">(</span><span class="nb">list</span><span class="p">):</span>
</span><span class="line">    <span class="n">add</span> <span class="o">=</span> <span class="nb">list</span><span class="o">.</span><span class="n">append</span>
</span><span class="line">
</span><span class="line"><span class="n">G</span> <span class="o">=</span> <span class="n">some_graph</span><span class="p">()</span>
</span><span class="line"><span class="k">print</span> <span class="nb">list</span><span class="p">(</span><span class="n">traverse</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">stack</span><span class="p">))</span> <span class="c">#[0, 5, 7, 6, 2, 3, 4, 1]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果还不清楚的话可以看下算法导论中的这幅DFS示例图，节点的颜色后面有介绍</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/dfsexample.png" alt="image" /></p>

<p>上图在DFS时给节点加上了时间戳，这有什么作用呢？</p>

<p>前面提到过，在遍历节点的时候如果给节点标注它的发现节点时间d[v]和结束访问时间f[v]的话，从这些时间我们就能够发现一些信息，比如下图，(a)是图的一个DFS遍历加上时间戳后的结果；(b)是如果给每个节点的d[v]到f[v]区间加上一个括号的话，可以看出在DFS遍历中(也就是后来的深度优先树/森林)中所有的节点 u 的后继节点 v 的区间都在节点 u 的区间内部，如果节点 v 不是节点 u 的后继，那么两个节点的区间不相交，这就是“括号定理”。</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/dfstime.png" alt="image" /></p>

<p>加上时间戳的DFS遍历还算比较好写对吧</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#Depth-First Search with Timestamps</span>
</span><span class="line"><span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">S</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">S</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span> <span class="n">S</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>                     <span class="c"># Initialize the history</span>
</span><span class="line">    <span class="n">d</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span> <span class="n">t</span> <span class="o">+=</span> <span class="mi">1</span>                            <span class="c"># Set discover time</span>
</span><span class="line">    <span class="n">S</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>                                    <span class="c"># We&#39;ve visited s</span>
</span><span class="line">    <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">G</span><span class="p">[</span><span class="n">s</span><span class="p">]:</span>                              <span class="c"># Explore neighbors</span>
</span><span class="line">        <span class="k">if</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">S</span><span class="p">:</span> <span class="k">continue</span>                     <span class="c"># Already visited. Skip</span>
</span><span class="line">        <span class="n">t</span> <span class="o">=</span> <span class="n">dfs</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">S</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>               <span class="c"># Recurse; update timestamp</span>
</span><span class="line">    <span class="n">f</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span> <span class="n">t</span> <span class="o">+=</span> <span class="mi">1</span>                            <span class="c"># Set finish time</span>
</span><span class="line">    <span class="k">return</span> <span class="n">t</span>                                    <span class="c"># Return timestamp</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>除了给节点加上时间戳之外，算法导论在介绍DFS的时候还给节点进行着色，在节点被发现之前是白色的，在发现之后先是灰色的，在结束访问之后才是黑色的，详细的流程可以参考上面给出的算法导论中的那幅DFS示例图。有了颜色有什么用呢？作用大着呢！根据节点的颜色，我们可以对边进行分类！大致可以分为下面四种：</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/edgetype.png" alt="image" /></p>

<p>使用DFS对图进行遍历时，对于每条边(u,v)，当该边第一次被发现时，根据到达节点 v 的颜色来对边进行分类(正向边和交叉边不做细分)：</p>

<p>(1)白色表示该边是一条树边；</p>

<p>(2)灰色表示该边是一条反向边；</p>

<p>(3)黑色表示该边是一条正向边或者交叉边。</p>

<p>下图显示了上面介绍括号定理用时的那个图的深度优先树中的所有边的类型，灰色标记的边是深度优先树的树边</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/edgetypeexample.png" alt="image" /></p>

<p>那对边进行分类有什么作用呢？作用多着呢！最常见的作用的是判断一个有向图是否存在环，如果对有向图进行DFS遍历发现了反向边，那么一定存在环，反之没有环。此外，对于无向图，如果对它进行DFS遍历，肯定不会出现正向边或者交叉边。</p>

<p>那对节点标注时间戳有什么用呢？其实，除了可以发现上面提到的那些很重要的性质之外，时间戳对于接下来要介绍的拓扑排序的另一种解法和强连通分量很重要！</p>

<p>我们先看下摘自算法导论的这幅拓扑排序示例图，这是某个教授早上起来后要做的事情，嘿嘿</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/topsortdfs.png" alt="image" /></p>

<p>不难发现，最终得到的拓扑排序刚好是节点的完成时间f[v]降序排列的！结合前面的括号定理以及依赖关系不难理解，如果我们按照节点的f[v]降序排列，我们就得到了我们想要的拓扑排序了！这就是拓扑排序的另一个解法！[在算法导论中该解法是主要介绍的解法，而我们前面提到的那个解法是在算法导论的习题中出现的]</p>

<p>基于上面的想法就能够得到下面的实现代码，函数<code>recurse</code>是一个内部函数，这样它就可以访问到<code>G</code>和<code>res</code>等变量</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#Topological Sorting Based on Depth-First Search</span>
</span><span class="line"><span class="k">def</span> <span class="nf">dfs_topsort</span><span class="p">(</span><span class="n">G</span><span class="p">):</span>
</span><span class="line">    <span class="n">S</span><span class="p">,</span> <span class="n">res</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(),</span> <span class="p">[]</span>                          <span class="c"># History and result</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">recurse</span><span class="p">(</span><span class="n">u</span><span class="p">):</span>                             <span class="c"># Traversal subroutine</span>
</span><span class="line">        <span class="k">if</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">S</span><span class="p">:</span> <span class="k">return</span>                       <span class="c"># Ignore visited nodes</span>
</span><span class="line">        <span class="n">S</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>                                <span class="c"># Otherwise: Add to history</span>
</span><span class="line">        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">G</span><span class="p">[</span><span class="n">u</span><span class="p">]:</span>
</span><span class="line">            <span class="n">recurse</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>                          <span class="c"># Recurse through neighbors</span>
</span><span class="line">        <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>                           <span class="c"># Finished with u: Append it</span>
</span><span class="line">    <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">G</span><span class="p">:</span>
</span><span class="line">        <span class="n">recurse</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>                              <span class="c"># Cover entire graph</span>
</span><span class="line">    <span class="n">res</span><span class="o">.</span><span class="n">reverse</span><span class="p">()</span>                               <span class="c"># It&#39;s all backward so far</span>
</span><span class="line">    <span class="k">return</span> <span class="n">res</span>
</span><span class="line">
</span><span class="line"><span class="n">G</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;a&#39;</span><span class="p">:</span> <span class="nb">set</span><span class="p">(</span><span class="s">&#39;bf&#39;</span><span class="p">),</span> <span class="s">&#39;b&#39;</span><span class="p">:</span> <span class="nb">set</span><span class="p">(</span><span class="s">&#39;cdf&#39;</span><span class="p">),</span> <span class="s">&#39;c&#39;</span><span class="p">:</span> <span class="nb">set</span><span class="p">(</span><span class="s">&#39;d&#39;</span><span class="p">),</span> <span class="s">&#39;d&#39;</span><span class="p">:</span> <span class="nb">set</span><span class="p">(</span><span class="s">&#39;ef&#39;</span><span class="p">),</span> <span class="s">&#39;e&#39;</span><span class="p">:</span> <span class="nb">set</span><span class="p">(</span><span class="s">&#39;f&#39;</span><span class="p">),</span> <span class="s">&#39;f&#39;</span><span class="p">:</span> <span class="nb">set</span><span class="p">()}</span>
</span><span class="line"><span class="k">print</span> <span class="n">dfs_topsort</span><span class="p">(</span><span class="n">G</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>[<strong>接下来作者介绍了一个Iterative Deepening Depth-First Search，没看懂，貌似和BFS类似</strong>]</p>

<p>如果我们在遍历图时“一层一层”式地遍历，先发现的节点先访问，那么我们就得到了广度优先搜索(BFS)。下面是作者给出的一个有意思的区别BFS和DFS的例子，遍历过程就像我们上网一样，DFS是顺着网页上的链接一个个点下去，当访问完了这个网页时就点击<code>Back</code>回退到上一个网页继续访问。而BFS是先在后台打开当前网页上的所有链接，然后按照打开的顺序一个个访问，访问完了一个网页就把它的窗口关闭。</p>

<p>One way of visualizing BFS and DFS is as browsing the Web. DFS is what you get if you keep following links and then use the Back button once you’re done with a page. The backtracking is a bit like an “undo.” BFS is more like opening every link in a new window (or tab) behind those you already have and then closing the windows as you finish with each page.</p>

<p>BFS的代码很好实现，主要是使用队列</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#Breadth-First Search</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">bfs</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
</span><span class="line">    <span class="n">P</span><span class="p">,</span> <span class="n">Q</span> <span class="o">=</span> <span class="p">{</span><span class="n">s</span><span class="p">:</span> <span class="bp">None</span><span class="p">},</span> <span class="n">deque</span><span class="p">([</span><span class="n">s</span><span class="p">])</span>                <span class="c"># Parents and FIFO queue</span>
</span><span class="line">    <span class="k">while</span> <span class="n">Q</span><span class="p">:</span>
</span><span class="line">        <span class="n">u</span> <span class="o">=</span> <span class="n">Q</span><span class="o">.</span><span class="n">popleft</span><span class="p">()</span>                         <span class="c"># Constant-time for deque</span>
</span><span class="line">        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">G</span><span class="p">[</span><span class="n">u</span><span class="p">]:</span>
</span><span class="line">            <span class="k">if</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">P</span><span class="p">:</span> <span class="k">continue</span>                 <span class="c"># Already has parent</span>
</span><span class="line">            <span class="n">P</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">u</span>                            <span class="c"># Reached from u: u is parent</span>
</span><span class="line">            <span class="n">Q</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">P</span>
</span><span class="line">
</span><span class="line"><span class="n">G</span> <span class="o">=</span> <span class="n">some_graph</span><span class="p">()</span>
</span><span class="line"><span class="k">print</span> <span class="n">bfs</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Python的list可以很好地充当stack，但是充当queue则性能很差，函数<code>bfs</code>中使用的是<code>collections</code>模块中的<code>deque</code>，即双端队列(<code>double-ended queue</code>)，它一般是使用链表来实现的，这个类有<code>extend</code>、<code>append</code>和<code>pop</code>等方法都是作用于队列右端的，而方法<code>extendleft</code>、<code>appendleft</code>和<code>popleft</code>等方法都是作用于队列左端的，它的内部实现是非常高效的。</p>

<p>Internally, the deque is implemented as a doubly linked list of blocks, each of which is an array of individual elements. Although asymptotically equivalent to using a linked list of individual elements, this reduces overhead and makes it more efficient in practice. For example, the expression d[k] would require traversing the first k elements of the deque d if it were a plain list. If each block contains b elements, you would only have to traverse k//b blocks.</p>

<p>最后我们看下强连通分量，前面的分量是不考虑边的方向的，如果我们考虑边的方向，而且得到的最大子图中，任何两个节点都能够沿着边可达，那么这就是一个强连通分量。</p>

<p>下图是算法导论中的示例图，(a)是对图进行DFS遍历带时间戳的结果；(b)是上图的的转置，也就是将上图中所有边的指向反转过来得到的图；(c)是最终得到的强连通分支图，每个节点内部显示了该分支内的节点。</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/sccexample.png" alt="image" /></p>

<p>上面的示例图自然不太好明白到底怎么得到的，我们慢慢来分析三幅图 [原书的分析太多了，我被绕晕了+_+，下面是我结合算法导论的分析过程]</p>

<p>先看图(a)，每个灰色区域都是一个强连通分支，我们想想，如果强连通分支 X 内部有一条边指向另一个强连通分支 Y，那么强连通分支 Y 内部肯定不存在一条边指向另一个强连通分支 Y，否则它们能够整合在一起形成一个新的更大气的强连通分支！这也就是说强连通分支图肯定是一个有向无环图！我们从图(c)也可以看出来</p>

<p>再看看图(c)，强连通分支之间的指向，如果我们定义每个分支内的任何顶点的最晚的完成时间为对应分支的完成时间的话，那么分支<code>abe</code>的完成时间是16，分支<code>cd</code>是10，分支<code>fg</code>是7，分支<code>h</code>是6，不难发现，分支之间边的指向都是从完成时间大的指向完成时间小的，换句话说，总是由完成时间晚的强连通分支指向完成时间早的强连通分支！</p>

<p>最后再看看图(b)，该图是原图的转置，但是得到强连通分支是一样的(强连通分支图是会变的，刚好又是原来分支图的转置)，那为什么要将边反转呢？结合前面两个图的分析，既然强连通分支图是有向无环图，而且总是由完成时间晚的强连通分支指向完成时间早的强连通分支，如果我们将边反转，虽然我们得到的强连通分支不变，但是分支之间的指向变了，完成时间晚的就不再指向完成时间早的了！这样的话如果我们对它进行拓扑排序，即按照完成时间的降序再次进行DFS时，我们就能够得到一个个的强连通分支了对不对？因为每次得到的强连通分支都没有办法指向其他分支了，也就是确定了一个强连通分支之后就停止了。[试试画个图得到图(b)的强连通分支图的拓扑排序结果就明白了]</p>

<p>经过上面略微复杂的分析之后我们知道强连通分支算法的流程有下面四步：</p>

<p>1.对原图G运行DFS，得到每个节点的完成时间f[v]；</p>

<p>2.得到原图的转置图GT；</p>

<p>3.对GT运行DFS，主循环按照节点的f[v]降序进行访问；</p>

<p>4.输出深度优先森林中的每棵树，也就是一个强连通分支。</p>

<p>根据上面的思路可以得到下面的强连通分支算法实现，其中的函数<code>parse_graph</code>是作者用来方便构造图的函数</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">tr</span><span class="p">(</span><span class="n">G</span><span class="p">):</span>                                      <span class="c"># Transpose (rev. edges of) G</span>
</span><span class="line">    <span class="n">GT</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">    <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">G</span><span class="p">:</span> <span class="n">GT</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>                   <span class="c"># Get all the nodes in there</span>
</span><span class="line">    <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">G</span><span class="p">:</span>
</span><span class="line">        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">G</span><span class="p">[</span><span class="n">u</span><span class="p">]:</span>
</span><span class="line">            <span class="n">GT</span><span class="p">[</span><span class="n">v</span><span class="p">]</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>                        <span class="c"># Add all reverse edges</span>
</span><span class="line">    <span class="k">return</span> <span class="n">GT</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">scc</span><span class="p">(</span><span class="n">G</span><span class="p">):</span>
</span><span class="line">    <span class="n">GT</span> <span class="o">=</span> <span class="n">tr</span><span class="p">(</span><span class="n">G</span><span class="p">)</span>                                  <span class="c"># Get the transposed graph</span>
</span><span class="line">    <span class="n">sccs</span><span class="p">,</span> <span class="n">seen</span> <span class="o">=</span> <span class="p">[],</span> <span class="nb">set</span><span class="p">()</span>
</span><span class="line">    <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">dfs_topsort</span><span class="p">(</span><span class="n">G</span><span class="p">):</span>                    <span class="c"># DFS starting points</span>
</span><span class="line">        <span class="k">if</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span> <span class="k">continue</span>                  <span class="c"># Ignore covered nodes</span>
</span><span class="line">        <span class="n">C</span> <span class="o">=</span> <span class="n">walk</span><span class="p">(</span><span class="n">GT</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">seen</span><span class="p">)</span>                   <span class="c"># Don&#39;t go &quot;backward&quot; (seen)</span>
</span><span class="line">        <span class="n">seen</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">C</span><span class="p">)</span>                          <span class="c"># We&#39;ve now seen C</span>
</span><span class="line">        <span class="n">sccs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">C</span><span class="p">)</span>                          <span class="c"># Another SCC found</span>
</span><span class="line">    <span class="k">return</span> <span class="n">sccs</span>
</span><span class="line">
</span><span class="line"><span class="kn">from</span> <span class="nn">string</span> <span class="kn">import</span> <span class="n">ascii_lowercase</span>
</span><span class="line"><span class="k">def</span> <span class="nf">parse_graph</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span><span class="line">    <span class="c"># print zip(ascii_lowercase, s.split(&quot;/&quot;))</span>
</span><span class="line">    <span class="c"># [(&#39;a&#39;, &#39;bc&#39;), (&#39;b&#39;, &#39;die&#39;), (&#39;c&#39;, &#39;d&#39;), (&#39;d&#39;, &#39;ah&#39;), (&#39;e&#39;, &#39;f&#39;), (&#39;f&#39;, &#39;g&#39;), (&#39;g&#39;, &#39;eh&#39;), (&#39;h&#39;, &#39;i&#39;), (&#39;i&#39;, &#39;h&#39;)]</span>
</span><span class="line">    <span class="n">G</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">    <span class="k">for</span> <span class="n">u</span><span class="p">,</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">ascii_lowercase</span><span class="p">,</span> <span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">)):</span>
</span><span class="line">        <span class="n">G</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">G</span>
</span><span class="line">
</span><span class="line"><span class="n">G</span> <span class="o">=</span> <span class="n">parse_graph</span><span class="p">(</span><span class="s">&#39;bc/die/d/ah/f/g/eh/i/h&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="n">scc</span><span class="p">(</span><span class="n">G</span><span class="p">)))</span>
</span><span class="line"><span class="c">#[[&#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;d&#39;], [&#39;e&#39;, &#39;g&#39;, &#39;f&#39;], [&#39;i&#39;, &#39;h&#39;]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>[最后作者提到了一点如何进行更加高效的搜索，也就是通过分支限界来实现对搜索树的剪枝，具体使用可以看下这个问题<a href="http://hujiaweibujidao.github.io/blog/2014/04/13/vertext-cover-problem/">顶点覆盖问题Vertext Cover Problem</a>]</p>

<hr />

<p>问题5.17 强连通分支</p>

<p>In Kosaraju’s algorithm, we find starting nodes for the final traversal by descending finish times from an initial DFS, and we perform the traversal in the transposed graph (that is, with all edges reversed). Why couldn’t we just use ascending finish times in the original graph?</p>

<p>问题就是说，我们干嘛要对转置图按照完成时间降序遍历一次呢？干嘛不直接在原图上按照完成时间升序遍历一次呢？</p>

<p>Try finding a simple example where this would give the wrong answer. (You can do it with a really small graph.)</p>

<p>返回<a href="http://hujiaweibujidao.github.io/python/">Python数据结构与算法设计篇目录</a></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-traversal/">http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-traversal/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Algorithms - C4 Induction and Recursion and Reduction]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-induction/"/>
    <updated>2014-07-01T10:40:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-induction</id>
    <content type="html"><![CDATA[<p>最后更新时间：2014-7-7</p>

<p><strong><center>Python算法设计篇(4)</center></strong>
<strong><center>逸夫图书馆, 2014/7/1</center></strong></p>

<h3 id="centerchapter-4-induction-and-recursion-and-reductioncenter"><center>Chapter 4: Induction and Recursion and Reduction</center></h3>

<blockquote>
  <p>You must never think of the whole street at once, understand? You must only concentrate on the next step, the next breath, the next stroke of the broom, and the next, and the next. Nothing else.     <br />
  ——Beppo Roadsweeper, in Momo by Michael Ende</p>
</blockquote>

<p><strong>注：本节中我给定下面三个重要词汇的中文翻译分别是：Induction(推导)、Recursion(递归)和Reduction(规约)</strong></p>

<p>本节主要介绍算法设计的三个核心知识：Induction(推导)、Recursion(递归)和Reduction(规约)，这是原书的重点和难点部分</p>

<p>正如标题所示，本节主要介绍下面三部分内容：</p>

<p>• Reduction means transforming one problem to another. We normally reduce an unknown problem to one we know how to solve. The reduction may involve transforming both the input (so it works with the new problem) and the output (so it’s valid for the original problem).</p>

<p>Reduction(规约)意味着对问题进行转换，例如将一个未知的问题转换成我们能够解决的问题，转换的过程可能涉及到对问题的输入输出的转换。[问题规约在证明一个问题是否是NP完全问题时经常用到，如果我们能够将一个问题规约成一个我们已知的NP完全问题的话，那么这个问题也是NP完全问题]</p>

<p>下面给幅图你就能够明白了，实际上很多时候我们遇到一个问题时都是找一个我们已知的类似的能够解决的问题，然后将这个我们新问题A规约到那个已知的问题B，中间经过一些输入输出的转换，我们就能够解决新问题A了。</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/reduction1.png" alt="image" /></p>

<p>• Induction (or, mathematical induction) is used to show that a statement is true for a large class of objects (often the natural numbers). We do this by first showing it to be true for a base case (such as the number 1) and then showing that it “carries over” from one object to the next (if it’s true for n –1, then it’s true for n).</p>

<p>Induction(推导)是一个数学意义上的推导，类似数学归纳法，主要是用来证明某个命题是正确的。首先我们证明对于基础情况(例如在k=1时)是正确的，然后证明该命题递推下去都是正确的(一般假设当k=n-1时是正确的，然后证明当k=n时也是正确的即可)</p>

<p>• Recursion is what happens when a function calls itself. Here we need to make sure the function works correctly for a (nonrecursive) base case and that it combines results from the recursive calls into a valid solution.</p>

<p>Recursion(递归)经常发生于一个函数调用自身的情况。递归函数说起来简单，但是实现不太容易，我们要确保对于基础情况(不递归的情况)能够正常工作，此外，对于递归情况能够将递归调用的结果组合起来得到一个有效的结果。</p>

<p>以上三个核心有很多相似点，比如它们都专注于求出目标解的某一步，我们只需要仔细思考这一步，剩下的就能够自动完成了。如果我们更加仔细地去理解它们，我们会发现，<strong>Induction(推导)和Recursion(递归)其实彼此相互对应，也就是说一个Induction能够写出一个相应的Recursion，而一个Recursion也正好对应着一个Induction式子，也可以换个方式理解，Induction是从n-1到n的推导，而Recursion是从n到n-1的递归(下面有附图可以帮助理解)。此外，Induction和Recursion其实都是某种Reduction，即Induction和Recursion的本质就是对问题进行规约！为了能够对问题使用Induction或者说Recursion，Reduction一般是将一个问题变成另一个只是规模减小了的相同问题。</strong></p>

<p>你也许会觉得奇怪，不对啊，刚才不是说Reduction是将一个问题规约成另一个问题吗？现在怎么又说成是将一个问题变成另一个只是规模减小了的相同问题了？其实，Reduction是有两种的，上面的两种都是Reduction！还记得前面介绍过的递归树吗？那其实就是将规模较大的问题转换成几个规模较小的问题，而且问题的形式并没有改变，这就是一种Reduction。你可以理解这种情况下Reduction是降维的含义，也就类似机器学习中的Dimension Reduction，对高维数据进行降维了，问题保持不变。</p>

<p>These are two major variations of reductions: reducing to a different problem and reducing to a shrunken version of the same. </p>

<p>再看下下面这幅图理解Induction和Recursion之间的关系</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/Inductionrecursion.png" alt="image" /></p>

<p>[关于它们三个的关系的原文阐述：Induction and recursion are, in a sense, mirror images of one another, and both can be seen as examples of reduction. To use induction (or recursion), the reduction must (generally) be between instances of the same problem of different sizes. ]</p>

<p>[看了原书你会觉得，作者介绍算法的方式很特别，作者有提到他的灵感来自哪里：In fact, much of the material was inspired by Udi Manber’s wonderful paper <code>“Using induction to design algorithms”</code> from 1988 and his book from the following year, <code>Introduction to Algorithms: A Creative Approach</code>.]</p>

<p>也许你还感觉很晕，慢慢地看了后面的例子你就明白了。在介绍例子之前呢，先看下递归和迭代的异同，这个很重要，在后面介绍动态规划算法时我们还会反复提到它们的异同。</p>

<p>[Induction is what you use to show that recursion is correct, and recursion is a very direct way of implementing most inductive algorithm ideas. However, rewriting the algorithm to be iterative can avoid the overhead and limitations of recursive functions in most (nonfunctional) programming languages. ]</p>

<p>有了Induction和Recursion，我们很容易就可以将一个inductive idea采用递归(recursion)的方式实现，根据我们的编程经验(事实也是如此)，任何一个递归方式的实现都可以改成非递归方式(即迭代方式)实现(反之亦然)，而且非递归方式要好些，为什么呢？因为非递归版本相对来讲运行速度更快，因为没有用栈去实现，也避免了栈溢出的情况，python中对栈深度是有限制的。</p>

<p>举个例子，下面是一段遍历序列的代码，如果大小设置为100没有问题，如果设置为1000就会报<code>RuntimeError</code>的错误，提示超出了最大的递归深度。[当然，大家都不会像下面那样写代码对吧，这只是一个例子]</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">trav</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">):</span> <span class="k">return</span>
</span><span class="line">    <span class="c">#print seq[i]</span>
</span><span class="line">    <span class="n">trav</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">trav</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">))</span> <span class="c"># RuntimeError: maximum recursion depth exceeded</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>所以呢，很多时候虽然递归的思路更好想，代码也更好写，但是迭代的代码更加高效一些，在动态规划中还可以看到迭代版本还有其他的优点，当然，它还有些缺点，比如要考虑迭代的顺序，如果迫不及待想知道请移步阅读<a href="http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-dynamic-programming/">Python算法设计篇之动态规划</a>，不过还是建议且听我慢慢道来</p>

<p>下面我们通过排序来梳理下我们前面介绍的三个核心内容</p>

<p><strong>我们如何对排序问题进行reduce呢？很显然，有很多种方式，假如我们将原问题reduce成两个规模为原来一半的子问题，我们就得到了合并排序(这个我们以后还会详细介绍)；假如我们每次只是reduce一个元素，比如假设前n-1个元素都排好序了，那么我们只需要将第n个元素插入到前面的序列即可，这样我们就得到了插入排序；再比如，假设我们找到其中最大的元素然后将它让在位置n上，一直这么下去我们就得到了选择排序；继续思考下去，假设我们找到某个元素(比如第k大的元素)，然后将它放在位置k上，一直这么下去我们就得到了快速排序(这个我们以后还会详细介绍)。怎么样？我们前面学过的排序经过这么一些reduce基本上都很清晰了对吧？</strong></p>

<p>下面通过代码来体会下插入排序和选择排序的两个不同版本</p>

<p>递归版本的插入排序</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">ins_sort_rec</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="k">return</span>  <span class="c"># Base case -- do nothing</span>
</span><span class="line">    <span class="n">ins_sort_rec</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>  <span class="c"># Sort 0..i-1</span>
</span><span class="line">    <span class="n">j</span> <span class="o">=</span> <span class="n">i</span>  <span class="c"># Start &quot;walking&quot; down</span>
</span><span class="line">    <span class="k">while</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">seq</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">seq</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>  <span class="c"># Look for OK spot</span>
</span><span class="line">        <span class="n">seq</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">seq</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">seq</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">seq</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>  <span class="c"># Keep moving seq[j] down</span>
</span><span class="line">        <span class="n">j</span> <span class="o">-=</span> <span class="mi">1</span>  <span class="c"># Decrement j</span>
</span><span class="line">
</span><span class="line"><span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">randrange</span>
</span><span class="line"><span class="n">seq</span> <span class="o">=</span> <span class="p">[</span><span class="n">randrange</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">)]</span>
</span><span class="line"><span class="n">ins_sort_rec</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>改成迭代版本的插入排序如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">ins_sort</span><span class="p">(</span><span class="n">seq</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)):</span>  <span class="c"># 0..i-1 sorted so far</span>
</span><span class="line">        <span class="n">j</span> <span class="o">=</span> <span class="n">i</span>  <span class="c"># Start &quot;walking&quot; down</span>
</span><span class="line">        <span class="k">while</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">seq</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">seq</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>  <span class="c"># Look for OK spot</span>
</span><span class="line">            <span class="n">seq</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">seq</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">seq</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">seq</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>  <span class="c"># Keep moving seq[j] down</span>
</span><span class="line">            <span class="n">j</span> <span class="o">-=</span> <span class="mi">1</span>  <span class="c"># Decrement j</span>
</span><span class="line">
</span><span class="line"><span class="n">seq2</span> <span class="o">=</span> <span class="p">[</span><span class="n">randrange</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">)]</span>
</span><span class="line"><span class="n">ins_sort</span><span class="p">(</span><span class="n">seq2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>你会发现，两个版本差不多，但是递归版本中list的size不能太大，否则就会栈溢出，而迭代版本不会有问题，还有一个区别就是方法参数，一般来说递归版本的参数都会多些</p>

<p>递归版本和迭代版本的选择排序</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">sel_sort_rec</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="k">return</span>  <span class="c"># Base case -- do nothing</span>
</span><span class="line">    <span class="n">max_j</span> <span class="o">=</span> <span class="n">i</span>  <span class="c"># Idx. of largest value so far</span>
</span><span class="line">    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>  <span class="c"># Look for a larger value</span>
</span><span class="line">        <span class="k">if</span> <span class="n">seq</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">seq</span><span class="p">[</span><span class="n">max_j</span><span class="p">]:</span> <span class="n">max_j</span> <span class="o">=</span> <span class="n">j</span>  <span class="c"># Found one? Update max_j</span>
</span><span class="line">    <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">seq</span><span class="p">[</span><span class="n">max_j</span><span class="p">]</span> <span class="o">=</span> <span class="n">seq</span><span class="p">[</span><span class="n">max_j</span><span class="p">],</span> <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>  <span class="c"># Switch largest into place</span>
</span><span class="line">    <span class="n">sel_sort_rec</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>  <span class="c"># Sort 0..i-1</span>
</span><span class="line">
</span><span class="line"><span class="n">seq</span> <span class="o">=</span> <span class="p">[</span><span class="n">randrange</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">)]</span>
</span><span class="line"><span class="n">sel_sort_rec</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">sel_sort</span><span class="p">(</span><span class="n">seq</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>  <span class="c"># n..i+1 sorted so far</span>
</span><span class="line">        <span class="n">max_j</span> <span class="o">=</span> <span class="n">i</span>  <span class="c"># Idx. of largest value so far</span>
</span><span class="line">        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>  <span class="c"># Look for a larger value</span>
</span><span class="line">            <span class="k">if</span> <span class="n">seq</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">seq</span><span class="p">[</span><span class="n">max_j</span><span class="p">]:</span> <span class="n">max_j</span> <span class="o">=</span> <span class="n">j</span>  <span class="c"># Found one? Update max_j</span>
</span><span class="line">        <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">seq</span><span class="p">[</span><span class="n">max_j</span><span class="p">]</span> <span class="o">=</span> <span class="n">seq</span><span class="p">[</span><span class="n">max_j</span><span class="p">],</span> <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>  <span class="c"># Switch largest into place</span>
</span><span class="line">
</span><span class="line"><span class="n">seq2</span> <span class="o">=</span> <span class="p">[</span><span class="n">randrange</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">)]</span>
</span><span class="line"><span class="n">sel_sort</span><span class="p">(</span><span class="n">seq2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面我们来看个例子，这是一个经典的“名人问题”，我们要从人群中找到那个名人，所有人都认识名人，而名人则任何人都不认识。</p>

<p>[这个问题的一个变种就是从一系列有依赖关系的集合中找到那个依赖关系最开始的元素，比如多线程环境下的线程依赖问题，后面将要介绍的拓扑排序是解决这类问题更实际的解法。A more down-to-earth version of the same problem would be examining a set of dependencies and trying to find a place to start. For example, you might have threads in a multithreaded application waiting for each other, with even some cyclical dependencies (so-called deadlocks), and you’re looking for one thread that isn’t waiting for any of the others but that all of the others are dependent on. ]</p>

<p>在进一步分析之前我们可以发现，很显然，我们可以暴力求解下，G[u][v]为True表示 u 认识 v。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">naive_celeb</span><span class="p">(</span><span class="n">G</span><span class="p">):</span>
</span><span class="line">    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">G</span><span class="p">)</span>
</span><span class="line">    <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>  <span class="c"># For every candidate...</span>
</span><span class="line">        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>  <span class="c"># For everyone else...</span>
</span><span class="line">            <span class="k">if</span> <span class="n">u</span> <span class="o">==</span> <span class="n">v</span><span class="p">:</span> <span class="k">continue</span>  <span class="c"># Same person? Skip.</span>
</span><span class="line">            <span class="k">if</span> <span class="n">G</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">]:</span> <span class="k">break</span>  <span class="c"># Candidate knows other</span>
</span><span class="line">            <span class="k">if</span> <span class="ow">not</span> <span class="n">G</span><span class="p">[</span><span class="n">v</span><span class="p">][</span><span class="n">u</span><span class="p">]:</span> <span class="k">break</span>  <span class="c"># Other doesn&#39;t know candidate</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="n">u</span>  <span class="c"># No breaks? Celebrity!</span>
</span><span class="line">    <span class="k">return</span> <span class="bp">None</span>  <span class="c"># Couldn&#39;t find anyone</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>用下面代码进行测试，得到正确结果57</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class="line"><span class="n">n</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class="line"><span class="n">G</span> <span class="o">=</span> <span class="p">[[</span><span class="n">randrange</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
</span><span class="line"><span class="n">c</span> <span class="o">=</span> <span class="mi">57</span> <span class="c"># For testing</span>
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class="line">    <span class="n">G</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">    <span class="n">G</span><span class="p">[</span><span class="n">c</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">naive_celeb</span><span class="p">(</span><span class="n">G</span><span class="p">)</span> <span class="c">#57</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的暴力求解其实可以看做是一个reduce，每次reduce一个人，确定他是否是名人，显然这样做并不高效。那么，对于名人问题我们还可以怎么reduce呢？<strong>假设我们还是将规模为n的问题reduce成规模为n-1的问题，那么我们要找到一个非名人(u)，也就是找到一个人(u)，他要么认识其他某个人(v)，要么某个人(v)不认识他，也就是说，对于任何G[u][v]，如果G[u][v]为True，那么消去u；如果G[u][v]为False，那么消去v，这样就可以明显加快查找的速度！</strong></p>

<p>基于上面的想法就有了下面的python实现，第二个for循环是用来验证我们得到的结果是否正确(因为如果我们保证有一个名人的话那么结果肯定正确，但是如果不能保证的话，那么结果就要进行验证)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">celeb</span><span class="p">(</span><span class="n">G</span><span class="p">):</span>
</span><span class="line">    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">G</span><span class="p">)</span>
</span><span class="line">    <span class="n">u</span><span class="p">,</span> <span class="n">v</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>  <span class="c"># The first two</span>
</span><span class="line">    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>  <span class="c"># Others to check</span>
</span><span class="line">        <span class="k">if</span> <span class="n">G</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">]:</span>
</span><span class="line">            <span class="n">u</span> <span class="o">=</span> <span class="n">c</span>  <span class="c"># u knows v? Replace u</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="n">v</span> <span class="o">=</span> <span class="n">c</span>  <span class="c"># Otherwise, replace v</span>
</span><span class="line">    <span class="k">if</span> <span class="n">u</span> <span class="o">==</span> <span class="n">n</span><span class="p">:</span>
</span><span class="line">        <span class="n">c</span> <span class="o">=</span> <span class="n">v</span>  <span class="c"># u was replaced last; use v</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="n">c</span> <span class="o">=</span> <span class="n">u</span>  <span class="c"># Otherwise, u is a candidate</span>
</span><span class="line">    <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>  <span class="c"># For everyone else...</span>
</span><span class="line">        <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="n">v</span><span class="p">:</span> <span class="k">continue</span>  <span class="c"># Same person? Skip.</span>
</span><span class="line">        <span class="k">if</span> <span class="n">G</span><span class="p">[</span><span class="n">c</span><span class="p">][</span><span class="n">v</span><span class="p">]:</span> <span class="k">break</span>  <span class="c"># Candidate knows other</span>
</span><span class="line">        <span class="k">if</span> <span class="ow">not</span> <span class="n">G</span><span class="p">[</span><span class="n">v</span><span class="p">][</span><span class="n">c</span><span class="p">]:</span> <span class="k">break</span>  <span class="c"># Other doesn&#39;t know candidate</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="n">c</span>  <span class="c"># No breaks? Celebrity!</span>
</span><span class="line">    <span class="k">return</span> <span class="bp">None</span>  <span class="c"># Couldn&#39;t find anyone</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看起来还不错吧，我们将一个$O(n^2)$的暴力解法变成了一个$O(n)$的快速解法。</p>

<p>[看书看到这里时，我想起了另一个看起来很相似的问题，从n个元素中找出最大值和最小值。如果我们单独地来查找最大值和最小值，共需要(2n-2)次比较(也许你觉得还可以少几次，但都还是和2n差不多对吧)，但是，如果我们成对来处理，首先比较第一个元素和第二个元素，较大的那个作为当前最大值，较小的那个作为当前最小值(如果n是奇数的话，为了方便可以直接令第一个元素既是最大值又是最小值)，然后向后移动，每次取两个元素出来先比较，较小的那个去和当前最小值比较，较大的那个去和当前最大值比较，这样的策略至多需要 $3\lfloor \frac{n}{2} \rfloor$ 次比较。两个问题虽然完全没关系，但是解决方式总有那么点千丝万缕有木有？]</p>

<p>接下来我们看另一个更加重要的例子，拓扑排序，这是图中很重要的一个算法，在后面介绍到图算法的时候我们还会提到拓扑排序的另一个解法，它的应用范围也非常广，除了前面的依赖关系例子外，还有一个最突出的例子就是类Linux系统中软件的安装，每当我们在终端安装一个软件或者库时，它会自动检测它所依赖的那些部件(components)是否安装了，如果没有那么就先安装那些依赖项。此外，后面<a href="(http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-dynamic-programming/)">介绍到动态规划时有一个单源最短路径问题</a>就利用了拓扑排序。</p>

<p>下图是一个有向无环图(DAG)和它对应的拓扑排序结果</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/topsort.png" alt="image" /></p>

<p>拓扑排序这个问题怎么进行reduce呢？和前面一样，我们最直接的想法可能还是reduce one element，即去掉一个节点，先解决剩下的(n-1)个节点的拓扑排序问题，然后将这个去掉的节点插入到合适的位置，这个想法的实现非常类似前面的插入排序，插入的这个节点(也就是前面去掉的节点)的位置是在前面所有对它有依赖的节点之后。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">naive_topsort</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">S</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">S</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span> <span class="n">S</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">G</span><span class="p">)</span>  <span class="c"># Default: All nodes</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">S</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span> <span class="k">return</span> <span class="nb">list</span><span class="p">(</span><span class="n">S</span><span class="p">)</span>  <span class="c"># Base case, single node</span>
</span><span class="line">    <span class="n">v</span> <span class="o">=</span> <span class="n">S</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>  <span class="c"># Reduction: Remove a node</span>
</span><span class="line">    <span class="n">seq</span> <span class="o">=</span> <span class="n">naive_topsort</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">S</span><span class="p">)</span>  <span class="c"># Recursion (assumption), n-1</span>
</span><span class="line">    <span class="n">min_i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">u</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">seq</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">G</span><span class="p">[</span><span class="n">u</span><span class="p">]:</span> <span class="n">min_i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>  <span class="c"># After all dependencies</span>
</span><span class="line">    <span class="n">seq</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">min_i</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">seq</span>
</span><span class="line">
</span><span class="line"><span class="n">G</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;a&#39;</span><span class="p">:</span> <span class="nb">set</span><span class="p">(</span><span class="s">&#39;bf&#39;</span><span class="p">),</span> <span class="s">&#39;b&#39;</span><span class="p">:</span> <span class="nb">set</span><span class="p">(</span><span class="s">&#39;cdf&#39;</span><span class="p">),</span><span class="s">&#39;c&#39;</span><span class="p">:</span> <span class="nb">set</span><span class="p">(</span><span class="s">&#39;d&#39;</span><span class="p">),</span> <span class="s">&#39;d&#39;</span><span class="p">:</span> <span class="nb">set</span><span class="p">(</span><span class="s">&#39;ef&#39;</span><span class="p">),</span> <span class="s">&#39;e&#39;</span><span class="p">:</span> <span class="nb">set</span><span class="p">(</span><span class="s">&#39;f&#39;</span><span class="p">),</span> <span class="s">&#39;f&#39;</span><span class="p">:</span> <span class="nb">set</span><span class="p">()}</span>
</span><span class="line"><span class="k">print</span> <span class="n">naive_topsort</span><span class="p">(</span><span class="n">G</span><span class="p">)</span> <span class="c"># [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面这个算法是平方时间的，还有没有其他的reduction策略呢？前面的解法类似插入排序，既然又是reduce一个元素，很显然我们可以试试类似选择排序的策略，也就是说，我们找到一个节点，然后把它放在第一个位置上(后面有道练习题思考如果是放在最后一个位置上怎么办)，假设我们直接就是将这个节点去掉会怎样呢？如果剩下的图还是一个DAG的话我们就将原来的问题规约成了一个相似但是规模更小的问题对不对？但是问题是我们选择哪个节点会使得剩下的图还是一个DAG呢？很显然，如果一个节点的入度为0，也就是说没有任何其他的节点依赖于它，那么它肯定可以直接安全地删除掉对不对？！</p>

<p>基于上面的思路就有了下面的解法，每次从图中删除一个入度为0的节点</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">topsort</span><span class="p">(</span><span class="n">G</span><span class="p">):</span>
</span><span class="line">    <span class="n">count</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">((</span><span class="n">u</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">G</span><span class="p">)</span>  <span class="c"># The in-degree for each node</span>
</span><span class="line">    <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">G</span><span class="p">:</span>
</span><span class="line">        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">G</span><span class="p">[</span><span class="n">u</span><span class="p">]:</span>
</span><span class="line">            <span class="n">count</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>  <span class="c"># Count every in-edge</span>
</span><span class="line">    <span class="n">Q</span> <span class="o">=</span> <span class="p">[</span><span class="n">u</span> <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">G</span> <span class="k">if</span> <span class="n">count</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>  <span class="c"># Valid initial nodes</span>
</span><span class="line">    <span class="n">S</span> <span class="o">=</span> <span class="p">[]</span>  <span class="c"># The result</span>
</span><span class="line">    <span class="k">while</span> <span class="n">Q</span><span class="p">:</span>  <span class="c"># While we have start nodes...</span>
</span><span class="line">        <span class="n">u</span> <span class="o">=</span> <span class="n">Q</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>  <span class="c"># Pick one</span>
</span><span class="line">        <span class="n">S</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>  <span class="c"># Use it as first of the rest</span>
</span><span class="line">        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">G</span><span class="p">[</span><span class="n">u</span><span class="p">]:</span>
</span><span class="line">            <span class="n">count</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>  <span class="c"># &quot;Uncount&quot; its out-edges</span>
</span><span class="line">            <span class="k">if</span> <span class="n">count</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>  <span class="c"># New valid start nodes?</span>
</span><span class="line">                <span class="n">Q</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>  <span class="c"># Deal with them next</span>
</span><span class="line">    <span class="k">return</span> <span class="n">S</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>[扩展知识：有意思的是，拓扑排序还和Python Method Resolution Order 有关，也就是用来确定某个方法是应该调用该实例的还是该实例的父类的还是继续往上调用祖先类的对应方法。对于单继承的语言这个很容易，顺着继承链一直往上找就行了，但是对于Python这类多重继承的语言则不简单，它需要更加复杂的策略，Python中使用了C3 Method Resolution Order，我不懂，<a href="https://www.python.org/download/releases/2.3/mro/">想要了解的可以查看 on python docs</a>]</p>

<p>本章后面作者提到了一些其他的内容</p>

<p>1.Strong Assumptions</p>

<p>主要对于Induction，为了更加准确方便地从n-1递推到n，常常需要对问题做很强的假设。</p>

<p>2.Invariants and Correctness</p>

<p>循环不变式，这在算法导论上有详细介绍，循环不变式是用来证明某个算法是正确的一种方式，主要有下面三个步骤[这里和算法导论上介绍的不太一样，道理类似]：</p>

<p>(1). Use induction to show that it is, in fact, true after each iteration. <br />
(2). Show that we’ll get the correct answer if the algorithm terminates.  <br />
(3). Show that the algorithm terminates.   </p>

<p>3.Relaxation and Gradual Improvement</p>

<p>松弛技术是指某个算法使得当前得到的解有进一步的提升，越来越接近最优解(准确解)，这个技术非常实用，每次松弛可以看作是向最终解前进了“一步”，我们的目标自然是希望松弛的次数越少越好，关键就是要确定松弛的顺序(好的松弛顺序可以让我们直接朝着最优解前进，缩短算法运行时间)，后面要介绍的<a href="http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-graphs/">图中的Bellman-Ford算法、Dijkstra算法以及DAG图上的最短路径问题都是如此</a>。</p>

<p>4.Reduction + Contraposition = Hardness Proof</p>

<p>规约是用于证明一个问题是否是一个很难的问题的好方式，假设我们能够将问题A规约至问题B，如果问题B很简单，那么问题A肯定也很简单。逆反一下我们就得到，如果问题A很难，那么问题B就也很难。比如，我们知道了哈密顿回路问题是NP完全问题，要证明哈密顿路径问题也是NP完全问题，就可以将哈密顿回路问题规约为哈密顿路径问题。</p>

<p><strong>[这里作者并没有过多的提到问题A规约至问题B的复杂度，算法导论中有提到，作者可能隐藏了规约的复杂度不大的含义，比如说多项式时间内能够完成，也就是下面的fast readuction]</strong></p>

<p>“fast + fast = fast.” 的含义是：fast readuction + fast solution to B = fast solution to A</p>

<p>两条重要的规约经验：</p>

<p>• If you can (easily) reduce A to B, then B is at least as hard as A.</p>

<p>• If you want to show that X is hard and you know that Y is hard, reduce Y to X.</p>

<p>5.Problem Solving Advice</p>

<p>作者提供的解决一个问题的建议：</p>

<p>(1)Make sure you really understand the problem. </p>

<p>搞明白你要解决的问题</p>

<p>What is the input? The output? What’s the precise relationship between the two? Try to represent the problem instances as familiar structures, such as sequences or graphs. A direct, brute-force solution can sometimes help clarify exactly what the problem is.</p>

<p>(2)Look for a reduction.</p>

<p>寻找一个规约方式</p>

<p>Can you transform the input so it works as input for another problem that you can solve? Can you transform the resulting output so that you can use it? Can you reduce an instance if size n to an instance of size k &lt; n and extend the recursive solution (inductive hypothesis) back to n?</p>

<p>(3)Are there extra assumptions you can exploit? </p>

<p>还有其他的重要的假设条件吗，有时候我们如果只考虑该问题的特殊情况的话没准能够有所收获</p>

<p>Integers in a fixed value range can be sorted more efficiently than arbitrary values. Finding the shortest path in a DAG is easier than in an arbitrary graph, and using only non-negative edge weights is often easier than arbitrary edge weights.</p>

<hr />

<p>问题4-18. 随机生成DAG图</p>

<p>Write a function for generating random DAGs. Write an automatic test that checks that topsort gives a valid orderings, using your DAG generator.</p>

<p>You could generate DAGs by, for example, randomly ordering the nodes, and add a random number of forward-pointing edges to each of them.</p>

<p>问题4-19. 修改拓扑排序</p>

<p>Redesign topsort so it selects the last node in each iteration, rather than the first.</p>

<p>This is quite similar to the original. You now have to maintain the out-degrees of the remaining nodes, and insert each node before the ones you have already found. (Remember not to insert anything in the beginning of a list, though; rather, append, and then reverse it at the end, to avoid a quadratic running time.)</p>

<p>[注意是使用<code>append</code>然后<code>reverse</code>，而不要使用<code>insert</code>]</p>

<p>返回<a href="http://hujiaweibujidao.github.io/python/">Python数据结构与算法设计篇目录</a></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-induction/">http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-induction/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Algorithms - C3 Counting 101]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-counting-101/"/>
    <updated>2014-07-01T10:30:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-counting-101</id>
    <content type="html"><![CDATA[<p>最后更新时间：2014-7-7</p>

<p><strong><center>Python算法设计篇(3)</center></strong>
<strong><center>逸夫图书馆, 2014/7/1</center></strong></p>

<h3 id="centerchapter-3-counting-101center"><center>Chapter 3: Counting 101</center></h3>

<blockquote>
  <p>The greatest shortcoming of the human race is our inability to understand the exponential function.<br />
  —— Dr. Albert A. Bartlett, World Population Balance Board of Advisors</p>
</blockquote>

<p>原书主要介绍了一些基础数学，例如排列组合以及递归循环等，但是本节只重点介绍计算算法的运行时间的三种方法</p>

<p>因为本节内容都很简单，所以我只是浏览了一下，重要的只有计算算法的运行时间的三种方法：1.代换法； 2.递归树法； 3.主定理法。</p>

<p>1.代换法</p>

<p>代换法一般是先猜测解的形式，然后用数学归纳法来证明它</p>

<p>下面是算法导论中的一个求解例子</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/sub1.png" alt="image" /></p>

<p>有意思的是，还有一类问题可以通过变量替换变成容易求解的形式</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/sub2.png" alt="image" /></p>

<p>下面是常用的一些递归式以及它们对应的结果还有实际算法实例</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/sub3.png" alt="image" /></p>

<p>2.递归树法</p>

<p>这种方法就是通过画递归树，然后对每层进行求和，最后将每层的结果相加得到对总的算法运行时间的估计</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/rectree.png" alt="image" /></p>

<p>3.主定理法</p>

<p>这种方法大家最喜欢，给出了一种就像是公式一样的结论，虽然它没有覆盖所有的情况，而且证明非常复杂，但是很多情况下都是可以直接使用的，还有，需要注意主定理的不同情况下的条件，尤其是多项式大于和多项式小于！</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/master.png" alt="image" /></p>

<hr />

<p>不喜欢本节的可以跳过，不留练习了这次，嘿嘿，想练习的话刷算法导论的题目吧</p>

<p>返回<a href="http://hujiaweibujidao.github.io/python/">Python数据结构与算法设计篇目录</a></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-counting-101/">http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-counting-101/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Algorithms - C2 The basics]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-the-basics/"/>
    <updated>2014-07-01T10:20:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-the-basics</id>
    <content type="html"><![CDATA[<p>最后更新时间：2014-7-7</p>

<p><strong><center>Python算法设计篇(2)</center></strong>
<strong><center>逸夫图书馆, 2014/7/1</center></strong></p>

<h3 id="centerchapter-2-the-basicscenter"><center>Chapter 2: The basics</center></h3>

<blockquote>
  <p>Tracey: I didn’t know you were out there.  <br />
Zoe: Sort of the point. Stealth—you may have heard of it.    <br />
Tracey: I don’t think they covered that in basic.    <br />
  —— From “The Message,” episode 14 of Firefly</p>
</blockquote>

<p>本节主要介绍了三个内容：算法渐近运行时间的表示方法、六条算法性能评估的经验以及Python中树和图的实现方式。</p>

<h4 id="section">1.计算模型</h4>

<p>图灵机模型(Turing machine)： <strong>A Turing machine is a simple (abstract) device that can read from, write to, and move along an infinitely long strip of paper.</strong>  The actual behavior of the machines varies. Each is a so-called finite state machine: it has a finite set of states (some of which indicate that it has finished), and every symbol it reads potentially triggers reading and/or writing and switching to a different state. You can think of this machinery as a set of rules. (“If I am in state 4 and see an X, I move one step to the left, write a Y, and switch to state 9.”) </p>

<p>RAM模型(random-access machine)：标准的单核计算机，它大致有下面三个性质</p>

<p>• We don’t have access to any form of concurrent execution; the machine simply executes one instruction after the other.</p>

<p>计算机不能并发执行而只是按照指令顺序依次执行指令。</p>

<p>• Standard, basic operations (such as arithmetic, comparisons, and memory access) all take constant (although possibly different) amounts of time. There are no more complicated basic operations (such as sorting).</p>

<p>基本的操作都是常数时间完成的，没有其他的复杂操作。</p>

<p>• One computer word (the size of a value that we can work with in constant time) is not unlimited but is big enough to address all the memory locations used to represent our problem, plus an extra percentage for our variables.</p>

<p>计算机的字长足够大以使得它能够访问所有的内存地址。</p>

<p>算法的本质： <strong>An algorithm is a procedure, consisting of a finite set of steps (possibly including loops and conditionals) that solves a given problem in finite time.</strong></p>

<p>the notion of running time complexity (as described in the next section) is based on knowing how big a problem instance is, and that size is simply the amount of memory needed to encode it.  </p>

<p>[算法的运行时间是基于问题的大小，这个大小是指问题的输入占用的内存空间大小]</p>

<h4 id="section-1">2.算法渐近运行时间</h4>

<p>主要介绍了大O符号、大$\Omega$符号以及大$\Theta$符号，这部分内容网上很多资料，大家也都知道了，此处略过，可以参考<a href="http://en.wikipedia.org/wiki/Big_O_notation">wikipedia_大O符号</a></p>

<p>算法导论介绍到，对于三个符号可以做如下理解：$O$ = $\le$，$\Omega$ = $\ge$， $\Theta$ = $=$</p>

<p>运行时间的三种特殊的情况：最优情况，最差情况，平均情况</p>

<p>几种常见的运行时间以及算法实例 <a href="http://zh.wikipedia.org/zh-cn/时间复杂度">点击这里可以参考下wiki中的时间复杂度</a></p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/complexity.png" alt="image" /></p>

<h4 id="section-2">3.算法性能评估的经验</h4>

<p>(1)Tip 1: If possible, don’t worry about it.</p>

<p>如果暴力求解也还行就算了吧，别去担心了</p>

<p>(2)Tip 2: For timing things, use timeit.</p>

<p>使用<code>timeit</code>模块对运行时间进行分析，在前面的<a href="http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-datastructures/">数据结构篇中第三部分数据结构</a>的list中已经介绍过了timeit模块，在使用的时候需要注意前面的运行不会影响后面的重复的运行(例如，分析排序算法运行时间，如果将前面已经排好序的序列传递给后面的重复运行是不行的)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#timeit模块简单使用实例</span>
</span><span class="line"><span class="n">timeit</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="s">&quot;x = sum(range(10))&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(3)Tip 3: To find bottlenecks, use a profiler.</p>

<p>使用<code>cProfile</code>模块来获取更多的关于运行情况的内容，从而可以发现问题的瓶颈，如果系统没有<code>cProfile</code>模块，可以使用<code>profile</code>模块代替，关于这两者的更多内容可以查看<a href="https://docs.python.org/2/library/profile.html">Python standard library-Python Profilers</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#cProfile模块简单使用实例</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">cProfile</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">re</span>
</span><span class="line"><span class="n">cProfile</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="s">&#39;re.compile(&quot;foo|bar&quot;)&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">#运行结果：</span>
</span><span class="line">
</span><span class="line">         <span class="mi">194</span> <span class="n">function</span> <span class="n">calls</span> <span class="p">(</span><span class="mi">189</span> <span class="n">primitive</span> <span class="n">calls</span><span class="p">)</span> <span class="ow">in</span> <span class="mf">0.000</span> <span class="n">seconds</span>
</span><span class="line">
</span><span class="line">   <span class="n">Ordered</span> <span class="n">by</span><span class="p">:</span> <span class="n">standard</span> <span class="n">name</span>
</span><span class="line">
</span><span class="line">   <span class="n">ncalls</span>  <span class="n">tottime</span>  <span class="n">percall</span>  <span class="n">cumtime</span>  <span class="n">percall</span> <span class="n">filename</span><span class="p">:</span><span class="n">lineno</span><span class="p">(</span><span class="n">function</span><span class="p">)</span>
</span><span class="line">        <span class="mi">1</span>    <span class="mf">0.000</span>    <span class="mf">0.000</span>    <span class="mf">0.000</span>    <span class="mf">0.000</span> <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="p">:</span><span class="mi">1</span><span class="p">(</span><span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class="line">        <span class="mi">1</span>    <span class="mf">0.000</span>    <span class="mf">0.000</span>    <span class="mf">0.000</span>    <span class="mf">0.000</span> <span class="n">re</span><span class="o">.</span><span class="n">py</span><span class="p">:</span><span class="mi">188</span><span class="p">(</span><span class="nb">compile</span><span class="p">)</span>
</span><span class="line">        <span class="mi">1</span>    <span class="mf">0.000</span>    <span class="mf">0.000</span>    <span class="mf">0.000</span>    <span class="mf">0.000</span> <span class="n">re</span><span class="o">.</span><span class="n">py</span><span class="p">:</span><span class="mi">226</span><span class="p">(</span><span class="n">_compile</span><span class="p">)</span>
</span><span class="line">        <span class="mi">1</span>    <span class="mf">0.000</span>    <span class="mf">0.000</span>    <span class="mf">0.000</span>    <span class="mf">0.000</span> <span class="n">sre_compile</span><span class="o">.</span><span class="n">py</span><span class="p">:</span><span class="mi">178</span><span class="p">(</span><span class="n">_compile_charset</span><span class="p">)</span>
</span><span class="line">        <span class="mi">1</span>    <span class="mf">0.000</span>    <span class="mf">0.000</span>    <span class="mf">0.000</span>    <span class="mf">0.000</span> <span class="n">sre_compile</span><span class="o">.</span><span class="n">py</span><span class="p">:</span><span class="mi">207</span><span class="p">(</span><span class="n">_optimize_charset</span><span class="p">)</span>
</span><span class="line"><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(4)Tip 4: Plot your results.</p>

<p>画出算法性能结果图，如下图所示，可以使用的模块有<code>matplotlib</code></p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/plotresult.png" alt="image" /></p>

<p>(5)Tip 5: Be careful when drawing conclusions based on timing comparisons.</p>

<p>在对基于运行时间的比较而要下结论时需要小心</p>

<p>First, any differences you observe may be because of random variations.</p>

<p>首先，你观察到的差异可能是由于输入中的随机变化而引起的</p>

<p>Second, there are issues when comparing averages. </p>

<p>其次，比较算法的平均情况下的运行时间是存在问题的[这个我未理解，以下是作者的解释]</p>

<p>At the very least, you should stick to comparing averages of actual timings. A common practice to get more meaningful numbers when performing timing experiments is to normalize the running time of each program, dividing it by the running time of some standard, simple algorithm. This can indeed be useful but can in some cases make your results less than meaningful. See the paper “How not to lie with statistics: The correct way to summarize benchmark results” by Fleming and Wallace for a few pointers. For some other perspectives, you could read Bast and Weber’s “Don’t compare averages,” or the more recent paper by Citron et al., “The harmonic or geometric mean: does it really matter?”</p>

<p>Third, your conclusions may not generalize. </p>

<p>最后，你下的结论不要太过于宽泛</p>

<p>(6)Tip 6: Be careful when drawing conclusions about asymptotics from experiments.</p>

<p>在对从实验中得到关于渐近时间的信息下结论时需要小心，实验只是对于理论的一个支撑，可以通过实验来推翻一个渐近时间结果的假设，但是反过来一般不行 [以下是作者的解释]</p>

<p>If you want to say something conclusively about the asymptotic behavior of an algorithm, you need to analyze it, as described earlier in this chapter. Experiments can give you hints, but they are by their nature finite, and asymptotics deal with what happens for arbitrarily large data sizes. On the other hand, unless you’re working in theoretical computer science, the purpose of asymptotic analysis is to say something about the behavior of the algorithm when implemented and run on actual problem instances, meaning that experiments should be relevant.</p>

<p>4.在Python中实现树和图</p>

<p><strong>[Python中的dict和set]</strong> <br />
Python中很多地方都使用了hash策略，在前面的<a href="http://hujiaweibujidao.github.io/blog/2014/05/07/python-algorithms-search/">Python数据结构篇中的搜索部分</a>已经介绍了hash的内容。Python提供了<code>hash</code>函数，例如<code>hash("Hello, world!")</code>得到<code>-943387004357456228</code> (结果不一定相同)。Python中的dict和set都使用了hash机制，所以平均情况下它们获取元素都是常数时间的。</p>

<p>(1)图的表示：最常用的两种表示方式是邻接表和邻接矩阵 [假设要表示的图如下]</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/graphrep.png" alt="image" /></p>

<p>邻接表 Adjacency Lists：因为历史原因，邻接表往往都是指链表list，但实际上也可以是其他的，例如在python中也可以是set或者dict，不同的表示方式有各自的优缺点，它们判断节点的连接关系和节点的度的方式甚至两个操作的性能都不太一样。</p>

<p>① adjacency lists 表示形式</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># A Straightforward Adjacency List Representation</span>
</span><span class="line"><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</span><span class="line"><span class="n">N</span> <span class="o">=</span> <span class="p">[</span>
</span><span class="line">    <span class="p">[</span><span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">f</span><span class="p">],</span>    <span class="c"># a</span>
</span><span class="line">    <span class="p">[</span><span class="n">c</span><span class="p">,</span> <span class="n">e</span><span class="p">],</span>             <span class="c"># b</span>
</span><span class="line">    <span class="p">[</span><span class="n">d</span><span class="p">],</span>                <span class="c"># c</span>
</span><span class="line">    <span class="p">[</span><span class="n">e</span><span class="p">],</span>                <span class="c"># d</span>
</span><span class="line">    <span class="p">[</span><span class="n">f</span><span class="p">],</span>                <span class="c"># e</span>
</span><span class="line">    <span class="p">[</span><span class="n">c</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">h</span><span class="p">],</span>          <span class="c"># f</span>
</span><span class="line">    <span class="p">[</span><span class="n">f</span><span class="p">,</span> <span class="n">h</span><span class="p">],</span>             <span class="c"># g</span>
</span><span class="line">    <span class="p">[</span><span class="n">f</span><span class="p">,</span> <span class="n">g</span><span class="p">]</span>              <span class="c"># h</span>
</span><span class="line"><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">b</span> <span class="ow">in</span> <span class="n">N</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="c"># Neighborhood membership -&gt; True</span>
</span><span class="line"><span class="nb">len</span><span class="p">(</span><span class="n">N</span><span class="p">[</span><span class="n">f</span><span class="p">])</span> <span class="c"># Degree -&gt; 3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>② adjacency sets 表示形式</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># A Straightforward Adjacency Set Representation</span>
</span><span class="line"><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</span><span class="line"><span class="n">N</span> <span class="o">=</span> <span class="p">[</span>
</span><span class="line">    <span class="p">{</span><span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">f</span><span class="p">},</span>    <span class="c"># a</span>
</span><span class="line">    <span class="p">{</span><span class="n">c</span><span class="p">,</span> <span class="n">e</span><span class="p">},</span>             <span class="c"># b</span>
</span><span class="line">    <span class="p">{</span><span class="n">d</span><span class="p">},</span>                <span class="c"># c</span>
</span><span class="line">    <span class="p">{</span><span class="n">e</span><span class="p">},</span>                <span class="c"># d</span>
</span><span class="line">    <span class="p">{</span><span class="n">f</span><span class="p">},</span>                <span class="c"># e</span>
</span><span class="line">    <span class="p">{</span><span class="n">c</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">h</span><span class="p">},</span>          <span class="c"># f</span>
</span><span class="line">    <span class="p">{</span><span class="n">f</span><span class="p">,</span> <span class="n">h</span><span class="p">},</span>             <span class="c"># g</span>
</span><span class="line">    <span class="p">{</span><span class="n">f</span><span class="p">,</span> <span class="n">g</span><span class="p">}</span>              <span class="c"># h</span>
</span><span class="line"><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">b</span> <span class="ow">in</span> <span class="n">N</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="c"># Neighborhood membership -&gt; True</span>
</span><span class="line"><span class="nb">len</span><span class="p">(</span><span class="n">N</span><span class="p">[</span><span class="n">f</span><span class="p">])</span> <span class="c"># Degree -&gt; 3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>基本上和adjacency lists表示形式一样对吧？但是，对于list，判断一个元素是否存在是线性时间$O(N(v))$，而在set中是常数时间$O(1)$，所以对于稠密图使用adjacency sets要更加高效。</p>

<p>③ adjacency dicts 表示形式</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># A Straightforward Adjacency Dict Representation</span>
</span><span class="line"><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</span><span class="line"><span class="n">N</span> <span class="o">=</span> <span class="p">[</span>
</span><span class="line">    <span class="p">{</span><span class="n">b</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="n">c</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="n">d</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span><span class="mi">9</span><span class="p">,</span> <span class="n">f</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span>    <span class="c"># a</span>
</span><span class="line">    <span class="p">{</span><span class="n">c</span><span class="p">:</span><span class="mi">4</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span><span class="mi">3</span><span class="p">},</span>                   <span class="c"># b</span>
</span><span class="line">    <span class="p">{</span><span class="n">d</span><span class="p">:</span><span class="mi">8</span><span class="p">},</span>                        <span class="c"># c</span>
</span><span class="line">    <span class="p">{</span><span class="n">e</span><span class="p">:</span><span class="mi">7</span><span class="p">},</span>                        <span class="c"># d</span>
</span><span class="line">    <span class="p">{</span><span class="n">f</span><span class="p">:</span><span class="mi">5</span><span class="p">},</span>                        <span class="c"># e</span>
</span><span class="line">    <span class="p">{</span><span class="n">c</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="n">g</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="n">h</span><span class="p">:</span><span class="mi">2</span><span class="p">},</span>              <span class="c"># f</span>
</span><span class="line">    <span class="p">{</span><span class="n">f</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="n">h</span><span class="p">:</span><span class="mi">6</span><span class="p">},</span>                   <span class="c"># g</span>
</span><span class="line">    <span class="p">{</span><span class="n">f</span><span class="p">:</span><span class="mi">9</span><span class="p">,</span> <span class="n">g</span><span class="p">:</span><span class="mi">8</span><span class="p">}</span>                    <span class="c"># h</span>
</span><span class="line"><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">b</span> <span class="ow">in</span> <span class="n">N</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="c"># Neighborhood membership -&gt; True</span>
</span><span class="line"><span class="nb">len</span><span class="p">(</span><span class="n">N</span><span class="p">[</span><span class="n">f</span><span class="p">])</span> <span class="c"># Degree -&gt; 3</span>
</span><span class="line"><span class="n">N</span><span class="p">[</span><span class="n">a</span><span class="p">][</span><span class="n">b</span><span class="p">]</span> <span class="c"># Edge weight for (a, b) -&gt; 2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这种情况下如果边是带权值的都没有问题！</p>

<p>除了上面三种方式外，还可以改变外层数据结构，上面三个都是list，其实也可以使用dict，例如下面的代码，此时节点是用字母表示的。在实际应用中，要根据问题选择最合适的表示形式。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">N</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="s">&#39;a&#39;</span><span class="p">:</span> <span class="nb">set</span><span class="p">(</span><span class="s">&#39;bcdef&#39;</span><span class="p">),</span>
</span><span class="line">    <span class="s">&#39;b&#39;</span><span class="p">:</span> <span class="nb">set</span><span class="p">(</span><span class="s">&#39;ce&#39;</span><span class="p">),</span>
</span><span class="line">    <span class="s">&#39;c&#39;</span><span class="p">:</span> <span class="nb">set</span><span class="p">(</span><span class="s">&#39;d&#39;</span><span class="p">),</span>
</span><span class="line">    <span class="s">&#39;d&#39;</span><span class="p">:</span> <span class="nb">set</span><span class="p">(</span><span class="s">&#39;e&#39;</span><span class="p">),</span>
</span><span class="line">    <span class="s">&#39;e&#39;</span><span class="p">:</span> <span class="nb">set</span><span class="p">(</span><span class="s">&#39;f&#39;</span><span class="p">),</span>
</span><span class="line">    <span class="s">&#39;f&#39;</span><span class="p">:</span> <span class="nb">set</span><span class="p">(</span><span class="s">&#39;cgh&#39;</span><span class="p">),</span>
</span><span class="line">    <span class="s">&#39;g&#39;</span><span class="p">:</span> <span class="nb">set</span><span class="p">(</span><span class="s">&#39;fh&#39;</span><span class="p">),</span>
</span><span class="line">    <span class="s">&#39;h&#39;</span><span class="p">:</span> <span class="nb">set</span><span class="p">(</span><span class="s">&#39;fg&#39;</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>邻接矩阵 Adjacency Matrix</p>

<p>使用嵌套的list，用1和0表示点和点之间的连接关系，此时对于它们的连接性判断时间是常数，但是对于度的计算时间是线性的</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># An Adjacency Matrix, Implemented with Nested Lists</span>
</span><span class="line"><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</span><span class="line"><span class="n">N</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="c"># a</span>
</span><span class="line">     <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="c"># b</span>
</span><span class="line">     <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="c"># c</span>
</span><span class="line">     <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="c"># d</span>
</span><span class="line">     <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="c"># e</span>
</span><span class="line">     <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span> <span class="c"># f</span>
</span><span class="line">     <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span> <span class="c"># g</span>
</span><span class="line">     <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">]]</span> <span class="c"># h</span>
</span><span class="line">
</span><span class="line"><span class="n">N</span><span class="p">[</span><span class="n">a</span><span class="p">][</span><span class="n">b</span><span class="p">]</span> <span class="c"># Neighborhood membership -&gt; 1</span>
</span><span class="line"><span class="nb">sum</span><span class="p">(</span><span class="n">N</span><span class="p">[</span><span class="n">f</span><span class="p">])</span> <span class="c"># Degree -&gt; 3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果边带有权值，也可以使用权值代替1，用inf代替0</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</span><span class="line"><span class="n">_</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s">&#39;inf&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">W</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">],</span> <span class="c"># a</span>
</span><span class="line">     <span class="p">[</span><span class="n">_</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">],</span> <span class="c"># b</span>
</span><span class="line">     <span class="p">[</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">],</span> <span class="c"># c</span>
</span><span class="line">     <span class="p">[</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">],</span> <span class="c"># d</span>
</span><span class="line">     <span class="p">[</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">],</span> <span class="c"># e</span>
</span><span class="line">     <span class="p">[</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span> <span class="c"># f</span>
</span><span class="line">     <span class="p">[</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">6</span><span class="p">],</span> <span class="c"># g</span>
</span><span class="line">     <span class="p">[</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span><span class="p">]]</span> <span class="c"># h</span>
</span><span class="line">
</span><span class="line"><span class="n">W</span><span class="p">[</span><span class="n">a</span><span class="p">][</span><span class="n">b</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">inf</span> <span class="c"># Neighborhood membership</span>
</span><span class="line"><span class="nb">sum</span><span class="p">(</span><span class="mi">1</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">W</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="k">if</span> <span class="n">w</span> <span class="o">&lt;</span> <span class="n">inf</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>  <span class="c"># Degree</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>NumPy</strong>：这里作者提到了一个最常用的数值计算模块NumPy，它包含了很多与多维数组计算有关的函数。我可能会在以后的机器学习中详细学习它的使用，到时候可能会写篇文章介绍它的使用</p>

<p>(2)树的表示 [假设要表示下面的树]</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/treerep.png" alt="image" /></p>

<p>树是一种特殊的图，所以可以使用图的表示方法，但是因为树的特殊性，其实有其他更好的表示方法，最简单的就是直接用一个list即可，缺点也很明显，可读性太差了，相当不直观</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">T</span> <span class="o">=</span> <span class="p">[[</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">],</span> <span class="p">[</span><span class="s">&quot;c&quot;</span><span class="p">],</span> <span class="p">[</span><span class="s">&quot;d&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;e&quot;</span><span class="p">,</span> <span class="s">&quot;f&quot;</span><span class="p">]]]</span>
</span><span class="line"><span class="n">T</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>  <span class="c"># &#39;e&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>很多时候我们都能够肯定树中节点的孩子节点个数最多有多少个(比如二叉树，三叉树等等)，所以比较方便的实现方式就是使用类class</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># A Binary Tree Class 二叉树实例</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Tree</span><span class="p">:</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">left</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">right</span>
</span><span class="line">
</span><span class="line"><span class="n">t</span> <span class="o">=</span> <span class="n">Tree</span><span class="p">(</span><span class="n">Tree</span><span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">),</span> <span class="n">Tree</span><span class="p">(</span><span class="s">&quot;c&quot;</span><span class="p">,</span> <span class="s">&quot;d&quot;</span><span class="p">))</span>
</span><span class="line"><span class="n">t</span><span class="o">.</span><span class="n">right</span><span class="o">.</span><span class="n">left</span>  <span class="c"># &#39;c&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的实现方式的子节点都是孩子节点，但是还有一种很常用的树的表示方式，那就是“左孩子，右兄弟”表示形式，它就适用于孩子节点数目不确定的情况</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># 左孩子，右兄弟 表示方式</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Tree</span><span class="p">:</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">kids</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">kids</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">kids</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="nb">next</span>
</span><span class="line"><span class="k">return</span> <span class="n">Tree</span>
</span><span class="line">
</span><span class="line"><span class="n">t</span> <span class="o">=</span> <span class="n">Tree</span><span class="p">(</span><span class="n">Tree</span><span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="n">Tree</span><span class="p">(</span><span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="n">Tree</span><span class="p">(</span><span class="s">&quot;c&quot;</span><span class="p">,</span> <span class="n">Tree</span><span class="p">(</span><span class="s">&quot;d&quot;</span><span class="p">)))))</span>
</span><span class="line"><span class="n">t</span><span class="o">.</span><span class="n">kids</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">val</span>  <span class="c"># &#39;c&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />

<p><strong>[Bunch Pattern]</strong>：有意思的是，上面的实现方式使用了Python中一种常用的设计模式，叫做Bunch Pattern，貌似来自经典书籍Python Cookbook，原书介绍如下： </p>

<p>[因为这个不太好理解和翻译，还是原文比较有味，后期等我深刻理解了我可能会详细介绍它]</p>

<p>When prototyping (or even finalizing) data structures such as trees, it can be useful to have a flexible class that will allow you to specify arbitrary attributes in the constructor. In these cases, the “Bunch” pattern (named by Alex Martelli in the Python Cookbook) can come in handy. There are many ways of implementing it, but the gist of it is the following:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">Bunch</span><span class="p">(</span><span class="nb">dict</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds</span><span class="p">):</span>
</span><span class="line">        <span class="nb">super</span><span class="p">(</span><span class="n">Bunch</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">__dict__</span> <span class="o">=</span> <span class="bp">self</span>
</span><span class="line"><span class="k">return</span> <span class="n">Bunch</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There are several useful aspects to this pattern. First, it lets you create and set arbitrary attributes by supplying them as command-line arguments:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Bunch</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;Jayne Cobb&quot;</span><span class="p">,</span> <span class="n">position</span><span class="o">=</span><span class="s">&quot;Public Relations&quot;</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="o">.</span><span class="n">name</span>
</span><span class="line"><span class="s">&#39;Jayne Cobb&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Second, by subclassing dict, you get lots of functionality for free, such as iterating over the keys/attributes or easily checking whether an attribute is present. Here’s an example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">T</span> <span class="o">=</span> <span class="n">Bunch</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">T</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="n">T</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="s">&quot;b&quot;</span><span class="p">),</span> <span class="n">right</span><span class="o">=</span><span class="n">T</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="s">&quot;c&quot;</span><span class="p">))</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">left</span>
</span><span class="line"><span class="p">{</span><span class="s">&#39;right&#39;</span><span class="p">:</span> <span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="s">&#39;left&#39;</span><span class="p">:</span> <span class="s">&#39;a&#39;</span><span class="p">}</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">left</span><span class="o">.</span><span class="n">right</span>
</span><span class="line"><span class="s">&#39;b&#39;</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">t</span><span class="p">[</span><span class="s">&#39;left&#39;</span><span class="p">][</span><span class="s">&#39;right&#39;</span><span class="p">]</span>
</span><span class="line"><span class="s">&#39;b&#39;</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;left&quot;</span> <span class="ow">in</span> <span class="n">t</span><span class="o">.</span><span class="n">right</span>
</span><span class="line"><span class="bp">True</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;right&quot;</span> <span class="ow">in</span> <span class="n">t</span><span class="o">.</span><span class="n">right</span>
</span><span class="line"><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This pattern isn’t useful only when building trees, of course. You could use it for any situation where you’d want a flexible object whose attributes you could set in the constructor.</p>

<hr />

<p><strong>[与图有关的python模块]</strong>：</p>

<p>• NetworkX: <a href="http://networkx.lanl.gov">http://networkx.lanl.gov</a></p>

<p>• python-graph: <a href="http://code.google.com/p/python-graph">http://code.google.com/p/python-graph</a></p>

<p>• Graphine: <a href="http://gitorious.org/projects/graphine/pages/Home">http://gitorious.org/projects/graphine/pages/Home</a></p>

<p>• Pygr: a graph database  <a href="http://bioinfo.mbi.ucla.edu/pygr">http://bioinfo.mbi.ucla.edu/pygr</a>  </p>

<p>• Gato: a graph animation toolbox <a href="http://gato.sourceforge.net">http://gato.sourceforge.net</a>   </p>

<p>• PADS: a collection of graph algorithms  <a href="http://www.ics.uci.edu/~eppstein/PADS">http://www.ics.uci.edu/~eppstein/PADS</a></p>

<hr />

<p>5.Python编程中的一些细节</p>

<p>In general, the more important your program, the more you should mistrust such black boxes and seek to find out what’s going on under the cover.</p>

<p>作者在这里提到，如果你的程序越是重要的话，你就越是需要明白你所使用的数据结构的内部实现，甚至有些时候你要自己重新实现它。</p>

<p>(1)Hidden Squares 隐藏的平方运行时间</p>

<p>有些情况下我们可能没有注意到我们的操作是非常不高效的，例如下面的代码，如果是判断某个元素是否在list中运行时间是线性的，如果是使用set，判断某个元素是否存在只需要常数时间，所以如果我们需要判断很多元素是否存在的话，使用set的性能会更加高效。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">randrange</span>
</span><span class="line"><span class="n">L</span> <span class="o">=</span> <span class="p">[</span><span class="n">randrange</span><span class="p">(</span><span class="mi">10000</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">)]</span>
</span><span class="line"><span class="mi">42</span> <span class="ow">in</span> <span class="n">L</span> <span class="c"># False</span>
</span><span class="line"><span class="n">S</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">L</span><span class="p">)</span>
</span><span class="line"><span class="mi">42</span> <span class="ow">in</span> <span class="n">S</span> <span class="c">#False</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(2)The Trouble with Floats 精度带来的烦恼</p>

<p>现有的计算机系统都是不能精确表达小数的！[该部分内容可以阅读与计算机组成原理相关的书籍了解计算机的浮点数系统]在python中，浮点数可能带来很多的烦恼，例如，运行下面的实例，本应该是相等，但是却返回False。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="nb">sum</span><span class="p">(</span><span class="mf">0.1</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span> <span class="o">==</span> <span class="mf">1.0</span> <span class="c"># False</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>永远不要使用小数比较结果来作为两者相等的判断依据！</strong>你最多只能判断两个浮点数在有限位数上是相等的，也就是近似相等了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">almost_equal</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">places</span><span class="o">=</span><span class="mi">7</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="nb">round</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="n">y</span><span class="p">),</span> <span class="n">places</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line"><span class="n">almost_equal</span><span class="p">(</span><span class="nb">sum</span><span class="p">(</span><span class="mf">0.1</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)),</span> <span class="mf">1.0</span><span class="p">)</span> <span class="c"># True</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>除此之外，可以使用一些有用的第三方模块，例如<code>decimal</code>，在需要处理金融数据的时候很有帮助</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">decimal</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class="line"><span class="nb">sum</span><span class="p">(</span><span class="n">Decimal</span><span class="p">(</span><span class="s">&quot;0.1&quot;</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span> <span class="o">==</span> <span class="n">Decimal</span><span class="p">(</span><span class="s">&quot;1.0&quot;</span><span class="p">)</span>  <span class="c"># Ture</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>还有一个有用的<code>Sage</code>模块，如下所示，它可以进行数学的符号运算得到准确值，如果需要也可以得到近似的浮点数解。<a href="http://sagemath.org">Sage的官方网址</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">sage</span><span class="p">:</span> <span class="mi">3</span><span class="o">/</span><span class="mi">5</span> <span class="o">*</span> <span class="mi">11</span><span class="o">/</span><span class="mi">7</span> <span class="o">+</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">5239</span><span class="p">)</span>
</span><span class="line"><span class="mi">13</span><span class="o">*</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">31</span><span class="p">)</span> <span class="o">+</span> <span class="mi">33</span><span class="o">/</span><span class="mi">35</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>更多和Python中的浮点数有关的内容可以查看<a href="https://docs.python.org/2/tutorial/floatingpoint.html">Floating Point Arithmetic: Issues and Limitations</a></p>

<hr />

<p>问题2-12. (图的表示)</p>

<p>Consider the following graph representation: you use a dictionary and let each key be a pair (tuple) of two nodes, with the corresponding value set to the edge weight. For example W[u, v] = 42. What would be the advantages and disadvantages of this representation? Could you supplement it to mitigate the downsides?</p>

<p>The advantages and disadvantages depend on what you’re using it for. It works well for looking up edge weights efficiently but less well for iterating over the graph’s nodes or a node’s neighbors, for example. You could improve that part by using some extra structures (for example, a global list of nodes, if that’s what you need or a simple adjacency list structure, if that’s required).</p>

<p>返回<a href="http://hujiaweibujidao.github.io/python/">Python数据结构与算法设计篇目录</a></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-the-basics/">http://hujiaweibujidao.github.io/blog/2014/07/01/python-algorithms-the-basics/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
</feed>
