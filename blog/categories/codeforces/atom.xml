<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: codeforces | Hujiawei Bujidao]]></title>
  <link href="http://hujiaweibujidao.github.io/blog/categories/codeforces/atom.xml" rel="self"/>
  <link href="http://hujiaweibujidao.github.io/"/>
  <updated>2014-11-26T13:43:14+08:00</updated>
  <id>http://hujiaweibujidao.github.io/</id>
  <author>
    <name><![CDATA[hujiawei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CodeForces Round 278 Div2]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/11/22/codeforces-round-278-div2/"/>
    <updated>2014-11-22T11:57:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/11/22/codeforces-round-278-div2</id>
    <content type="html"><![CDATA[<p>昨晚又熬夜参加CodeForces了，比赛拖延到1点半才开始，状态果然又是很糟糕，目前解决前面2道题</p>

<h4 id="giga-towerhttpcodeforcescomcontest488problema"><a href="http://codeforces.com/contest/488/problem/A">Giga Tower</a></h4>

<p>这题的大意是给你一个数字，让你求最近的大于这个数字并且含有数字8的数字与这个数字的差值，比如数字9，找到的数字应该是18，差值就是18-9=9。这题我又想多了，心想直接求肯定不行，然后设计了一个看起来不错的得到大于或者小于(用于负数)一个数字的最近的含有数字8的数字，结果写了蛮久了还是有不少bug，没敢提交，后来看到那么多人做出来了，就觉得这题没准直接累加就行，因为毕竟遇到8很容易，一般情况下都能很快得到那个目标数字，结果一试还真是行！</p>

<p>```java
import java.util.Scanner;</p>

<p>public class Test278A2 {</p>

<pre><code>public static void main(String[] args) {
    Scanner cin = new Scanner(System.in);
    int b = 1;
    int a = cin.nextInt();
    String s = String.valueOf(++a);
    while (!s.contains("8")) {
        b++;
        s = String.valueOf(++a);
    }
    System.out.println(b);
}
</code></pre>

<p>}</p>

<p>```</p>

<h4 id="candy-boxeshttpcodeforcescomcontest488problemb"><a href="http://codeforces.com/contest/488/problem/B">Candy Boxes</a></h4>

<p>这题首先告诉我们4个盒子里面的糖果数目满足如下条件</p>

<script type="math/tex; mode=display">x4-x1=\frac{x2+x3}{2}=\frac{x1+x2+x3+x4}{4}, x1 \le x2 \le x3 \le x4</script>

<p>也就是说这四个数字的range，median和average都相同，现在只告诉你其中
n(<script type="math/tex">0 \le n \le 4</script>)个数字，让你求其他的数字，如果有很多的解只需要输出其中的一个即可，如果任何数字都不能满足的话输出NO。</p>

<p>这题其实很简单，首先从上面的连等式中很快能够得到下面的结果</p>

<script type="math/tex; mode=display">x1=\frac{x2+x3}{4}, x4=3*x1</script>

<p>其中x4是x1的3倍是很关键的信息，然后分n分别为0，1，2，3，4这5种情况讨论就行了，难点在于n=2和n=3。</p>

<p>当n=2时，先对这两个已知数排序，然后分别假设它们是(x1, x2)或者(x1, x3)等等所有可能的组合，根据条件求出剩下的两个数字，然后判断这四个数字是否满足条件，如果满足的话那就输出，否则输出NO。</p>

<p>同理，当n=3时，分别假设剩下的那个数字是x1或者x2或者x3或者x4，求出来之后验证即可。</p>

<p>```
import java.util.Arrays;
import java.util.Scanner;</p>

<p>/**
 * hujiawei - 14/11/22.
 */
public class Test278B {</p>

<pre><code>public static void main(String[] args) {
    Scanner cin = new Scanner(System.in);

    int n = cin.nextInt();
    int[] a = new int[n];
    for (int i = 0; i &lt; n; i++) {
        a[i] = cin.nextInt();
    }

    if (n == 0) {
        System.out.println("YES");
        System.out.println("1");
        System.out.println("2");
        System.out.println("2");
        System.out.println("3");
    } else if (n == 1) {
        System.out.println("YES");
        System.out.println(2 * a[0]);
        System.out.println(2 * a[0]);
        System.out.println(3 * a[0]);
    } else if (n == 4) {
        Arrays.sort(a);
        if (check(a[0], a[1], a[2], a[3])) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    } else if (n == 3) {
        Arrays.sort(a);
        int a1 = a[2] / 3;
        if (check(a1, a[0], a[1], a[2])) {
            System.out.println("YES");
            System.out.println(a1);
            return;
        }
        int a4 = a[0] * 3;
        if (check(a[0], a[1], a[2], a4)) {
            System.out.println("YES");
            System.out.println(a4);
            return;
        }
        int a2 = 4 * a[0] - a[1];
        if (check(a[0], a2, a[1], a[2])) {
            System.out.println("YES");
            System.out.println(a2);
            return;
        }
        int a3 = 4 * a[0] - a[1];
        if (check(a[0], a[1], a3, a[2])) {
            System.out.println("YES");
            System.out.println(a3);
            return;
        }
        System.out.println("NO");
    } else {
        Arrays.sort(a);
        int a1, a2, a3, a4;
        //a1,a4
        a1 = a[0];
        a4 = a[1];
        if (a4 == 3 * a1) {
            a2 = (a1 + a4) / 2;
            a3 = (a1 + a4) / 2;
            if (check(a1, a2, a3, a4)) {
                System.out.println("YES");
                System.out.println(a2);
                System.out.println(a3);
                return;
            }
        }
        //a1,a2
        a1 = a[0];
        a2 = a[1];
        if (4 * a1 &gt; a2) {
            a3 = 4 * a1 - a2;
            a4 = 3 * a1;
            if (check(a1, a2, a3, a4)) {
                System.out.println("YES");
                System.out.println(a3);
                System.out.println(a4);
                return;
            }
        }
        //a1,a3
        a1 = a[0];
        a3 = a[1];
        if (4 * a1 &gt; a3) {
            a2 = 4 * a1 - a3;
            a4 = 3 * a1;
            if (check(a1, a2, a3, a4)) {
                System.out.println("YES");
                System.out.println(a2);
                System.out.println(a4);
                return;
            }
        }
        //a2,a3
        a2 = a[0];
        a3 = a[1];
        if ((a2 + a3) % 4 == 0) {
            a1 = (a2 + a3) / 4;
            a4 = 3 * a1;
            if (check(a1, a2, a3, a4)) {
                System.out.println("YES");
                System.out.println(a1);
                System.out.println(a4);
                return;
            }
        }
        //a2,a4 and a3,a4
        a2 = a[0];
        a4 = a[1];
        if (a4 % 3 == 0) {
            a1 = a4 / 3;
            a3 = 4 * a1 - a2;
            if (check(a1, a2,a3, a4)) {
                System.out.println("YES");
                System.out.println(a1);
                System.out.println(a3);
                return;
            }
        }
        //a3,a4
        a3 = a[0];
        a4 = a[1];
        if (a4 % 3 == 0) {
            a1 = a4 / 3;
            a2 = 4 * a1 - a3;
            if (check(a1, a2,a3, a4)) {
                System.out.println("YES");
                System.out.println(a1);
                System.out.println(a2);
                return;
            }
        }
        //
        System.out.println("NO");
    }
}

private static boolean check(int a1, int a2, int a3, int a4) {
    if (a1 &lt;= a2 &amp;&amp; a2 &lt;= a3 &amp;&amp; a3 &lt;= a4 &amp;&amp; (a4 - a1) == (a2 + a3) / 2 &amp;&amp; (a4 - a1) == (a1 + a2 + a3 + a4) / 4) {
        return true;
    }
    return false;
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CodeForces Round 277.5 Div2]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/11/18/codeforces-round-277-dot-5-div2/"/>
    <updated>2014-11-18T10:22:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/11/18/codeforces-round-277-dot-5-div2</id>
    <content type="html"><![CDATA[<p>昨晚熬夜刷了CodeForces Round 277.5 Div2，哎，果然很难适应这么晚做题，不在状态，一个小时后才进入状态了，结果比赛完了整个人就睡不着了。。。</p>

<p>这次写解题报告的人很靠谱啊，直接附上关键代码，哈哈哈</p>

<h4 id="a---swapsorthttpcodeforcescomcontest489problema"><a href="http://codeforces.com/contest/489/problem/A">489A - SwapSort</a></h4>

<p>这题很简单，大致就是让你通过不超过n次的数据交换排序一个长度为n的数组，其实用选择排序就行了嘛，我比赛的时候不知怎么搞的，首先想到快排，结果撸了两种快排，终于有一种快排过了pretests，但是后面的system tests就挂了。。。</p>

<p>```java
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Scanner;</p>

<p>//http://codeforces.com/contest/489/problem/A</p>

<p>//选择排序，最多只需要n次交换</p>

<p>public class SwapSort2775A {</p>

<pre><code>private static ArrayList&lt;ASwap2&gt; swaps;

public static void main(String[] args) {
    Scanner cin = new Scanner(System.in);
    int n = cin.nextInt();
    int[] a = new int[n];
    for (int i = 0; i &lt; n; i++) {
        a[i] = cin.nextInt();
    }
    swaps = new ArrayList&lt;ASwap2&gt;();
    int t;
    for (int i = 0; i &lt; n; i++) {
        t = i;
        for (int k = i; k &lt; n; k++) {
            if (a[k] &lt; a[t]) t = k;//
        }
        if (t != i) {
            swaps.add(new ASwap2(t, i));
            int s = a[i];
            a[i] = a[t];
            a[t] = s;
        }
    }
    System.out.println(swaps.size());
    for (ASwap2 swap : swaps) {
        System.out.println(swap.x + " " + swap.y);
    }
}

static class ASwap2 {//

    int x, y;

    ASwap2(int x, int y) {
        this.x = x;
        this.y = y;
    }
}
</code></pre>

<p>}
```</p>

<h4 id="b---bersu-ballhttpcodeforcescomcontest489problemb"><a href="http://codeforces.com/contest/489/problem/B">489B - BerSU Ball</a></h4>

<p>这题大意是n个男孩m个女孩的舞蹈技能不同，匹配时要满足他们的技能差值不超过1，求最大匹配。我一看完了慌了，这么快就要二分图匹配了？可是当我快速复习二分图匹配(大神请尽情鄙视新手吧…)时发现，尼玛这题贪心就行了啊，结果一分钟一撸就过了！核心代码就像是在做合并排序的合并操作，用两个指针分别指向两个数组的当前元素下标，如果它们能满足配对就配对，然后两个指针都向后移动，不能的话数据较小的对应的指针向后移动就行了。</p>

<p>```
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.Scanner;</p>

<p>//http://codeforces.com/contest/489/problem/B</p>

<p>//贪心</p>

<p>public class BerSUBall2775B {</p>

<pre><code>public static void main(String[] args) {
    Scanner cin = new Scanner(System.in);
    int n = cin.nextInt();
    int[] a = new int[n];
    for (int i = 0; i &lt; n; i++) {
        a[i] = cin.nextInt();
    }
    int m = cin.nextInt();
    int[] b = new int[m];
    for (int i = 0; i &lt; m; i++) {
        b[i] = cin.nextInt();
    }
    Arrays.sort(a);
    Arrays.sort(b);
    int count = 0;
    int i = 0, j = 0;
    while (i &lt; n &amp;&amp; j &lt; m) {
        if (Math.abs(a[i] - b[j]) &lt;= 1) {
            i++;
            j++;
            count++;
        } else {
            if (a[i] &lt; b[j]) {
                i++;
            } else {
                j++;
            }
        }
    }
    System.out.println(count);
}
</code></pre>

<p>}
```</p>

<h4 id="c---given-length-and-sum-of-digitshttpcodeforcescomcontest489problemc"><a href="http://codeforces.com/contest/489/problem/C">489C - Given Length and Sum of Digits…</a></h4>

<p>这题大意是求由<code>m</code>位数字组成的且各位数字之和为<code>s</code>的最大数和最小数，最大数我们可以通过贪心的方式来得到，也就是从高位往低位开始设置每位的值，当前位总是取它能取的最大的那个数字，如果最终得到的最大数的最后一个数字不是<code>1</code>的话，那么翻转最大数就是最小数了，否则将最小数视为第一位数字是<code>1</code>，后面是满足由<code>m-1</code>位数字组成的且各位数字之和为<code>s-1</code>的最大数的翻转数，注意<code>m=1</code>的情况(被这个坑坑了好几次…)</p>

<p>```
import java.util.Scanner;</p>

<p>//http://codeforces.com/contest/489/problem/C</p>

<p>//贪心</p>

<p>public class GivenLengthandSumofDigits2775C {</p>

<pre><code>public static void main(String[] args) {
    Scanner cin = new Scanner(System.in);

    int m = cin.nextInt();
    int s = cin.nextInt();

    if ((9 * m &lt; s) || (s &lt; 1 &amp;&amp; m &gt; 1)) {
        System.out.println("-1 -1");
        return;
    }

    String max = findMax(m, s);
    String min = "";

    //求最小值
    if (max.charAt(max.length() - 1) != '0') {
        min = new StringBuilder(max).reverse().toString();
        System.out.println(min + " " + max);
        return;
    }

    //特殊情况
    if (m == 1) {
        min = "" + s;
    } else {
        min = findMax(m - 1, s - 1);
        min = "1" + new StringBuilder(min).reverse().toString();
    }

    System.out.println(min + " " + max);
}

//求最大值
static String findMax(int m, int s) {
    int k = 1;//当前第几位
    int r = s;//剩余的总和

    String max = "";
    while (k &lt;= m) {
        if (r &gt;= 9) {
            max = max + "9";
            r = r - 9;
        } else {
            max = max + r;
            r = 0;
        }
        k++;
    }
    return max;
}
</code></pre>

<p>}
```</p>

<h4 id="d---unbearable-controversy-of-beinghttpcodeforcescomcontest489problemd"><a href="http://codeforces.com/contest/489/problem/D">489D - Unbearable Controversy of Being</a></h4>

<p>这题内容比较长，大致就是说给你一些节点和某些节点之间的边的信息，求出该图中有多少个如题目中图示给出的那样的菱形，即节点a可以通过节点b也可以通过节点d到达节点c。这道题目解题报告给出的解法就是枚举，遍历任何两个节点a和c，求出它们中间的候选节点b和d，简单的方法是考虑与a相邻的节点是否也与节点c相邻，如果是的话那么该节点算是一个候选节点。最后由于节点a和节点c之间的任何两个候选节点的组合都能得到所需的菱形，那么就是C(r,2)，所有的这些组合相加就是最终的解。</p>

<p>比较郁闷的是本题如果用Java来完成的话貌似一定需要精简代码，最好不要使用ArrayList等，而是使用原始的数组，以一定的空间来换时间，否则很容易超时。</p>

<p>```
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Scanner;</p>

<p>//http://codeforces.com/contest/489/problem/D</p>

<p>//组合题，空间换时间</p>

<p>public class UnbearableControversyofBeing2775D {</p>

<pre><code>public static void main(String[] args) {
    Scanner cin = new Scanner(System.in);

    int n = cin.nextInt();
    int[] s = new int[n];//s[i]=j表示节点i有j个邻居
    int[][] v = new int[n][n];//v[i][j]=1 表示节点i和节点j相连
    int[][] t = new int[n][n];//t[i][j]=k表示节点i第j个邻居是k

    int m = cin.nextInt();
    int a, b;
    for (int i = 0; i &lt; m; i++) {
        a = cin.nextInt();
        b = cin.nextInt();
        v[a - 1][b - 1] = 1;
        t[a - 1][s[a - 1]] = b - 1;
        s[a - 1]++;
    }

    //
    int count = 0;
    for (int i = 0; i &lt; n; i++) {
        for (int j = 0; j &lt; n; j++) {
            if (i != j) {//not the same node
                int r = 0, n1;
                for (int k = 0; k &lt; s[i]; k++) {
                    n1 = t[i][k];
                    if (n1 != i &amp;&amp; n1 != j &amp;&amp; v[n1][j] == 1) {//nodes.get(n1).contains(j)
                        r++;
                    }
                }
                count += r * (r - 1) / 2;//combination
            }
        }
    }
    System.out.println(count);
}
</code></pre>

<p>}
```</p>

<p>后面的等做了再附上。</p>

]]></content>
  </entry>
  
</feed>
