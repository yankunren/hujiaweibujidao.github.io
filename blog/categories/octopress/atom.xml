<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: octopress | Hujiawei Bujidao]]></title>
  <link href="http://hujiaweibujidao.github.io/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://hujiaweibujidao.github.io/"/>
  <updated>2014-11-26T12:52:21+08:00</updated>
  <id>http://hujiaweibujidao.github.io/</id>
  <author>
    <name><![CDATA[hujiawei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Download Coursera Courses in the Fastest Way]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/07/12/download-coursera-courses-in-the-fastest-way/"/>
    <updated>2014-07-12T12:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/07/12/download-coursera-courses-in-the-fastest-way</id>
    <content type="html"><![CDATA[<p>大家估计都上过C站的课吧？每个人都有自己的学习方式和下载方式，或许是看一节下一节，或者一次性全部下载，或者其他的方式等等。我是一个性子比较急的人，学东西喜欢一次性学完，所以我基本上没有去追C站的课程，都只是开课前加入，结课后我开始下载课程资料然后开始学习，嘿嘿，下面是我个人的C站课程一次性下载一门课程所有课程资源的方式，觉得还行特意共享一下</p>

<p>1.使用Firefox浏览器，安装<a href="http://www.downthemall.net/">DownloadThemAll扩展插件</a></p>

<p>2.修改下DownloadThemAll扩展插件的配置</p>

<p>添加两个Filter：一个<code>CourseraVedio</code>，内容是<code>download.mp4?</code>，用于过滤得到课程视频文件；另一个<code>CourseraSubtitls</code>，内容是<code>subtitles?</code>，用于过滤得到课程视频对应的字幕文件</p>

<p>3.进入课程的Video Lectures页面，点击<code>DownloadThemAll! Tools</code>下的<code>DownloadThemAll!</code>，选中新创建的两个filter再加上前面的<code>Documents</code>过滤器，然后选择一个目录点击<code>Start</code>就可以了，下载速度都是超快的哟！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thanks to 360 CDN]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/06/22/thanks-to-360-cdn/"/>
    <updated>2014-06-22T10:40:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/06/22/thanks-to-360-cdn</id>
    <content type="html"><![CDATA[<p>由于众所周知的原因，最近各种网站(以Google、Dropbox为首)都纷纷被墙，作为码农，简直要了俺们的命根子啊，没办法生在天朝也就只能发发牢骚而已，可是，最令人无奈的是Github也时常被拒之于墙外，这可让我这个把个人博客搭在Github上的小屌丝更是吓得心惊胆战，难道真的是要闭关锁国的节奏吗？</p>

<p>有人说的对，一开始不知道为什么Evernote在中国国内要另搞一个印象笔记，现在想想这招真是太聪明了，Dropbox要学着点了，但即使是学过来了，面对国内各种免费送N个T云空间的网盘你的竞争优势有多大呢？</p>

<p>OK，不发牢骚了，因为Google被墙的厉害，而且博客中不少使用了Google API(js库和字体库)，导致博客前段时间访问速度特别慢，所以考完我就来整理整理下，这里要感谢<a href="http://libs.useso.com/">360网站卫士提供的常用前端公共库CDN服务</a>，你们总是能够推出关乎码农们痛痒的东西，永远支持你们！</p>

<p>主要修改下面两处即可：</p>

<p>文件： <code>source/_includes</code>目录下的<code>head.html</code>，修改如下：</p>

<p><code>html
&lt;!--
&lt;script src="http://hujiaweibujidao.github.io//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt;
--&gt;
&lt;script type='text/javascript' src='http://ajax.useso.com/ajax/libs/jquery/1.7.2/jquery.min.js?ver=3.4.2'&gt;&lt;/script&gt;
</code></p>

<p>文件： <code>source/_includes</code>目录下的<code>header.html</code>，修改如下：</p>

<p><code>html
&lt;!-- 注释掉下面的js --&gt;
&lt;!--
&lt;script src="http://hujiaweibujidao.github.io//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt;
--&gt;
&lt;!-- 添加下面的js --&gt;
&lt;script type='text/javascript' src='http://ajax.useso.com/ajax/libs/jquery/1.7.2/jquery.min.js?ver=3.4.2'&gt;&lt;/script&gt;
&lt;!-- 省略部分代码 --&gt;
&lt;!-- 我没有使用Google analytics，所以注释下面一行代码(略有删减) --&gt;
&lt;!--
inlcude google_analytics.html
--&gt;
</code></p>

<p>文件： <code>source/_includes/custom</code>目录下的<code>head.html</code>，修改如下：</p>

<p><code>html
&lt;!-- 注释掉下面的css --&gt;
&lt;!--Fonts from Google"s Web font directory at http://google.com/webfonts --&gt;
&lt;!--
&lt;link href="http://fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css"&gt;
&lt;link href="http://fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css"&gt;
--&gt;
&lt;!-- 添加下面的css --&gt;
&lt;link href="http://fonts.useso.com/css?family=PT+Serif:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css"&gt;
&lt;link href="http://fonts.useso.com/css?family=PT+Sans:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css"&gt;
</code></p>

<p>OK，大功告成，更新文件，重新打开，你会瞬间感觉世界又重新美好了！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Happy Mother's Day]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/10/happy-mothers-day/"/>
    <updated>2014-05-10T20:08:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/10/happy-mothers-day</id>
    <content type="html"><![CDATA[<p>老妈，节日快乐！祝您永远幸福健康！</p>

<p><img src="http://hujiaweibujidao.github.io/images/mothersday.png" alt="image" /></p>

<p>使用的Python代码，<a href="http://pythontip.sinaapp.com/coding/skulpt/">源代码来源不记得了，可以看下这里</a>。</p>

<p>```python
import turtle
import random</p>

<p>def main():
    tList = []
    head = 0
    numTurtles = 10
    for i in range(numTurtles):
        nt = turtle.Turtle()   # Make a new turtle, initialize values
        nt.setheading(head)
        nt.pensize(2)
        nt.color(random.randrange(256),random.randrange(256),random.randrange(256))
        nt.speed(10)
        nt.tracer(30,0)
        tList.append(nt)       # Add the new turtle to the list
        head = head + 360/numTurtles</p>

<pre><code>for i in range(100):
    moveTurtles(tList,15,i)

w = tList[0]
w.up()
w.goto(-130,40)
w.write("You are my favorite lady!",True,"center","20px Arial")
w.goto(-130,-35)
w.write("Happy Mother's Day",True,"center","24px Arial")
</code></pre>

<p>def moveTurtles(turtleList,dist,angle):
    for turtle in turtleList:   # Make every turtle on the list do the same actions.
        turtle.forward(dist)
        turtle.right(angle)</p>

<p>main()
```</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mou and StackEdit and Mathjax]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/15/flying-on-mac/"/>
    <updated>2014-04-15T13:39:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/15/flying-on-mac</id>
    <content type="html"><![CDATA[<p>该博文记录使用Mou和Stackedit中出现的一些问题，包括Mac中的一些软件出现异常的解决方案，使我们能够<code>Flying on Mac</code>，一直更新中…</p>

<p>如果Mou渲染Math公式有问题的话，尝试在第一行加上如下js，表示让Mou去加载Mathjax的脚本</p>

<p><code>js
&lt;!-- import js for mathjax --&gt;
&lt;script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"&gt;&lt;/script&gt;
</code></p>

<p>该链接指向的是Mathjax的js，用来渲染Math公式，Mou支持Mathjax。为了减轻Octopress加载的负担，可以只在需要使用Mathjax的博文中添加一行js即可，不需要将它放在自定义的<code>head.html</code>文件中。</p>

<p>不知为何，最近加上了这句Math公式还是没有显示出来，貌似Mou并没有去加载这个js的样子，于是我尝试在浏览器中直接访问，将这个js中的所有内容复制进来，这样Mou有显示正常了，数学公式都没有问题！ :-) 如果你不能访问，放心，我已经将这个js的源码放在<a href="https://gist.github.com/hujiaweibujidao/11146289">这个Gist中</a>。</p>

<p>如果还是不行的话，那么建议使用<a href="https://stackedit.io/">stackedit</a>，感谢@beader的建议！还有一个问题是stackedit是在线编辑的，图片要保存到Google Driver中(或者有个特定的网址)，另外，它和Mou中内置的MathJax的渲染解析工具略有不同，例如对于行内Math公式的插入方式不同，Stackedit是以<code>$</code>为行内Math公式为标示符，Mou貌似不存在插入行内Math公式的方式，这时候可以在Mou中的Markdown文档中添加下面的代码让它支持行内Math公式。</p>

<p><code>js
&lt;!-- mathjax config similar to math.stackexchange --&gt;
&lt;script type="text/x-mathjax-config"&gt;
MathJax.Hub.Config({
  jax: ["input/TeX", "output/HTML-CSS"],
  tex2jax: {
    inlineMath: [ ['$', '$'] ],
    displayMath: [ ['$$', '$$']],
    processEscapes: true,
    skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
  },
  messageStyle: "none",
  "HTML-CSS": { preferredFont: "TeX", availableFonts: ["STIX","TeX"] }
});
&lt;/script&gt;
&lt;script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML" type="text/javascript"&gt;&lt;/script&gt;
</code></p>

<p>测试：The <em>Gamma function</em> satisfying $\Gamma(n) = (n-1)!\quad\forall
n\in\mathbb N$ is via the Euler integra</p>

<script type="math/tex; mode=display">
\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt\,.
</script>

<p>如果文档是要放在Octopress中使用的话，推荐按照<a href="http://blog-jfttt.herokuapp.com/blog/2013/12/26/add-latex/">这位博主的方式修改</a>，使用kramdown代替默认的rdiscount，然后在<code>footer.html</code>中加入上面的脚本内容。</p>

<blockquote>
  <p><strong>过去的内容，也许不对…</strong> <br />
[但是，它还是存在些问题，关于inline Math公式的问题，推荐将Octopress中的Markdown引擎换成Kramdown，<a href="http://yanping.me/cn/blog/2012/03/10/octopress-with-latex/">参考教程</a>，另外，使用inline Math和使用block Math一样，都是两个连着的美元符。
bug：我发现在Math公式中写入<code>|</code>，即取绝对值符号的话会影响排版，暂时想到的解决方案是转义，换成<code>\\|</code>，它会换成双竖线，即取2范数的符号，不少情况下，不影响思考，嘿嘿。]</p>
</blockquote>

<p>=== At Last ===</p>

<p>我现在的做法是，做一般的作业使用Mou，按照上面的方式肯定有一个可以，完成作业没有问题。</p>

<p>写Octopress博客中的文章用StackEdit，行内Math用<code>$</code>(某些情况下可以，但是有些情况下不行，不行的话还是使用<code>$$</code>，Kramdown支持<code>$$</code>形式的行内公式)，其他形式用<code>$$</code>。Stackedit支持直接将文档publish到Github的某个项目的某个分支下的某个文件夹中，文件名自己命名。如下图所示：</p>

<p><img src="http://hujiaweibujidao.github.io/images/201404/stackedit_publish.png" alt="image" /></p>

<p>注意，如果该目录下有相同名称的文件的话，会被覆盖掉，利用这个方式我们就可以update以前的文章啦！当然，Stackedit在你publish了一次之后会记住publish的目标位置，以后每次更新之后publish都会publish到那个目标位置。</p>

<p>那如果使用Stackedit打开一个Octopress中已经写好了的文章呢？我使用的方法是<code>Import from URL</code>功能，其中的<code>URL</code>是该Markdown文档的URL，可以在Github中找到并打开那个文档，点击<code>Raw</code>按钮就会进入这份文档的源代码页面，复制该页面的URL即可，比如这篇文章的URL是</p>

<p><code>
https://raw.githubusercontent.com/hujiaweibujidao/hujiaweibujidao.github.io/source/source/_posts/2014-04-15-flying-on-mac.markdown
</code></p>

<p>修改完了使用上面的方式覆盖即可。要让Octopress对这个页面进行重新渲染还需要在本地执行下面代码</p>

<p><code>
git pull
rake generate
rake deploy
</code></p>

<p>可以按照<a href="http://hujiaweibujidao.github.io/blog/2013/11/18/make-your-octopress-easy/">Make Your Octopress Easy</a>的方式建立一个shell脚本简化处理流程，方法略过。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make Your Octopress Easy]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2013/11/18/make-your-octopress-easy/"/>
    <updated>2013-11-18T13:11:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2013/11/18/make-your-octopress-easy</id>
    <content type="html"><![CDATA[<p>刚刚来到Octopress的世界，我的新鲜感依旧还在，呵呵，上午写了几个<code>shell</code>脚本让你在Octopress上写博客更加轻松些，至少让我轻松了很多，哈哈哈。</p>

<p>我特别头疼于类似新建文章<code>new_post["postname"]</code>这些个命令，那个下划线可能会记成短破折线，时间长了我可能就不记得这个命令了，当然，如果你是ruby开发者那就肯定不会这样啦，我这年龄大了，记忆力不行了，很难记住那么多的命令啦，还有就是我希望只要打开Terminal就可以调用这些命令，而不用每次切换目录，而且每次我新建了一个文章之后，Mou能够直接启动并打开这个新建的文章让我编辑，想想，这个世界是不是美好多了？哈哈哈</p>

<p>操作步骤：</p>

<h4 id="octopresshomeoctopresspath">[1]新建环境变量<code>OCTOPRESS_HOME</code>，它是你的octopress的根目录，并添加到<code>PATH</code>中</h4>

<p>[下面是我在Mac上的操作，其他系统自行修改]</p>

<p><code>java
sudo nano ~/.bash_profile  #打开并修改.bash_profile文件，下面两行是在该文件中的修改
export OCTOPRESS_HOME=/Users/hujiawei/git/octopress  #添加OCTOPRESS_HOME变量
export PATH=${PATH}:${OCTOPRESS_HOME}  #添加到path中
source ~/.bash_profile  
echo $OCTOPRESS_HOME  #验证是否变量存在
echo $PATH  #验证path是否设置成功
</code></p>

<h4 id="shelloctopresshome">[2]编写几个<code>shell</code>脚本，放在<code>OCTOPRESS_HOME</code>目录下，作用分别如下：</h4>

<ul>
  <li>gen：等价于<code>rake generate</code>操作</li>
</ul>

<p><code>
#! /bin/bash
path=$OCTOPRESS_HOME
cd "$path"
#pwd
rake generate
echo "generate ok"
</code></p>

<ul>
  <li>dep：等价于<code>rake deploy</code>操作</li>
</ul>

<p><code>
#! /bin/bash
path=$OCTOPRESS_HOME
cd "$path"
#pwd
rake generate
rake deploy
echo "generate and deploy ok"
</code></p>

<ul>
  <li>pre：等价于<code>rake preview</code>操作 </li>
</ul>

<p>[注意，这里我是在子线程中启动预览的，所以你按下了Ctrl+C会也不会把预览给终止了，是不是瞬间又感觉这个世界又美好了很多啊，哈哈]</p>

<p><code>
#! /bin/bash
path=$OCTOPRESS_HOME
cd "$path"
#pwd
#rake watch
rake preview &amp;
#echo "watch and preview ok"
</code></p>

<ul>
  <li>gmit：等价于<code>git add/commit/push</code>几个操作的组合</li>
</ul>

<p><code>
#! /bin/bash
if [ $# -ne 1 ]
then
    echo "Usage - gmit  message"
    exit 1
fi
path=$OCTOPRESS_HOME
cd "$path"
#pwd
git add .
git commit -m "$1"
git push origin source
echo "git commit and push ok"
</code></p>

<ul>
  <li>newpost：等价于<code>new_post[""] + open Mou</code>操作组合</li>
</ul>

<p><code>
#! /bin/bash
if [ $# -ne 1 ]
then
    echo "Usage -newpost  postname"
    exit 1
fi
path=$OCTOPRESS_HOME
cd "$path"
#pwd
filepath=`rake new_post["$1"]`
#echo "$filepath"
#Creating new post: source/_posts/2013-11-18-test5.markdown
OLD_IFS="$IFS"
IFS=" "
arr=($filepath)
filepath=${arr[3]}
IFS="$OLD_IFS"
postpath="$path/$filepath"
#echo "$postpath"
#open Mou with the file
open -a Mou $postpath
</code></p>

<ul>
  <li>newpage：等价于<code>new_page[""] + open Mou</code>操作组合</li>
</ul>

<p><code>
#! /bin/bash
if [ $# -ne 1 ]
then
    echo "Usage - newpage  pagename"
    exit 1
fi
path=$OCTOPRESS_HOME
cd "$path"
echo "$path"
filepath=`rake new_page["$1"]`
echo "$filepath"
#Creating new page: source/projects/index.markdown
OLD_IFS="$IFS"
IFS=" "
arr=($filepath)
filepath=${arr[3]}
IFS="$OLD_IFS"
postpath="$path/$filepath"
echo "$postpath"
#open Mou with the file
open -a Mou $postpath
</code></p>

<h4 id="chmod-777-xxx">[3]使用<code>chmod 777 xxx</code>修改脚本的权限，测试执行下</h4>

<p><code>
cd $OCTOPRESS_HOME
chmod 777 gen  #其他文件类似
chmod 777 pre
chmod 777 dep
chmod 777 gmit
chmod 777 newpost
chmod 777 newpage
gen
newpost "test new post" #当这条命令完成生成了Markdown文件之后，你会发现Mou闪电般的将文件打开了，等着你输入呢！
</code></p>

<p>OK！Enjoy the world of Octopress！</p>

]]></content>
  </entry>
  
</feed>
