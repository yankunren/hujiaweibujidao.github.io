<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Hujiawei Bujidao]]></title>
  <link href="http://hujiaweibujidao.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://hujiaweibujidao.github.io/"/>
  <updated>2014-11-22T15:48:33+08:00</updated>
  <id>http://hujiaweibujidao.github.io/</id>
  <author>
    <name><![CDATA[hujiawei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[using Qiniu JS SDK to upload Videos in Django]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/11/14/using-qiniu-js-sdk-to-upload-videos-in-django/"/>
    <updated>2014-11-14T22:48:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/11/14/using-qiniu-js-sdk-to-upload-videos-in-django</id>
    <content type="html"><![CDATA[<p>最近做的项目中需要使用七牛云存储服务来存储网站(Django开发)中用户上传的视频，于是就有了下面一番折腾，特此记录下来，以防以后需要。</p>

<p>PS: 如何想要在SAE上使用Qiniu的话就需要将Qiniu Python SDK相关的源文件都拷贝到Django项目中，否则SAE会报找不到<code>qiniu</code>这个模块，因为SAE内置的预定义的模块列表中没有<code>qiniu</code>！</p>

<p>我想要的目标是可以上传视频，最好还能显示上传的进度</p>

<p>七牛提供了一个演示通过文件上传的网站：<a href="http://jssdk.demo.qiniu.io">http://jssdk.demo.qiniu.io</a></p>

<p><img src="http://hujiaweibujidao.github.io/images/qiniu1.png" alt="image" /></p>

<p>该SDK是七牛提供的Javascript SDK，传送门: <a href="https://github.com/qiniupd/qiniu-js-sdk">七牛的Javascript SDK on Github</a></p>

<p>这个演示网站做得非常不错，演示了文件上传并显示了上传的进度，正是我想要的效果，所以我后面把这个JS SDK嵌入到Django项目中，测试其功能</p>

<p>下面这段代码演示的是在纯Python项目中如何将文件上传到七牛服务器，若还没有安装七牛的话请先运行 <code>pip install qiniu</code> [注意，我的版本是<code>6.1.8</code>，最近七牛的SDK发生了大变化，所以如果想要和我得到一样的效果请安装<code>6.1.8</code>版本，我的好友已经测试过其他的更新的版本都不行]</p>

<p>```python
# coding=utf-8
import os</p>

<p><strong>author</strong> = ‘hujiawei’
<strong>doc</strong> = ‘qiniu sdk video demo’</p>

<p>import StringIO
import sys
import qiniu.conf
import qiniu.rs
import qiniu.io</p>

<p>BUCKET_NAME = “YOUR_BUCKET_NAME”
qiniu.conf.ACCESS_KEY = “YOUR_ACCESS_KEY”
qiniu.conf.SECRET_KEY = “YOUR_SECRET_KEY”</p>

<p>policy = qiniu.rs.PutPolicy(BUCKET_NAME)
uptoken = policy.token()
print(uptoken)</p>

<h1 id="section">############ 示例：上传视频</h1>
<p># extra = qiniu.io.PutExtra()
# item = os.path.join(os.getcwd(), ‘hellokitty.m4v’)
# ret, err = qiniu.io.put_file(uptoken, None, item, extra)
# if err is not None:
#     sys.stderr.write(‘error: %s ‘ % err)</p>

<h1 id="ok-hamsterswf">ok: hamster.swf</h1>

<h1 id="section-1">############ 示例：上传图片</h1>
<p>extra = qiniu.io.PutExtra()
extra.mime_type = “image/jpeg”
# print os.getcwd() #/Users/hujiawei/PycharmProjects/qiniusimple
item = os.path.join(os.getcwd(), ‘coder.jpg’)
ret, err = qiniu.io.put_file(uptoken, None, item, extra)
if err is not None:
    sys.stderr.write(‘error: %s ‘ % err)</p>

<h1 id="extra--qiniuioputextra">extra = qiniu.io.PutExtra()</h1>
<p># # extra.mime_type = “image/jpeg” #image/png 七牛能够自动识别mime-type
# # print os.getcwd() #/Users/hujiawei/PycharmProjects/qiniusimple
# item = os.path.join(os.getcwd(), ‘apple.png’)
# ret, err = qiniu.io.put_file(uptoken, None, item, extra)</p>

<h6 id="section-2">####### 示例：上传字符串内容</h6>
<p># extra = qiniu.io.PutExtra()
# extra.mime_type = “text/plain”
# key = “hellotxt”
# data = StringIO.StringIO(“hello!”) # data 可以是str或readable对象
# ret, err = qiniu.io.put(uptoken, key, data, extra)
# if err is not None:
#     sys.stderr.write(‘error: %s ‘ % err)
```</p>

<p>本来我以为要在Django中使用这个SDK会很难，因为看到该项目的Github介绍还要安装<code>Node.js</code>等工具，可是实践了发现其实不难，如果只是想简单地使用它那么可以就把它们当做一个js库就行了，但是因为qiniu js sdk源码中的重要文件里面使用了不少相对路径，所以建议还是将sdk中的所有内容一起拷贝到Django项目中，保持其原有的相对位置。</p>

<p>需要的可以下载我制作的可运行的Django项目 <a href="http://hujiaweibujidao.github.io/files/qiniudemo.zip">A Django site using Qiniu JS SDK</a></p>

<p>如果要正常运行，请先仔细阅读下面的内容：</p>

<p>1.修改<code>video/views.py</code>中的如下内容，具体填什么你懂得</p>

<p><code>
BUCKET_NAME = "YOUR_BUCKET_NAME"
qiniu.conf.ACCESS_KEY = "YOUR_ACCESS_KEY"
qiniu.conf.SECRET_KEY = "YOUR_SECRET_KEY"
</code></p>

<p>2.修改<code>static/js/main.js</code>中的内容，我设置了获取uptoken的请求URL为<code>/video/uptoken</code>，这样每次要上传一个文件的时候，这个URL就会被调用，它会返回一个JSON字符串，包含了<code>uptoken</code>的值，具体可见<code>video/views.py</code>中的<code>uptoken</code>方法；其次还设置了域名，你需要将它设置为你的七牛域名，例如<code>http://whyeduvideo.qiniudn.com/</code></p>

<p><code>
uptoken_url: '/video/uptoken',
domain: 'YOUR_DOMAIN_NAME',
</code></p>

<p>其他的内容就不用修改了，直接运行项目，进入到<code>http://127.0.0.1:8000/video/</code>下就能看到</p>

<p><img src="http://hujiaweibujidao.github.io/images/qiniu2.png" alt="image" /></p>

<p>如果你想要得到上传之后的文件在七牛服务器上的链接地址的话，请看下面的内容</p>

<p>在SDK的<code>js/ui.js</code>文件的189行的函数中，其中的变量<code>url</code>就是我们需要的，我们只需要通过js将这个变量赋值给界面中的其他元素中就行了，可以直接在下面的函数中进行赋值，也可以在<code>js/main.js</code>文件的<code>FileUploaded</code>函数中进行赋值，推荐后面一种方式。</p>

<p>下面代码中的<code>id='videourl'</code>是我自己添加的，用于后面的赋值操作</p>

<p><code>
FileProgress.prototype.setComplete = function(up, info) {
    var td = this.fileProgressWrapper.find('td:eq(2) .progress');
    var res = $.parseJSON(info);
    var url;
    if (res.url) {
        url = res.url;
        str = "&lt;div&gt;&lt;strong&gt;Link:&lt;/strong&gt;&lt;a href=" + res.url + " target='_blank' id='videourl' &gt; " + res.url + "&lt;/a&gt;&lt;/div&gt;" +
            "&lt;div class=hash&gt;&lt;strong&gt;Hash:&lt;/strong&gt;" + res.hash + "&lt;/div&gt;";
    } else {
        var domain = up.getOption('domain');
        url = domain + encodeURI(res.key);
        var link = domain + res.key;
        str = "&lt;div&gt;&lt;strong&gt;Link:&lt;/strong&gt;&lt;a href=" + url + " target='_blank'  id='videourl' &gt; " + link + "&lt;/a&gt;&lt;/div&gt;" +
            "&lt;div class=hash&gt;&lt;strong&gt;Hash:&lt;/strong&gt;" + res.hash + "&lt;/div&gt;";
    }
</code></p>

<p>在<code>js/main.js</code>文件的<code>FileUploaded</code>函数中进行赋值，下面的例子是将url赋值给表单中的一个隐藏的input组件。</p>

<p>```
 ‘FileUploaded’: function(up, file, info) {
                var progress = new FileProgress(file, ‘fsUploadProgress’);
                progress.setComplete(up, info);</p>

<pre><code>            $('#inputurl').val($('#videourl').attr("href"));//url

        }, ```
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootcamp an open source Django site]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/09/16/bootcamp-an-open-source-django-site/"/>
    <updated>2014-09-16T17:57:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/09/16/bootcamp-an-open-source-django-site</id>
    <content type="html"><![CDATA[<p>最近接了一个项目，用Django开发一个网站，于是打算看看用Django开发的开源网站，推荐一个网站 <a href="https://www.djangosites.org/with-source/">djangosites</a>，上面有大量用django开发的网站源码。最后我找到了Bootcamp，一个包含了Feed、Article和QA三部分的社交网站，界面简洁大方，功能基本齐全，相当适合我这个新手拿来学习</p>

<p>试用Bootcamp网址： <a href="http://trybootcamp.vitorfs.com/">http://trybootcamp.vitorfs.com/</a></p>

<p>Bootcamp源码： <a href="https://github.com/vitorfs/bootcamp">https://github.com/vitorfs/bootcamp</a></p>

<p>Bootcamp安装说明： <a href="https://github.com/vitorfs/bootcamp/wiki/Installing-and-Running-Bootcamp">https://github.com/vitorfs/bootcamp/wiki/Installing-and-Running-Bootcamp</a></p>

<p>安装过程很简单，以下是我安装过程中遇到的一些问题和关键步骤：</p>

<p>(1)安装psycopg2报错 <code>Error: pg_config executable not found.</code></p>

<p>参考网址： <a href="http://stackoverflow.com/questions/11618898/pg-config-executable-not-found">http://stackoverflow.com/questions/11618898/pg-config-executable-not-found</a></p>

<p>解决方案：<code>brew install postgresql</code></p>

<p>(2)新建文件<code>.env</code>，配置数据库为mysql</p>

<p><code>python
DEBUG=True
SECRET_KEY='mys3cr3tk3y'
DATABASE_URL='mysql://root:@localhost/bootcamp'  
</code></p>

<p>(3)同步数据库，运行 <code>python manage.py syncdb</code></p>

<p>```
hujiawei-MacBook-Pro:bootcamp hujiawei$ python manage.py syncdb
Syncing…
Creating tables …
Creating table auth_permission …</p>

<p>You just installed Django’s auth system, which means you don’t have any superusers defined.
Would you like to create one now? (yes/no): yes
Username (leave blank to use ‘hujiawei’): hujiawei
Email address: …
Installing indexes …
Installed 0 object(s) from 0 fixture(s)</p>

<p>Synced:
 &gt; django.contrib.auth …</p>

<p>Not synced (use migrations):
 - 
(use ./manage.py migrate to migrate these)
```</p>

<p>(4)除去项目中的google痕迹，加速页面的加载</p>

<p><code>base.html</code>中删除<code>ga.js</code></p>

<p><code>html
&lt;!--
&lt;script src="js/ga.js"&gt;&lt;/script&gt;
--&gt;
</code></p>

<p><code>static/css/bootcamp.css</code>中修改字体库url，改成360的CDN</p>

<p><code>html
@import url(http://fonts.useso.com/css?family=Audiowide);
</code></p>

<p>网站界面如下：</p>

<p><img src="http://hujiaweibujidao.github.io/images/others/bootcamp.png" alt="image" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Good Python Articles]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/16/python-tips3/"/>
    <updated>2014-05-16T11:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/16/python-tips3</id>
    <content type="html"><![CDATA[<p>关于Python的好文章集锦：</p>

<p>1.<a href="http://www.toptal.com/python/top-10-mistakes-that-python-programmers-make">Top 10 Mistakes that Python Programmers Make</a></p>

<p>2.<a href="http://pypix.com/python/advanced-data-structures-python/">Advanced Data Structures in Python</a></p>

<p><a href="http://blog.jobbole.com/65218/">中文翻译版本:Python高级数据结构</a></p>

<p>3.<a href="http://akaptur.github.io/blog/2013/11/15/introduction-to-the-python-interpreter/">Introduction to the Python Interpreter</a></p>

<p><a href="http://blog.jobbole.com/55327/">中文翻译版本:Python解释器简介</a></p>

<p>4.<a href="http://sahandsaba.com/python-iterators-generators.html">A Study of Python’s More Advanced Features</a></p>

<p><a href="http://blog.jobbole.com/66097/">中文翻译版本：Python高级特性</a></p>

<p>5.<a href="http://pypix.com/tools-and-tips/design-patterns-beginners/">Design Patterns for Beginners in Python</a></p>

<p><a href="http://blog.jobbole.com/62023/">中文翻译版本：Python设计模式入门</a></p>

<p>6.<a href="http://sahandsaba.com/thirty-python-language-features-and-tricks-you-may-not-know.html">30 Python Language Features and Tricks You May Not Know About</a></p>

<p><a href="http://blog.jobbole.com/63320/">中文翻译版本：30个Python编程技巧</a></p>

<p>7.描述器，元类，上下文管理库的介绍参见<a href="http://blog.jobbole.com/61171/">伯乐在线-python高级编程技巧</a></p>

<p>TO BE CONTINUED…</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Advances]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/16/python-tips2/"/>
    <updated>2014-05-16T10:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/16/python-tips2</id>
    <content type="html"><![CDATA[<p>这篇文章介绍一些Python高级编程的内容，该份总结来自<a href="http://dongweiming.github.io/Expert-Python/#1">Expert Python Slides</a>，详情可见<a href="http://www.dongwm.com/archives/fen-xiang-%5B%3F%5D-ge-zhun-bei-gei-gong-si-jiang-pythongao-ji-bian-cheng-de-slide/">分享一个准备给公司讲python高级编程的slide</a>。</p>

<p>[编写中…]</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Basics]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/10/python-tips1/"/>
    <updated>2014-05-10T13:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/10/python-tips1</id>
    <content type="html"><![CDATA[<p>1.使用<code>glob</code>模块可以用通配符的方式搜索某个目录下的特定文件，返回结果是一个list</p>

<p><code>python
import glob
flist=glob.glob('*.jpeg')
</code></p>

<p>使用<code>os.getcwd()</code>可以得到当前目录，如果想切换到其他目录，可以使用<code>os.chdir('str/to/path')</code>，如果想执行Shell脚本，可以使用<code>os.system('mkdir newfolder')</code>。</p>

<p>对于日常文件和目录的管理, <code>shutil</code>模块提供了更便捷、更高层次的接口</p>

<p><code>
import shutil
shutil.copyfile('data.db', 'archive.db')
shutil.move('/build/executables', 'installdir')
</code></p>

<p>使用PyCharm中，在一个Project中新建一个Directory和新建一个Package之后，IDE都会创建对应的目录，并添加默认的<code>__init__.py</code>文件，但是，两者还是不一样的。
如果在它们的目录下各新建一个python脚本测试输出<code>os.getcwd()</code>，如果是在Directory中得到的是Project的根目录’/Users/hujiawei/PycharmProjects/leetcodeoj’；如果是在Package中得到的是Package的根目录，如’/Users/hujiawei/PycharmProjects/leetcodeoj/pypackage’。</p>

<p>2.如果要在代码中添加中文注释的话，最好在文档开头加上下面的编码声明语句。关于Python中的字符串编码可见<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386819196283586a37629844456ca7e5a7faa9b94ee8000">廖雪峰的python教程</a>。若代码打算用在国际化的环境中, 那么不要使用奇特的编码。Python 默认的 UTF-8, 或者甚至是简单的 ASCII 在任何情况下工作得最好。同样地，如果代码的读者或维护者只有很小的概率使用不同的语言，那么不要在标识符里使用非 ASCII 字符。</p>

<p><code>
# coding=utf-8 
或者
# -*- coding: utf-8 -*-
</code></p>

<p>3.关于Python中的变量，摘自<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386820042500060e2921830a4adf94fb31bcea8d6f5c000">廖雪峰的python教程</a></p>

<p>在Python中，变量名类似<code>__xxx__</code>的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用<code>__name__</code>、<code>__score__</code>这样的变量名。</p>

<p>有些时候，你会看到以一个下划线开头的实例变量名(<strong>两个下划线开头的也一样算，其实任何以下划线开头的都算</strong>)，比如<code>_name</code>，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，<strong>“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”</strong>。</p>

<p>双下划线开头的实例变量是不是一定不能从外部访问呢？其实也不是。不能直接访问<code>__name</code>是因为Python解释器对外把<code>__name</code>变量改成了<code>_Student__name</code>，所以，仍然可以通过<code>_Student__name</code>来访问<code>__name</code>变量。但是强烈建议你不要这么干，因为不同版本的Python解释器可能会把<code>__name</code>改成不同的变量名。</p>

<p>总的来说就是，Python本身没有任何机制阻止你干坏事，一切全靠自觉。</p>

<p>上面说的有点绕，下面我写了两个python脚本，大家可以对照看下哪些能够访问，哪些不能，不能的情况下如何操作变得可以访问(注释后面的<code>yes</code>和<code>no</code>表示能不能被访问)。</p>

<p>也就是说，<strong>默认呢，以一个下划线开始(不论结尾有没有下划线)的变量在外部都是可以直接访问的，但是不推荐这么做；以两个下划线开始和两个下划线结束的变量属于特殊变量，可以直接访问；而以两个下划线开始且结尾不是两个下划线(可以没有也可以有一个下划线)的变量属于私有变量，不能直接访问，虽然可以通过其他方式访问，但最好不要在外部访问。</strong></p>

<p>文件<code>APythonTestA.py</code></p>

<p>```python 
# coding=utf-8</p>

<p>class ListNode:</p>

<pre><code>_class_field10 = 'node class field 1-0'
_class_field11_ = 'node class field 1-1'
_class_field12__ = 'node class field 1-2'

__class_field20 = 'node class field 2-0'
__class_field21_ = 'node class field 2-1'
__class_field22__ = 'node class field 2-2'

def __init__(self, x):
    self.val = x
    self.next = None
</code></pre>

<p><em>class_field10 = ‘node class field 1-0’
_class_field11</em> = ‘node class field 1-1’
_class_field12__ = ‘node class field 1-2’</p>

<p><strong>class_field20 = ‘node class field 2-0’
__class_field21_ = ‘node class field 2-1’
__class_field22</strong> = ‘node class field 2-2’
```</p>

<p>文件<code>APythonTestB.py</code></p>

<p>```python 
# coding=utf-8
<strong>author</strong> = ‘hujiawei’
<strong>doc</strong> = ‘for python test 2’</p>

<p>import APythonTestA</p>

<p>if <strong>name</strong> == ‘<strong>main</strong>’:
    print(dir(APythonTestA.ListNode))
    node = APythonTestA.ListNode(4)
    # print(node.<em>ListNode__class_field20) #yes
    print(node._class_field10) #yes
    print(node._class_field11</em>) #yes
    print(node._class_field12<strong>) #yes
    # print(node.__class_field20) #no
    print(node.<em>ListNode__class_field20)#yes
    # print(node.__class_field21</em>) #no
    print(node.<em>ListNode__class_field21</em>)#yes
    print(node.__class_field22</strong>) #yes</p>

<pre><code>print(dir(APythonTestA))
print(APythonTestA._class_field10) #yes
print(APythonTestA._class_field11_) #yes
print(APythonTestA._class_field12__) #yes
print(APythonTestA.__class_field20) #yes
print(APythonTestA.__class_field21_) #yes
print(APythonTestA.__class_field22__) #yes
</code></pre>

<h1 id="listnodeclassfield20-listnodeclassfield21-classfield22-doc-init-module-classfield10-classfield11-classfield12">[’<em>ListNode__class_field20’, ‘_ListNode__class_field21</em>’, ‘<strong>class_field22</strong>’, ‘<strong>doc</strong>’, ‘<strong>init</strong>’, ‘<strong>module</strong>’, ‘<em>class_field10’, ‘_class_field11</em>’, ‘_class_field12__’]</h1>
<p># node class field 1-0
# node class field 1-1
# node class field 1-2
# node class field 2-0
# node class field 2-1
# node class field 2-2
# [‘ListNode’, ‘<strong>builtins</strong>’, ‘<strong>class_field20’, ‘__class_field21<em>’, ‘__class_field22__’, ‘__doc__’, ‘__file__’, ‘__name__’, ‘__package__’, ‘_class_field10’, ‘_class_field11</em>’, ‘_class_field12</strong>’]
# node class field 1-0
# node class field 1-1
# node class field 1-2
# node class field 2-0
# node class field 2-1
# node class field 2-2
```</p>

<p>4.关于Python中函数的参数，摘自<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001374738449338c8a122a7f2e047899fc162f4a7205ea3000">廖雪峰的python教程</a></p>

<p>Python的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。
默认参数一定要用不可变对象，如果是可变对象，运行会有逻辑错误！</p>

<p>要注意定义可变参数和关键字参数的语法：</p>

<p><code>*args</code>是可变参数，args接收的是一个tuple；</p>

<p><code>**kw</code>是关键字参数，kw接收的是一个dict。</p>

<p>以及调用函数时如何传入可变参数和关键字参数的语法：</p>

<p>可变参数既可以直接传入：<code>func(1, 2, 3)</code>，又可以先组装list或tuple，再通过<code>*args</code>传入：<code>func(*(1, 2, 3))；</code></p>

<p>关键字参数既可以直接传入：<code>func(a=1, b=2)</code>，又可以先组装dict，再通过<code>**kw</code>传入：<code>func(**{'a': 1, 'b': 2})</code>。</p>

<p>使用<code>*args</code>和<code>**kw</code>是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。</p>

<p>5.关于Python的高级特性，参见<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868196169906eb9ca5864384546bf3405ae6a172b3e000">廖雪峰的python教程</a></p>

<p>切片，迭代，列表生成式，生成器</p>

<p><strong>除非特殊的原因，应该经常在代码中使用生成器表达式。但除非是面对非常大的列表，否则是不会看出明显区别的。</strong></p>

<p>使用生成器得到当前目录及其子目录中的所有文件的代码，下面代码来自<a href="http://blog.jobbole.com/61171/">伯乐在线-python高级编程技巧</a></p>

<p>```
import os
def tree(top):
    #path,folder list,file list
    for path, names, fnames in os.walk(top):
        for fname in fnames:
            yield os.path.join(path, fname)</p>

<p>for name in tree(os.getcwd()):
    print name
```
另一个使用生成器的代码示例：</p>

<p>```
num = [1, 4, -5, 10, -7, 2, 3, -1]</p>

<p>def square_generator(optional_parameter):
    return (x ** 2 for x in num if x &gt; optional_parameter)</p>

<p>print square_generator(0)
# &lt;generator object <genexpr> at 0x004E6418&gt;</genexpr></p>

<h1 id="option-i">Option I</h1>
<p>for k in square_generator(0):
    print k
# 1, 16, 100, 4, 9</p>

<h1 id="option-ii">Option II</h1>
<p>g = list(square_generator(0))
print g
# [1, 16, 100, 4, 9]
```</p>

<p>6.关于Python的函数式编程，参见<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386819866394c3f9efcd1a454b2a8c57933e976445c0000">廖雪峰的python教程</a>，讲解得很好</p>

<p>高阶函数(使用函数作为参数或者返回一个函数的函数称为<code>高阶函数</code>)，匿名函数(lambda)，装饰器(decorator)和偏函数</p>

<p>用来测试一个函数花费的运行时间的装饰器，当然你也可以使用其他的方式，比如<code>Timer</code>来得到运行时间。下面代码来自<a href="http://blog.jobbole.com/61171/">伯乐在线-python高级编程技巧</a></p>

<p>```
def timethis(func):
    ‘’’
    Decorator that reports the execution time.
    ‘’’
    @wraps(func)
    def wrapper(<em>args, **kwargs):
        start = time.time()
        result = func(</em>args, **kwargs)
        end = time.time()
        print(func.<strong>name</strong>, end-start)
        return result
    return wrapper</p>

<p>@timethis
def countdown(n):
    while n &gt; 0:
        n -= 1
```</p>

<p>其中代码</p>

<p><code>
@timethis
def countdown(n):
</code></p>

<p>就相当于：</p>

<p><code>
def countdown(n):
...
countdown = timethis(countdown)
</code></p>

<p>装饰器除了可以使用函数实现，也可以使用类来实现。</p>

<p><strong>对装饰器的类实现的唯一要求是它必须能如函数一般使用，也就是说它必须是可调用的。所以，如果想这么做这个类必须实现<code>__call__</code>方法。</strong></p>

<p>```
class decorator(object):</p>

<pre><code>def __init__(self, f):
    print("inside decorator.__init__()")
    f() # Prove that function definition has completed
 
def __call__(self):
    print("inside decorator.__call__()")
</code></pre>

<p>@decorator
def function():
    print(“inside function()”)</p>

<p>print(“Finished decorating function()”)</p>

<p>function()</p>

<h1 id="inside-decoratorinit">inside decorator.<strong>init</strong>()</h1>
<p># inside function()
# Finished decorating function()
# inside decorator.<strong>call</strong>()
```</p>

<ol>
  <li>语法糖<code>@decorator</code>相当于<code>function=decorator(function)</code>，在此调用decorator的<code>__init__</code>打印<code>“inside decorator.__init__()”</code></li>
  <li>随后执行f()打印<code>“inside function()”</code></li>
  <li>随后执行<code>“print(“Finished decorating function()”)”</code></li>
  <li>最后再调用function函数时，由于使用装饰器包装，因此执行decorator的<code>__call__</code>打印 <code>“inside decorator.__call__()”</code>。</li>
</ol>

<p>==我的批注：我觉得上面代码不是一般的使用方式，实际装饰器类应该是在<code>__init__</code>方法中设置好自己内部的函数f，然后在方法<code>__call__</code>中调用函数f，并包含一些其他的方法调用，大概如下：</p>

<p>```
class decorator(object):</p>

<pre><code>def __init__(self, f):
    print("inside decorator.__init__()")
    # f() # Prove that function definition has completed
    self.f=f

def __call__(self):
    print("inside decorator.__call__() begin")
    self.f()
    print("inside decorator.__call__() end")
</code></pre>

<p>@decorator
def function():
    print(“inside function()”)</p>

<p>print(“Finished decorating function()”)</p>

<p>function()</p>

<h1 id="inside-decoratorinit-1">inside decorator.<strong>init</strong>()</h1>
<p># Finished decorating function()
# inside decorator.<strong>call</strong>() begin
# inside function()
# inside decorator.<strong>call</strong>() end
```</p>

<p>在提供一个装饰器的例子，实现自顶向下的带备忘录的DP算法来解决斐波那契数列求值，来源于<a href="http://link.springer.com/book/10.1007%2F978-1-4302-3238-4">Python Algorithms- Mastering Basic Algorithms in the Python Language</a></p>

<p>```
from functools import wraps</p>

<p>def memo(func):
    cache={}
    @wraps(func)
    def wrap(<em>args):
        if args not in cache:
            cache[args]=func(</em>args)
        return cache[args]
    return wrap</p>

<p>@memo
def fib(i):
    if i&lt;2: return 1
    return fib(i-1)+fib(i-2)</p>

<p>print(fib(100))
```</p>

<p>7.Python中的值传递和引用传递</p>

<p><a href="http://www.pythoneye.com.cn/article/pythonpeixun45.html">参考阅读资料</a></p>

<p><strong>python函数传递的是对象的引用值，非传值或传引用。但是如果对象是不可变的，感觉和c语言中传值差不多。如果对象是可变的，感觉和c语言中传引用差不多。</strong></p>

<p>运行下面的代码就清楚了</p>

<p>```
def foo(a):
    print “传来是对象的引用对象地址为{0}”.format(id(a))
    a = 3 #形式参数a是局部变量，a重新绑定到3这个对象。
    print “变量a新引用对象地址为{0}”.format(id(a))
    # print a</p>

<p>x = 5
print “全局变量x引用的对象地址为{0}”.format(id(x))
foo(x)
print “变量x新引用对象地址为{0}”.format(id(x))
print x
#由于函数内部a绑定到新的对象，也就修改不了全局变量x引用的对象5
# 全局变量x引用的对象地址为140462615725816
# 传来是对象的引用对象地址为140462615725816
# 变量a新引用对象地址为140462615725864
# 变量x新引用对象地址为140462615725816
# 5</p>

<p>def foo(a):
    “"”在函数内部直接修改了同一个引用指向的对象。
    也就修改了实际参数传来的引用值指向的对象。
    “””
    a.append(“can change object”)
    return a</p>

<p>lst = [1,2,3]
print foo(lst)
print lst
#[1, 2, 3, ‘can change object’]
#[1, 2, 3, ‘can change object’]</p>

<p>def foo(a):
    “"”实际参数传来一个对象[1,2,3]的引用，当时形式参数
    （局部变量a重新引用到新的对象，也就是说保存了新的对象）
    当然不能修改原来的对象了。
    “””
    a = [“python”,”java”]
    return a</p>

<p>lst = [1,2,3]
for item in foo(lst):
    print item
print lst
# python
# java
```</p>

<p>8.其他</p>

<p>(1)Python中<code>set([1,2,3])</code>是一个set，<code>{1,2,3,4,5}</code>也是一个set，<code>{1:2,2:4,3:6,4:8,5:10}</code>是一个dict，而且空的<code>{}</code>是一个dict！</p>

<p>set和dict的唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。试试把list放入set，看看是否会报错。</p>

<!--
(2)得到int类型的最大值使用`sys.maxint`，
-->

]]></content>
  </entry>
  
</feed>
