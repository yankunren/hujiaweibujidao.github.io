<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mac | Hujiawei Bujidao]]></title>
  <link href="http://hujiaweibujidao.github.io/blog/categories/mac/atom.xml" rel="self"/>
  <link href="http://hujiaweibujidao.github.io/"/>
  <updated>2014-11-26T14:02:10+08:00</updated>
  <id>http://hujiaweibujidao.github.io/</id>
  <author>
    <name><![CDATA[hujiawei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mou and StackEdit and Mathjax]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/15/flying-on-mac/"/>
    <updated>2014-04-15T13:39:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/15/flying-on-mac</id>
    <content type="html"><![CDATA[<p>该博文记录使用Mou和Stackedit中出现的一些问题，包括Mac中的一些软件出现异常的解决方案，使我们能够<code>Flying on Mac</code>，一直更新中…</p>

<p>如果Mou渲染Math公式有问题的话，尝试在第一行加上如下js，表示让Mou去加载Mathjax的脚本</p>

<p><code>js
&lt;!-- import js for mathjax --&gt;
&lt;script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"&gt;&lt;/script&gt;
</code></p>

<p>该链接指向的是Mathjax的js，用来渲染Math公式，Mou支持Mathjax。为了减轻Octopress加载的负担，可以只在需要使用Mathjax的博文中添加一行js即可，不需要将它放在自定义的<code>head.html</code>文件中。</p>

<p>不知为何，最近加上了这句Math公式还是没有显示出来，貌似Mou并没有去加载这个js的样子，于是我尝试在浏览器中直接访问，将这个js中的所有内容复制进来，这样Mou有显示正常了，数学公式都没有问题！ :-) 如果你不能访问，放心，我已经将这个js的源码放在<a href="https://gist.github.com/hujiaweibujidao/11146289">这个Gist中</a>。</p>

<p>如果还是不行的话，那么建议使用<a href="https://stackedit.io/">stackedit</a>，感谢@beader的建议！还有一个问题是stackedit是在线编辑的，图片要保存到Google Driver中(或者有个特定的网址)，另外，它和Mou中内置的MathJax的渲染解析工具略有不同，例如对于行内Math公式的插入方式不同，Stackedit是以<code>$</code>为行内Math公式为标示符，Mou貌似不存在插入行内Math公式的方式，这时候可以在Mou中的Markdown文档中添加下面的代码让它支持行内Math公式。</p>

<p><code>js
&lt;!-- mathjax config similar to math.stackexchange --&gt;
&lt;script type="text/x-mathjax-config"&gt;
MathJax.Hub.Config({
  jax: ["input/TeX", "output/HTML-CSS"],
  tex2jax: {
    inlineMath: [ ['$', '$'] ],
    displayMath: [ ['$$', '$$']],
    processEscapes: true,
    skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
  },
  messageStyle: "none",
  "HTML-CSS": { preferredFont: "TeX", availableFonts: ["STIX","TeX"] }
});
&lt;/script&gt;
&lt;script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML" type="text/javascript"&gt;&lt;/script&gt;
</code></p>

<p>测试：The <em>Gamma function</em> satisfying $\Gamma(n) = (n-1)!\quad\forall
n\in\mathbb N$ is via the Euler integra</p>

<script type="math/tex; mode=display">
\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt\,.
</script>

<p>如果文档是要放在Octopress中使用的话，推荐按照<a href="http://blog-jfttt.herokuapp.com/blog/2013/12/26/add-latex/">这位博主的方式修改</a>，使用kramdown代替默认的rdiscount，然后在<code>footer.html</code>中加入上面的脚本内容。</p>

<blockquote>
  <p><strong>过去的内容，也许不对…</strong> <br />
[但是，它还是存在些问题，关于inline Math公式的问题，推荐将Octopress中的Markdown引擎换成Kramdown，<a href="http://yanping.me/cn/blog/2012/03/10/octopress-with-latex/">参考教程</a>，另外，使用inline Math和使用block Math一样，都是两个连着的美元符。
bug：我发现在Math公式中写入<code>|</code>，即取绝对值符号的话会影响排版，暂时想到的解决方案是转义，换成<code>\\|</code>，它会换成双竖线，即取2范数的符号，不少情况下，不影响思考，嘿嘿。]</p>
</blockquote>

<p>=== At Last ===</p>

<p>我现在的做法是，做一般的作业使用Mou，按照上面的方式肯定有一个可以，完成作业没有问题。</p>

<p>写Octopress博客中的文章用StackEdit，行内Math用<code>$</code>(某些情况下可以，但是有些情况下不行，不行的话还是使用<code>$$</code>，Kramdown支持<code>$$</code>形式的行内公式)，其他形式用<code>$$</code>。Stackedit支持直接将文档publish到Github的某个项目的某个分支下的某个文件夹中，文件名自己命名。如下图所示：</p>

<p><img src="http://hujiaweibujidao.github.io/images/201404/stackedit_publish.png" alt="image" /></p>

<p>注意，如果该目录下有相同名称的文件的话，会被覆盖掉，利用这个方式我们就可以update以前的文章啦！当然，Stackedit在你publish了一次之后会记住publish的目标位置，以后每次更新之后publish都会publish到那个目标位置。</p>

<p>那如果使用Stackedit打开一个Octopress中已经写好了的文章呢？我使用的方法是<code>Import from URL</code>功能，其中的<code>URL</code>是该Markdown文档的URL，可以在Github中找到并打开那个文档，点击<code>Raw</code>按钮就会进入这份文档的源代码页面，复制该页面的URL即可，比如这篇文章的URL是</p>

<p><code>
https://raw.githubusercontent.com/hujiaweibujidao/hujiaweibujidao.github.io/source/source/_posts/2014-04-15-flying-on-mac.markdown
</code></p>

<p>修改完了使用上面的方式覆盖即可。要让Octopress对这个页面进行重新渲染还需要在本地执行下面代码</p>

<p><code>
git pull
rake generate
rake deploy
</code></p>

<p>可以按照<a href="http://hujiaweibujidao.github.io/blog/2013/11/18/make-your-octopress-easy/">Make Your Octopress Easy</a>的方式建立一个shell脚本简化处理流程，方法略过。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up Environments on New Mac]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/08/setting-up-environments-on-new-mac/"/>
    <updated>2014-04-08T11:13:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/08/setting-up-environments-on-new-mac</id>
    <content type="html"><![CDATA[<p>1.安装Java 7u51 ［直接在<a href="http://www.java.com/zh_CN/download/manual.jsp">官网</a>下载dmg点击安装即可]</p>

<p><code>JAVA_HOME=/Library/Java/JavaVirtualMachines/1.7.0_51.jdk/Contents/Home</code></p>

<p>为了保证Eclipse和Matlab等需要JRE 6的应用程序能够运行，还需要 ［<code>1.7.0.jdk</code>部分可能需要修改］</p>

<p>[个人猜测，因为Mac OS X早期系统和Mavericks中将JDK存放的位置不同，很多程序按照以前的位置去查找，所以找不到，不能正常启动]</p>

<p><code>sudo mkdir /System/Library/Java/JavaVirtualMachines</code></p>

<p><code>sudo ln -s /Library/Java/JavaVirtualMachines/1.7.0.jdk /System/Library/Java/JavaVirtualMachines/1.6.0.jdk</code></p>

<p>实际上上面的操作还是会导致系统存在两个JRE（6和7），不过已经算是很好的解决方案了</p>

<p>网址：<a href="http://apple.stackexchange.com/questions/58203/mountain-lion-with-java-7-only">http://apple.stackexchange.com/questions/58203/mountain-lion-with-java-7-only</a></p>

<p>2.安装HomeBrew</p>

<p>网址：<a href="https://raw.github.com/Homebrew/homebrew/go/install">https://raw.github.com/Homebrew/homebrew/go/install</a></p>

<p>网址：<a href="http://linfan.info/blog/2012/02/25/homebrew-installation-and-usage/">http://linfan.info/blog/2012/02/25/homebrew-installation-and-usage/</a> [Homebrew使用教程]</p>

<p>执行<code>ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"</code>，如果还没有安装Xcode，则需要安装CLT(Command Line Tools) <code>"xcode-select --install"</code></p>

<p>Homebrew会将安装的软件包存放在<code>/usr/local/</code>目录下，例如<code>/usr/local/bin</code>存放一些可执行文件，<code>/usr/local/lib</code>存放一些公共库，通过homebrew安装的软件包存放在<code>/usr/local/Cellar</code>目录下。
通过<code>brew doctor</code>命令可以检查系统中软件包可能存在的一些问题。添加<code>export PATH=/usr/local/bin:$PATH</code>到<code>~/.bash_profile</code>文件中，这样默认先使用Homebrew安装的应用程序，而不是使用系统。[注：Homebrew不会破坏系统的一些软件或者环境变量，另外，Homebrew下载的安装包存放在<code>/Library/Caches/Homebrew</code>目录中，创建的Formula存放在<code>/usr/local/Library/Formula</code>目录中]</p>

<p><code>java
hujiawei-MacBook-Pro:~ hujiawei$ ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
==&gt; This script will install:
/usr/local/bin/brew
/usr/local/Library/...
/usr/local/share/man/man1/brew.1
...
==&gt; Installation successful!
You should run `brew doctor' *before* you install anything.
Now type: brew help
</code></p>

<p>3.安装git</p>

<p>网址：<a href="https://help.github.com/articles/generating-ssh-keys">https://help.github.com/articles/generating-ssh-keys</a></p>

<p><code>brew install git</code>，然后按照网址提示添加<code>ssh－key</code></p>

<p><code>
hujiawei-MacBook-Pro:.ssh hujiawei$ ssh-add ~/.ssh/id_rsa
Identity added: /Users/hujiawei/.ssh/id_rsa (/Users/hujiawei/.ssh/id_rsa)
hujiawei-MacBook-Pro:.ssh hujiawei$ pbcopy &lt; ~/.ssh/id_rsa.pub
hujiawei-MacBook-Pro:.ssh hujiawei$ pbcopy &lt; ~/.ssh/id_rsa.pub
hujiawei-MacBook-Pro:.ssh hujiawei$ ssh -T git@github.com
Warning: Permanently added the RSA host key for IP address '192.30.252.128' to the list of known hosts.
Hi hujiaweibujidao! You've successfully authenticated, but GitHub does not provide shell access.
</code></p>

<p>4.配置python环境</p>

<p>网址：<a href="http://penandpants.com/2012/02/24/install-python/">http://penandpants.com/2012/02/24/install-python/</a></p>

<p>使用Homebrew安装了python之后，python路径修改为 <code>/usr/local/bin/python</code> [原来在 <code>/usr/bin/python</code>]，<code>pip install &lt;package&gt;</code>命令会将模块安装到<code>/usr/local/lib/python2.7/site-packages</code>中。<code>pip list</code>命令查看已经安装的Python模块。</p>

<p><code>
hujiawei-MacBook-Pro:~ hujiawei$ brew install python
Warning: A newer Command Line Tools release is available
Update them from Software Update in the App Store.
==&gt; Installing dependencies for python: readline, sqlite, gdbm
==&gt; Installing python dependency: readline
==&gt; Downloading https://downloads.sf.net/project/machomebrew/Bottles/readline-6.
==&gt; Pouring readline-6.2.4.mavericks.bottle.2.tar.gz
==&gt; Caveats
...
</code></p>

<p>如果把<code>/usr/local/share/python</code>（参考网站提示用来存放Python脚本）也添加到<code>$PATH</code>中的话，<code>brew doctor</code>会给出一个警告，暂时不添加。</p>

<p><code>
Warning: /usr/local/share/python is not needed in PATH.
Formerly homebrew put Python scripts you installed via `pip` or `pip3`
(or `easy_install`) into that directory above but now it can be removed
from your PATH variable.
Python scripts will now install into /usr/local/bin.
You can delete anything, except 'Extras', from the /usr/local/share/python
(and /usr/local/share/python3) dir and install affected Python packages
anew with `pip install --upgrade`.
</code></p>

<p>安装好了python之后，按照网址上的内容继续安装pip，然后安装<code>virtualenv, virtualenvwrapper, numpy, gfortran, scipy, matplotlib</code>等模块。[注，一般软件包使用brew安装和管理，对于python的模块使用pip安装和管理]</p>

<p>5.配置Ruby环境 ［为了正常使用原有的Octopress］</p>

<p>网址：<a href="http://hujiaweibujidao.github.io/blog/2013/11/17/hello-octopress/">http://hujiaweibujidao.github.io/blog/2013/11/17/hello-octopress/</a></p>

<p>网址：<a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/">http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/</a></p>

<p>网址：<a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a> <a href="http://octopress.org/docs/deploying/github/">http://octopress.org/docs/deploying/github/</a></p>

<p>执行<code>rbenv install 1.9.3-p0</code> 时需要<code>apple-gcc42</code>，执行 <code>brew tap homebrew/dupes ; brew install apple-gcc42</code></p>

<p><code>
hujiawei-MacBook-Pro:eclipse_cp hujiawei$ brew install rbenv
Warning: A newer Command Line Tools release is available
Update them from Software Update in the App Store.
==&gt; Downloading https://github.com/sstephenson/rbenv/archive/v0.4.0.tar.gz
==&gt; Caveats
To use Homebrew's directories rather than ~/.rbenv add to your profile:
  export RBENV_ROOT=/usr/local/var/rbenv
...
</code></p>

<p>rbenv是一个管理ruby环境的工具，gem相当于管理ruby模块的工具。(<code>gem list</code>查看已安装的模块)</p>

<p>如果想要使用以前的Octopress的话，执行下面的命令，之后就可以像以前一样使用Octopress了</p>

<p><code>
brew update
brew install rbenv
brew install ruby-build
rbenv install 1.9.3-p0
rbenv rehash
rbenv global 1.9.3-p0  #建议增加这句修改系统全局的ruby版本
ruby --version  #查看系统ruby版本
cd &lt;path-to-octopress&gt;
gem install bundler
rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
bundle install
</code></p>

<p>6.配置OpenCV环境</p>

<p>网址：<a href="http://hujiaweibujidao.github.io/blog/2014/03/13/develop-with-opencv-on-mac-os-x/">http://hujiaweibujidao.github.io/blog/2014/03/13/develop-with-opencv-on-mac-os-x/</a></p>

<p><strong>注意！如果是进行OpenCV源码编译的话，因为会产生很多的文件保存到<code>/usr/local</code>下的各个子目录中，这会导致<code>brew doctor</code>报出很多错误，例如<code>/usr/local/lib</code>下很多OpenCV的库Homebrew不能识别，甚至涉及到了权限问题，所以建议不要再前面进行OpenCV环境的配置！</strong></p>

<p>正常情况下的OpenCV配置：安装CMake，编译OpenCV源码，花的时间比较长</p>

<p><code>
sudo brew install cmake //homebrew
cd &lt;path-to-opencv-source&gt;
mkdir release
cd release
cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local ..
make
sudo make install
</code></p>

<p>如果导致前面出现Python环境配置出现问题，可以尝试卸载OpenCV，还要手动删除一些<code>/usr/local</code>下的OpenCV目录。</p>

<p><code>
hujiawei-MacBook-Pro:hujiawei hujiawei$ cd Android/opencv-2.4.6.1/
hujiawei-MacBook-Pro:opencv-2.4.6.1 hujiawei$ cd release
hujiawei-MacBook-Pro:release hujiawei$ sudo make uninstall
Password:
Scanning dependencies of target uninstall
-- Uninstalling "/usr/local/include/opencv2/opencv_modules.hpp"
-- Uninstalling "/usr/local/lib/pkgconfig/opencv.pc"
-- Uninstalling "/usr/local/share/OpenCV/OpenCVConfig.cmake"
-- Uninstalling "/usr/local/share/OpenCV/OpenCVConfig-version.cmake"
-- Uninstalling "/usr/local/include/opencv/cv.h"
-- Uninstalling "/usr/local/include/opencv/cv.hpp"
...
-- Uninstalling "/usr/local/share/OpenCV/haarcascades/haarcascade_smile.xml"
-- Uninstalling "/usr/local/share/OpenCV/haarcascades/haarcascade_upperbody.xml"
-- Uninstalling "/usr/local/share/OpenCV/lbpcascades/lbpcascade_frontalface.xml"
-- Uninstalling "/usr/local/share/OpenCV/lbpcascades/lbpcascade_profileface.xml"
-- Uninstalling "/usr/local/share/OpenCV/lbpcascades/lbpcascade_silverware.xml"
-- Uninstalling "/usr/local/bin/opencv_haartraining"
-- Uninstalling "/usr/local/bin/opencv_createsamples"
-- Uninstalling "/usr/local/bin/opencv_performance"
-- Uninstalling "/usr/local/bin/opencv_traincascade"
Built target uninstall
</code>
如果可以的话，使用Homebrew安装OpenCV</p>

<p>参考网址：<a href="http://www.jeffreythompson.org/blog/2013/08/22/update-installing-opencv-on-mac-mountain-lion/">http://www.jeffreythompson.org/blog/2013/08/22/update-installing-opencv-on-mac-mountain-lion/</a>  支持Mavericks</p>

<p>其他关于搭建OpenCV环境的文章 <a href="http://blog.sciencenet.cn/blog-702148-657754.html">http://blog.sciencenet.cn/blog-702148-657754.html</a></p>

<p>我的系统在执行<code>brew install jasper</code>时不知何原因不能继续，一直停留在<code>make install</code>状态，所以<code>brew install opencv</code>不能成功，即使我修改japser或者opencv的Formula文件也无济于事，最终尝试还是进行OpenCV源码编译，但是不安装到<code>/usr/local/</code>目录中，方法是修改下面的<code>CMAKE_INSTALL_PREFIX</code></p>

<p><code>
cd &lt;path-to-opencv-source&gt;
mkdir release
cd release
cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/opencv .. 
make
sudo make install
</code>
但是，还有一个问题，无论在Xcode还是Eclipse中创建OpenCV项目都一样会报一个错，如下：</p>

<p><code>
dyld: Library not loaded: lib/libopencv_core.2.4.dylib
  Referenced from: /Users/hujiawei/Library/Developer/Xcode/DerivedData/PRWorks-gmeabxnfaunwiqbrvvjpxjlfkymu/Build/Products/Debug/PRWorks
  Reason: image not found
</code></p>

<p>即使你的路径都没错也还是不能加载到，不知道何原因，但是如果你直接将编译之后的所有dylib复制到<code>/usr/local/lib</code>中即可，不能是该目录下的某个文件夹！复制了之后，自然<code>brew doctor</code>会对此进行警告，无视吧。</p>

<p>一个常用来测试OpenCV环境的项目代码如下，需要opencv_core和opencv_highgui两个库</p>

<p><code>
#include &lt;opencv2/opencv.hpp&gt;
using namespace cv;
int main(int argc, char** argv) {
	Mat image;
	image = imread(
			"/Users/hujiawei/Pictures/webimages/clone-your-octopress-001.png",
			1);
	namedWindow("Display Image", WINDOW_AUTOSIZE);
	imshow("Display Image", image);
	waitKey(0);
	return 0;
}
</code></p>

<p>7.最后执行<code>brew linkapps</code>会将brew安装的python中的app链接到Applications中</p>

<p><code>
hujiawei-MacBook-Pro:~ hujiawei$ brew linkapps
Linking /usr/local/Cellar/python/2.7.6/IDLE.app
Linking /usr/local/Cellar/python/2.7.6/Python Launcher.app
Finished linking. Find the links under /Applications.
</code></p>

<p>使用<code>brew doctor</code>检查，修复问题。</p>

<p><code>
hujiawei-MacBook-Pro:~ hujiawei$ brew doctor
Warning: You have unlinked kegs in your Cellar
Leaving kegs unlinked can lead to build-trouble and cause brews that depend on
those kegs to fail to run properly once built. Run `brew link` on these:
    cloog
    isl
Warning: A newer Command Line Tools release is available
Update them from Software Update in the App Store.
^C
hujiawei-MacBook-Pro:~ hujiawei$ brew link cloog
Linking /usr/local/Cellar/cloog/0.18.1... 8 symlinks created
hujiawei-MacBook-Pro:~ hujiawei$ brew link isl
Linking /usr/local/Cellar/isl/0.12.1... 6 symlinks created
</code></p>
]]></content>
  </entry>
  
</feed>
